#[allow(unused_variables)]
#[allow(non_upper_case_globals)]
pub mod windows {
    #[allow(unused_variables)]
    #[allow(non_upper_case_globals)]
    pub mod data {
        #[allow(unused_variables)]
        #[allow(non_upper_case_globals)]
        pub mod text {
            #[repr(C)]
            #[allow(non_snake_case)]
            pub struct TextSegment {
                pub start_position: u32,
                pub length: u32,
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct TextSegment_abi(u32, u32);
            unsafe impl ::windows::Abi for TextSegment {
                type Abi = TextSegment_abi;
            }
            impl ::std::default::Default for TextSegment {
                fn default() -> Self {
                    Self {
                        start_position: 0,
                        length: 0,
                    }
                }
            }
            impl ::std::fmt::Debug for TextSegment {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("TextSegment")
                        .field("start_position", &format_args!("{:?}", self.start_position))
                        .field("length", &format_args!("{:?}", self.length))
                        .finish()
                }
            }
            impl ::std::clone::Clone for TextSegment {
                fn clone(&self) -> Self {
                    Self {
                        start_position: self.start_position,
                        length: self.length,
                    }
                }
            }
            impl ::std::cmp::PartialEq for TextSegment {
                fn eq(&self, other: &Self) -> bool {
                    self.start_position == other.start_position && self.length == other.length
                }
            }
            impl ::std::cmp::Eq for TextSegment {}
            unsafe impl ::windows::RuntimeType for TextSegment {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"struct(Windows.Data.Text.TextSegment;u4;u4)",
                );
            }
        }
    }
    #[allow(unused_variables)]
    #[allow(non_upper_case_globals)]
    pub mod foundation {
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct AsyncStatus(pub i32);
        impl ::std::convert::From<i32> for AsyncStatus {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for AsyncStatus {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for AsyncStatus {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for AsyncStatus {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for AsyncStatus {}
        impl AsyncStatus {
            #![allow(non_upper_case_globals)]
            pub const Canceled: Self = Self(2i32);
            pub const Completed: Self = Self(1i32);
            pub const Error: Self = Self(3i32);
            pub const Started: Self = Self(0i32);
        }
        unsafe impl ::windows::Abi for AsyncStatus {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for AsyncStatus {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"enum(Windows.Foundation.AsyncStatus;i4)");
        }
        #[repr(transparent)]
        pub struct IAsyncInfo(::windows::Object);
        impl ::std::clone::Clone for IAsyncInfo {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IAsyncInfo {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IAsyncInfo {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IAsyncInfo {}
        impl IAsyncInfo {
            pub fn id(&self) -> ::windows::Result<u32> {
                let this = self;
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u32>(result__)
                }
            }
            pub fn status(&self) -> ::windows::Result<AsyncStatus> {
                let this = self;
                unsafe {
                    let mut result__: <AsyncStatus as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<AsyncStatus>(result__)
                }
            }
            pub fn error_code(&self) -> ::windows::Result<::windows::ErrorCode> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::ErrorCode as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::ErrorCode>(result__)
                }
            }
            pub fn cancel(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this)).ok() }
            }
            pub fn close(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this)).ok() }
            }
        }
        unsafe impl ::windows::Interface for IAsyncInfo {
            type Vtable = IAsyncInfo_abi;
            const IID: ::windows::Guid =
                ::windows::Guid::from_values(54, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70]);
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IAsyncInfo_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut u32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut AsyncStatus,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::ErrorCode,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IAsyncInfo {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{00000036-0000-0000-c000-000000000046}") };
        }
        impl ::std::convert::From<IAsyncInfo> for ::windows::Object {
            fn from(value: IAsyncInfo) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IAsyncInfo> for ::windows::Object {
            fn from(value: &IAsyncInfo) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IAsyncInfo {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IAsyncInfo {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IAsyncAction(::windows::Object);
        impl ::std::clone::Clone for IAsyncAction {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IAsyncAction {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IAsyncAction {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IAsyncAction {}
        impl IAsyncAction {
            pub fn set_completed<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, AsyncActionCompletedHandler>>,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn completed(&self) -> ::windows::Result<AsyncActionCompletedHandler> {
                let this = self;
                unsafe {
                    let mut result__: <AsyncActionCompletedHandler as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<AsyncActionCompletedHandler>(result__)
                }
            }
            pub fn get_results(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this)).ok() }
            }
            pub fn id(&self) -> ::windows::Result<u32> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u32>(result__)
                }
            }
            pub fn status(&self) -> ::windows::Result<AsyncStatus> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe {
                    let mut result__: <AsyncStatus as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<AsyncStatus>(result__)
                }
            }
            pub fn error_code(&self) -> ::windows::Result<::windows::ErrorCode> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::ErrorCode as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::ErrorCode>(result__)
                }
            }
            pub fn cancel(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this)).ok() }
            }
            pub fn close(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this)).ok() }
            }
            pub fn get(&self) -> ::windows::Result<()> {
                if self.status()? == ::windows::foundation::AsyncStatus::Started {
                    let (waiter, signaler) = ::windows::Waiter::new();
                    self.set_completed(::windows::foundation::AsyncActionCompletedHandler::new(
                        move |_sender, _args| {
                            unsafe {
                                signaler.signal();
                            }
                            Ok(())
                        },
                    ))?;
                }
                self.get_results()
            }
        }
        unsafe impl ::windows::Interface for IAsyncAction {
            type Vtable = IAsyncAction_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1516535814,
                33850,
                19881,
                [134, 91, 157, 38, 229, 223, 173, 123],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IAsyncAction_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IAsyncAction {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{5a648006-843a-4da9-865b-9d26e5dfad7b}") };
        }
        impl ::std::convert::From<IAsyncAction> for ::windows::Object {
            fn from(value: IAsyncAction) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IAsyncAction> for ::windows::Object {
            fn from(value: &IAsyncAction) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IAsyncAction {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IAsyncAction {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IAsyncAction> for IAsyncInfo {
            fn from(value: IAsyncAction) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IAsyncAction> for IAsyncInfo {
            fn from(value: &IAsyncAction) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IAsyncInfo>> for IAsyncAction {
            fn into(self) -> ::windows::Param<'a, IAsyncInfo> {
                ::windows::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IAsyncInfo>> for &'a IAsyncAction {
            fn into(self) -> ::windows::Param<'a, IAsyncInfo> {
                ::windows::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::future::Future for IAsyncAction {
            type Output = ::windows::Result<()>;
            fn poll(
                self: ::std::pin::Pin<&mut Self>,
                context: &mut ::std::task::Context,
            ) -> ::std::task::Poll<Self::Output> {
                if self.status()? == ::windows::foundation::AsyncStatus::Started {
                    let waker = context.waker().clone();
                    let _ = self.set_completed(
                        ::windows::foundation::AsyncActionCompletedHandler::new(
                            move |_sender, _args| {
                                waker.wake_by_ref();
                                Ok(())
                            },
                        ),
                    );
                    ::std::task::Poll::Pending
                } else {
                    ::std::task::Poll::Ready(self.get_results())
                }
            }
        }
        #[repr(transparent)]
        pub struct AsyncActionCompletedHandler(::windows::IUnknown);
        impl ::std::clone::Clone for AsyncActionCompletedHandler {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for AsyncActionCompletedHandler {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for AsyncActionCompletedHandler {}
        impl ::std::fmt::Debug for AsyncActionCompletedHandler {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        unsafe impl ::windows::Interface for AsyncActionCompletedHandler {
            type Vtable = AsyncActionCompletedHandler_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2767019137,
                30409,
                16573,
                [139, 230, 177, 217, 15, 178, 10, 231],
            );
        }
        unsafe impl ::windows::RuntimeType for AsyncActionCompletedHandler {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                ::windows::ConstBuffer::from_slice(
                    b"delegate({a4ed5c81-76c9-40bd-8be6-b1d90fb20ae7})",
                )
            };
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct AsyncActionCompletedHandler_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                async_info: ::windows::RawPtr,
                async_status: AsyncStatus,
            ) -> ::windows::ErrorCode,
        );
        impl AsyncActionCompletedHandler {
            pub fn invoke<'a, T0__: ::std::convert::Into<::windows::Param<'a, IAsyncAction>>>(
                &self,
                async_info: T0__,
                async_status: AsyncStatus,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).3)(
                        ::windows::Abi::abi(this),
                        async_info.into().abi(),
                        async_status,
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                        &::std::option::Option<IAsyncAction>,
                        AsyncStatus,
                    ) -> ::windows::Result<()>
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = AsyncActionCompletedHandler_box::<F> {
                    vtable: &AsyncActionCompletedHandler_box::<F>::VTABLE,
                    count: ::windows::RefCount::new(),
                    invoke,
                };
                unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
            }
        }
        #[repr(C)]
        struct AsyncActionCompletedHandler_box<
            F: FnMut(&::std::option::Option<IAsyncAction>, AsyncStatus) -> ::windows::Result<()>
                + 'static,
        > {
            vtable: *const AsyncActionCompletedHandler_abi,
            invoke: F,
            count: ::windows::RefCount,
        }
        #[allow(non_snake_case)]
        impl<
                F: FnMut(
                        &::std::option::Option<IAsyncAction>,
                        AsyncStatus,
                    ) -> ::windows::Result<()>
                    + 'static,
            > AsyncActionCompletedHandler_box<F>
        {
            const VTABLE: AsyncActionCompletedHandler_abi = AsyncActionCompletedHandler_abi(
                Self::QueryInterface,
                Self::AddRef,
                Self::Release,
                Self::Invoke,
            );
            unsafe extern "system" fn QueryInterface(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                *interface = if iid == &<AsyncActionCompletedHandler as ::windows::Interface>::IID
                    || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                    || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    ::std::ptr::null_mut()
                };
                if (*interface).is_null() {
                    ::windows::ErrorCode::E_NOINTERFACE
                } else {
                    (*this).count.add_ref();
                    ::windows::ErrorCode::S_OK
                }
            }
            unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: ::windows::RawPtr,
                async_info: ::windows::RawPtr,
                async_status: AsyncStatus,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                ((*this).invoke)(
                    &*(&async_info as *const <IAsyncAction as ::windows::Abi>::Abi
                        as *const <IAsyncAction as ::windows::RuntimeType>::DefaultType),
                    async_status,
                )
                .into()
            }
        }
        #[repr(transparent)]
        pub struct AsyncActionWithProgressCompletedHandler<TProgress>(
            ::windows::IUnknown,
            ::std::marker::PhantomData<TProgress>,
        )
        where
            TProgress: ::windows::RuntimeType + 'static;
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::clone::Clone
            for AsyncActionWithProgressCompletedHandler<TProgress>
        {
            fn clone(&self) -> Self {
                Self(self.0.clone(), ::std::marker::PhantomData::<TProgress>)
            }
        }
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq
            for AsyncActionWithProgressCompletedHandler<TProgress>
        {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::cmp::Eq
            for AsyncActionWithProgressCompletedHandler<TProgress>
        {
        }
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::fmt::Debug
            for AsyncActionWithProgressCompletedHandler<TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        unsafe impl<TProgress: ::windows::RuntimeType + 'static> ::windows::Interface
            for AsyncActionWithProgressCompletedHandler<TProgress>
        {
            type Vtable = AsyncActionWithProgressCompletedHandler_abi<TProgress>;
            const IID : :: windows :: Guid = :: windows :: Guid :: from_signature ( < AsyncActionWithProgressCompletedHandler :: < TProgress > as :: windows :: RuntimeType > :: SIGNATURE ) ;
        }
        unsafe impl<TProgress: ::windows::RuntimeType + 'static> ::windows::RuntimeType
            for AsyncActionWithProgressCompletedHandler<TProgress>
        {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                let string = ::windows::ConstBuffer::new();
                let string = string.push_slice(b"pinterface(");
                let string = string.push_slice(b"{9c029f91-cc84-44fd-ac26-0a6c4e555281}");
                let string = string.push_slice(b";");
                let string = string.push_other(<TProgress as ::windows::RuntimeType>::SIGNATURE);
                string.push_slice(b")")
            };
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct AsyncActionWithProgressCompletedHandler_abi<TProgress>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                async_info: ::windows::RawPtr,
                async_status: AsyncStatus,
            ) -> ::windows::ErrorCode,
            ::std::marker::PhantomData<TProgress>,
        )
        where
            TProgress: ::windows::RuntimeType + 'static;
        impl<TProgress: ::windows::RuntimeType + 'static>
            AsyncActionWithProgressCompletedHandler<TProgress>
        {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IAsyncActionWithProgress<TProgress>>>,
            >(
                &self,
                async_info: T0__,
                async_status: AsyncStatus,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).3)(
                        ::windows::Abi::abi(this),
                        async_info.into().abi(),
                        async_status,
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                        &::std::option::Option<IAsyncActionWithProgress<TProgress>>,
                        AsyncStatus,
                    ) -> ::windows::Result<()>
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = AsyncActionWithProgressCompletedHandler_box::<TProgress, F> {
                    vtable: &AsyncActionWithProgressCompletedHandler_box::<TProgress, F>::VTABLE,
                    count: ::windows::RefCount::new(),
                    invoke,
                };
                unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
            }
        }
        #[repr(C)]
        struct AsyncActionWithProgressCompletedHandler_box<
            TProgress,
            F: FnMut(
                    &::std::option::Option<IAsyncActionWithProgress<TProgress>>,
                    AsyncStatus,
                ) -> ::windows::Result<()>
                + 'static,
        >
        where
            TProgress: ::windows::RuntimeType + 'static,
        {
            vtable: *const AsyncActionWithProgressCompletedHandler_abi<TProgress>,
            invoke: F,
            count: ::windows::RefCount,
        }
        #[allow(non_snake_case)]
        impl<
                TProgress: ::windows::RuntimeType + 'static,
                F: FnMut(
                        &::std::option::Option<IAsyncActionWithProgress<TProgress>>,
                        AsyncStatus,
                    ) -> ::windows::Result<()>
                    + 'static,
            > AsyncActionWithProgressCompletedHandler_box<TProgress, F>
        {
            const VTABLE: AsyncActionWithProgressCompletedHandler_abi<TProgress> =
                AsyncActionWithProgressCompletedHandler_abi::<TProgress>(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                    ::std::marker::PhantomData::<TProgress>,
                );
            unsafe extern "system" fn QueryInterface(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                * interface = if iid == & < AsyncActionWithProgressCompletedHandler :: < TProgress > as :: windows :: Interface > :: IID || iid == & < :: windows :: IUnknown as :: windows :: Interface > :: IID || iid == & < :: windows :: IAgileObject as :: windows :: Interface > :: IID { & mut ( * this ) . vtable as * mut _ as _ } else { :: std :: ptr :: null_mut ( ) } ;
                if (*interface).is_null() {
                    ::windows::ErrorCode::E_NOINTERFACE
                } else {
                    (*this).count.add_ref();
                    ::windows::ErrorCode::S_OK
                }
            }
            unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: ::windows::RawPtr,
                async_info: ::windows::RawPtr,
                async_status: AsyncStatus,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                ( ( * this ) . invoke ) ( & * ( & async_info as * const < IAsyncActionWithProgress :: < TProgress > as :: windows :: Abi > :: Abi as * const < IAsyncActionWithProgress :: < TProgress > as :: windows :: RuntimeType > :: DefaultType ) , async_status , ) . into ( )
            }
        }
        #[repr(transparent)]
        pub struct IAsyncActionWithProgress<TProgress>(
            ::windows::Object,
            ::std::marker::PhantomData<TProgress>,
        )
        where
            TProgress: ::windows::RuntimeType + 'static;
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::clone::Clone
            for IAsyncActionWithProgress<TProgress>
        {
            fn clone(&self) -> Self {
                Self(self.0.clone(), ::std::marker::PhantomData::<TProgress>)
            }
        }
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::fmt::Debug
            for IAsyncActionWithProgress<TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq
            for IAsyncActionWithProgress<TProgress>
        {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::cmp::Eq
            for IAsyncActionWithProgress<TProgress>
        {
        }
        impl<TProgress: ::windows::RuntimeType + 'static> IAsyncActionWithProgress<TProgress> {
            pub fn set_progress<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, AsyncActionProgressHandler<TProgress>>>,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn progress(&self) -> ::windows::Result<AsyncActionProgressHandler<TProgress>> {
                let this = self;
                unsafe {
                    let mut result__ : < AsyncActionProgressHandler :: < TProgress > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<AsyncActionProgressHandler<TProgress>>(result__)
                }
            }
            pub fn set_completed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, AsyncActionWithProgressCompletedHandler<TProgress>>,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn completed(
                &self,
            ) -> ::windows::Result<AsyncActionWithProgressCompletedHandler<TProgress>> {
                let this = self;
                unsafe {
                    let mut result__ : < AsyncActionWithProgressCompletedHandler :: < TProgress > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<AsyncActionWithProgressCompletedHandler<TProgress>>(result__)
                }
            }
            pub fn get_results(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this)).ok() }
            }
            pub fn id(&self) -> ::windows::Result<u32> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u32>(result__)
                }
            }
            pub fn status(&self) -> ::windows::Result<AsyncStatus> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe {
                    let mut result__: <AsyncStatus as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<AsyncStatus>(result__)
                }
            }
            pub fn error_code(&self) -> ::windows::Result<::windows::ErrorCode> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::ErrorCode as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::ErrorCode>(result__)
                }
            }
            pub fn cancel(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this)).ok() }
            }
            pub fn close(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this)).ok() }
            }
            pub fn get(&self) -> ::windows::Result<()> {
                if self.status()? == ::windows::foundation::AsyncStatus::Started {
                    let (waiter, signaler) = ::windows::Waiter::new();
                    self.set_completed(
                        ::windows::foundation::AsyncActionWithProgressCompletedHandler::new(
                            move |_sender, _args| {
                                unsafe {
                                    signaler.signal();
                                }
                                Ok(())
                            },
                        ),
                    )?;
                }
                self.get_results()
            }
        }
        unsafe impl<TProgress: ::windows::RuntimeType + 'static> ::windows::Interface
            for IAsyncActionWithProgress<TProgress>
        {
            type Vtable = IAsyncActionWithProgress_abi<TProgress>;
            const IID: ::windows::Guid = ::windows::Guid::from_signature(
                <IAsyncActionWithProgress<TProgress> as ::windows::RuntimeType>::SIGNATURE,
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IAsyncActionWithProgress_abi<TProgress>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
            ::std::marker::PhantomData<TProgress>,
        )
        where
            TProgress: ::windows::RuntimeType + 'static;
        unsafe impl<TProgress: ::windows::RuntimeType + 'static> ::windows::RuntimeType
            for IAsyncActionWithProgress<TProgress>
        {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                let string = ::windows::ConstBuffer::new();
                let string = string.push_slice(b"pinterface(");
                let string = string.push_slice(b"{1f6db258-e803-48a1-9546-eb7353398884}");
                let string = string.push_slice(b";");
                let string = string.push_other(<TProgress as ::windows::RuntimeType>::SIGNATURE);
                string.push_slice(b")")
            };
        }
        impl<TProgress: ::windows::RuntimeType + 'static>
            ::std::convert::From<IAsyncActionWithProgress<TProgress>> for ::windows::Object
        {
            fn from(value: IAsyncActionWithProgress<TProgress>) -> Self {
                value.0
            }
        }
        impl<TProgress: ::windows::RuntimeType + 'static>
            ::std::convert::From<&IAsyncActionWithProgress<TProgress>> for ::windows::Object
        {
            fn from(value: &IAsyncActionWithProgress<TProgress>) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a, TProgress: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IAsyncActionWithProgress<TProgress>
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a, TProgress: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IAsyncActionWithProgress<TProgress>
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl<TProgress: ::windows::RuntimeType + 'static>
            ::std::convert::From<IAsyncActionWithProgress<TProgress>> for IAsyncInfo
        {
            fn from(value: IAsyncActionWithProgress<TProgress>) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl<TProgress: ::windows::RuntimeType + 'static>
            ::std::convert::From<&IAsyncActionWithProgress<TProgress>> for IAsyncInfo
        {
            fn from(value: &IAsyncActionWithProgress<TProgress>) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a, TProgress: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, IAsyncInfo>>
            for IAsyncActionWithProgress<TProgress>
        {
            fn into(self) -> ::windows::Param<'a, IAsyncInfo> {
                ::windows::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(self))
            }
        }
        impl<'a, TProgress: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, IAsyncInfo>>
            for &'a IAsyncActionWithProgress<TProgress>
        {
            fn into(self) -> ::windows::Param<'a, IAsyncInfo> {
                ::windows::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::future::Future
            for IAsyncActionWithProgress<TProgress>
        {
            type Output = ::windows::Result<()>;
            fn poll(
                self: ::std::pin::Pin<&mut Self>,
                context: &mut ::std::task::Context,
            ) -> ::std::task::Poll<Self::Output> {
                if self.status()? == ::windows::foundation::AsyncStatus::Started {
                    let waker = context.waker().clone();
                    let _ = self.set_completed(
                        ::windows::foundation::AsyncActionWithProgressCompletedHandler::new(
                            move |_sender, _args| {
                                waker.wake_by_ref();
                                Ok(())
                            },
                        ),
                    );
                    ::std::task::Poll::Pending
                } else {
                    ::std::task::Poll::Ready(self.get_results())
                }
            }
        }
        #[repr(transparent)]
        pub struct AsyncActionProgressHandler<TProgress>(
            ::windows::IUnknown,
            ::std::marker::PhantomData<TProgress>,
        )
        where
            TProgress: ::windows::RuntimeType + 'static;
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::clone::Clone
            for AsyncActionProgressHandler<TProgress>
        {
            fn clone(&self) -> Self {
                Self(self.0.clone(), ::std::marker::PhantomData::<TProgress>)
            }
        }
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq
            for AsyncActionProgressHandler<TProgress>
        {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::cmp::Eq
            for AsyncActionProgressHandler<TProgress>
        {
        }
        impl<TProgress: ::windows::RuntimeType + 'static> ::std::fmt::Debug
            for AsyncActionProgressHandler<TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        unsafe impl<TProgress: ::windows::RuntimeType + 'static> ::windows::Interface
            for AsyncActionProgressHandler<TProgress>
        {
            type Vtable = AsyncActionProgressHandler_abi<TProgress>;
            const IID: ::windows::Guid = ::windows::Guid::from_signature(
                <AsyncActionProgressHandler<TProgress> as ::windows::RuntimeType>::SIGNATURE,
            );
        }
        unsafe impl<TProgress: ::windows::RuntimeType + 'static> ::windows::RuntimeType
            for AsyncActionProgressHandler<TProgress>
        {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                let string = ::windows::ConstBuffer::new();
                let string = string.push_slice(b"pinterface(");
                let string = string.push_slice(b"{6d844858-0cff-4590-ae89-95a5a5c8b4b8}");
                let string = string.push_slice(b";");
                let string = string.push_other(<TProgress as ::windows::RuntimeType>::SIGNATURE);
                string.push_slice(b")")
            };
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct AsyncActionProgressHandler_abi<TProgress>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                async_info: ::windows::RawPtr,
                progress_info: <TProgress as ::windows::Abi>::Abi,
            ) -> ::windows::ErrorCode,
            ::std::marker::PhantomData<TProgress>,
        )
        where
            TProgress: ::windows::RuntimeType + 'static;
        impl<TProgress: ::windows::RuntimeType + 'static> AsyncActionProgressHandler<TProgress> {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IAsyncActionWithProgress<TProgress>>>,
                T1__: ::std::convert::Into<::windows::Param<'a, TProgress>>,
            >(
                &self,
                async_info: T0__,
                progress_info: T1__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).3)(
                        ::windows::Abi::abi(this),
                        async_info.into().abi(),
                        progress_info.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                        &::std::option::Option<IAsyncActionWithProgress<TProgress>>,
                        &<TProgress as ::windows::RuntimeType>::DefaultType,
                    ) -> ::windows::Result<()>
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = AsyncActionProgressHandler_box::<TProgress, F> {
                    vtable: &AsyncActionProgressHandler_box::<TProgress, F>::VTABLE,
                    count: ::windows::RefCount::new(),
                    invoke,
                };
                unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
            }
        }
        #[repr(C)]
        struct AsyncActionProgressHandler_box<
            TProgress,
            F: FnMut(
                    &::std::option::Option<IAsyncActionWithProgress<TProgress>>,
                    &<TProgress as ::windows::RuntimeType>::DefaultType,
                ) -> ::windows::Result<()>
                + 'static,
        >
        where
            TProgress: ::windows::RuntimeType + 'static,
        {
            vtable: *const AsyncActionProgressHandler_abi<TProgress>,
            invoke: F,
            count: ::windows::RefCount,
        }
        #[allow(non_snake_case)]
        impl<
                TProgress: ::windows::RuntimeType + 'static,
                F: FnMut(
                        &::std::option::Option<IAsyncActionWithProgress<TProgress>>,
                        &<TProgress as ::windows::RuntimeType>::DefaultType,
                    ) -> ::windows::Result<()>
                    + 'static,
            > AsyncActionProgressHandler_box<TProgress, F>
        {
            const VTABLE: AsyncActionProgressHandler_abi<TProgress> =
                AsyncActionProgressHandler_abi::<TProgress>(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                    ::std::marker::PhantomData::<TProgress>,
                );
            unsafe extern "system" fn QueryInterface(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                *interface = if iid
                    == &<AsyncActionProgressHandler<TProgress> as ::windows::Interface>::IID
                    || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                    || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    ::std::ptr::null_mut()
                };
                if (*interface).is_null() {
                    ::windows::ErrorCode::E_NOINTERFACE
                } else {
                    (*this).count.add_ref();
                    ::windows::ErrorCode::S_OK
                }
            }
            unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: ::windows::RawPtr,
                async_info: ::windows::RawPtr,
                progress_info: <TProgress as ::windows::Abi>::Abi,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                ( ( * this ) . invoke ) ( & * ( & async_info as * const < IAsyncActionWithProgress :: < TProgress > as :: windows :: Abi > :: Abi as * const < IAsyncActionWithProgress :: < TProgress > as :: windows :: RuntimeType > :: DefaultType ) , & * ( & progress_info as * const < TProgress as :: windows :: Abi > :: Abi as * const < TProgress as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
            }
        }
        #[repr(transparent)]
        pub struct IAsyncOperation<TResult>(::windows::Object, ::std::marker::PhantomData<TResult>)
        where
            TResult: ::windows::RuntimeType + 'static;
        impl<TResult: ::windows::RuntimeType + 'static> ::std::clone::Clone for IAsyncOperation<TResult> {
            fn clone(&self) -> Self {
                Self(self.0.clone(), ::std::marker::PhantomData::<TResult>)
            }
        }
        impl<TResult: ::windows::RuntimeType + 'static> ::std::fmt::Debug for IAsyncOperation<TResult> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl<TResult: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq for IAsyncOperation<TResult> {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl<TResult: ::windows::RuntimeType + 'static> ::std::cmp::Eq for IAsyncOperation<TResult> {}
        impl<TResult: ::windows::RuntimeType + 'static> IAsyncOperation<TResult> {
            pub fn id(&self) -> ::windows::Result<u32> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u32>(result__)
                }
            }
            pub fn status(&self) -> ::windows::Result<AsyncStatus> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe {
                    let mut result__: <AsyncStatus as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<AsyncStatus>(result__)
                }
            }
            pub fn error_code(&self) -> ::windows::Result<::windows::ErrorCode> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::ErrorCode as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::ErrorCode>(result__)
                }
            }
            pub fn cancel(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this)).ok() }
            }
            pub fn close(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this)).ok() }
            }
            pub fn set_completed<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, AsyncOperationCompletedHandler<TResult>>>,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn completed(&self) -> ::windows::Result<AsyncOperationCompletedHandler<TResult>> {
                let this = self;
                unsafe {
                    let mut result__ : < AsyncOperationCompletedHandler :: < TResult > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<AsyncOperationCompletedHandler<TResult>>(result__)
                }
            }
            pub fn get_results(&self) -> ::windows::Result<TResult> {
                let this = self;
                unsafe {
                    let mut result__: <TResult as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<TResult>(result__)
                }
            }
            pub fn get(&self) -> ::windows::Result<TResult> {
                if self.status()? == ::windows::foundation::AsyncStatus::Started {
                    let (waiter, signaler) = ::windows::Waiter::new();
                    self.set_completed(
                        ::windows::foundation::AsyncOperationCompletedHandler::new(
                            move |_sender, _args| {
                                unsafe {
                                    signaler.signal();
                                }
                                Ok(())
                            },
                        ),
                    )?;
                }
                self.get_results()
            }
        }
        unsafe impl<TResult: ::windows::RuntimeType + 'static> ::windows::Interface
            for IAsyncOperation<TResult>
        {
            type Vtable = IAsyncOperation_abi<TResult>;
            const IID: ::windows::Guid = ::windows::Guid::from_signature(
                <IAsyncOperation<TResult> as ::windows::RuntimeType>::SIGNATURE,
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IAsyncOperation_abi<TResult>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut <TResult as ::windows::Abi>::Abi,
            ) -> ::windows::ErrorCode,
            ::std::marker::PhantomData<TResult>,
        )
        where
            TResult: ::windows::RuntimeType + 'static;
        unsafe impl<TResult: ::windows::RuntimeType + 'static> ::windows::RuntimeType
            for IAsyncOperation<TResult>
        {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                let string = ::windows::ConstBuffer::new();
                let string = string.push_slice(b"pinterface(");
                let string = string.push_slice(b"{9fc2b0bb-e446-44e2-aa61-9cab8f636af2}");
                let string = string.push_slice(b";");
                let string = string.push_other(<TResult as ::windows::RuntimeType>::SIGNATURE);
                string.push_slice(b")")
            };
        }
        impl<TResult: ::windows::RuntimeType + 'static>
            ::std::convert::From<IAsyncOperation<TResult>> for ::windows::Object
        {
            fn from(value: IAsyncOperation<TResult>) -> Self {
                value.0
            }
        }
        impl<TResult: ::windows::RuntimeType + 'static>
            ::std::convert::From<&IAsyncOperation<TResult>> for ::windows::Object
        {
            fn from(value: &IAsyncOperation<TResult>) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a, TResult: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IAsyncOperation<TResult>
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a, TResult: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IAsyncOperation<TResult>
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl<TResult: ::windows::RuntimeType + 'static>
            ::std::convert::From<IAsyncOperation<TResult>> for IAsyncInfo
        {
            fn from(value: IAsyncOperation<TResult>) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl<TResult: ::windows::RuntimeType + 'static>
            ::std::convert::From<&IAsyncOperation<TResult>> for IAsyncInfo
        {
            fn from(value: &IAsyncOperation<TResult>) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a, TResult: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, IAsyncInfo>> for IAsyncOperation<TResult>
        {
            fn into(self) -> ::windows::Param<'a, IAsyncInfo> {
                ::windows::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(self))
            }
        }
        impl<'a, TResult: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, IAsyncInfo>>
            for &'a IAsyncOperation<TResult>
        {
            fn into(self) -> ::windows::Param<'a, IAsyncInfo> {
                ::windows::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl<TResult: ::windows::RuntimeType + 'static> ::std::future::Future for IAsyncOperation<TResult> {
            type Output = ::windows::Result<TResult>;
            fn poll(
                self: ::std::pin::Pin<&mut Self>,
                context: &mut ::std::task::Context,
            ) -> ::std::task::Poll<Self::Output> {
                if self.status()? == ::windows::foundation::AsyncStatus::Started {
                    let waker = context.waker().clone();
                    let _ = self.set_completed(
                        ::windows::foundation::AsyncOperationCompletedHandler::new(
                            move |_sender, _args| {
                                waker.wake_by_ref();
                                Ok(())
                            },
                        ),
                    );
                    ::std::task::Poll::Pending
                } else {
                    ::std::task::Poll::Ready(self.get_results())
                }
            }
        }
        #[repr(transparent)]
        pub struct AsyncOperationCompletedHandler<TResult>(
            ::windows::IUnknown,
            ::std::marker::PhantomData<TResult>,
        )
        where
            TResult: ::windows::RuntimeType + 'static;
        impl<TResult: ::windows::RuntimeType + 'static> ::std::clone::Clone
            for AsyncOperationCompletedHandler<TResult>
        {
            fn clone(&self) -> Self {
                Self(self.0.clone(), ::std::marker::PhantomData::<TResult>)
            }
        }
        impl<TResult: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq
            for AsyncOperationCompletedHandler<TResult>
        {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl<TResult: ::windows::RuntimeType + 'static> ::std::cmp::Eq
            for AsyncOperationCompletedHandler<TResult>
        {
        }
        impl<TResult: ::windows::RuntimeType + 'static> ::std::fmt::Debug
            for AsyncOperationCompletedHandler<TResult>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        unsafe impl<TResult: ::windows::RuntimeType + 'static> ::windows::Interface
            for AsyncOperationCompletedHandler<TResult>
        {
            type Vtable = AsyncOperationCompletedHandler_abi<TResult>;
            const IID: ::windows::Guid = ::windows::Guid::from_signature(
                <AsyncOperationCompletedHandler<TResult> as ::windows::RuntimeType>::SIGNATURE,
            );
        }
        unsafe impl<TResult: ::windows::RuntimeType + 'static> ::windows::RuntimeType
            for AsyncOperationCompletedHandler<TResult>
        {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                let string = ::windows::ConstBuffer::new();
                let string = string.push_slice(b"pinterface(");
                let string = string.push_slice(b"{fcdcf02c-e5d8-4478-915a-4d90b74b83a5}");
                let string = string.push_slice(b";");
                let string = string.push_other(<TResult as ::windows::RuntimeType>::SIGNATURE);
                string.push_slice(b")")
            };
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct AsyncOperationCompletedHandler_abi<TResult>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                async_info: ::windows::RawPtr,
                async_status: AsyncStatus,
            ) -> ::windows::ErrorCode,
            ::std::marker::PhantomData<TResult>,
        )
        where
            TResult: ::windows::RuntimeType + 'static;
        impl<TResult: ::windows::RuntimeType + 'static> AsyncOperationCompletedHandler<TResult> {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IAsyncOperation<TResult>>>,
            >(
                &self,
                async_info: T0__,
                async_status: AsyncStatus,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).3)(
                        ::windows::Abi::abi(this),
                        async_info.into().abi(),
                        async_status,
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                        &::std::option::Option<IAsyncOperation<TResult>>,
                        AsyncStatus,
                    ) -> ::windows::Result<()>
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = AsyncOperationCompletedHandler_box::<TResult, F> {
                    vtable: &AsyncOperationCompletedHandler_box::<TResult, F>::VTABLE,
                    count: ::windows::RefCount::new(),
                    invoke,
                };
                unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
            }
        }
        #[repr(C)]
        struct AsyncOperationCompletedHandler_box<
            TResult,
            F: FnMut(
                    &::std::option::Option<IAsyncOperation<TResult>>,
                    AsyncStatus,
                ) -> ::windows::Result<()>
                + 'static,
        >
        where
            TResult: ::windows::RuntimeType + 'static,
        {
            vtable: *const AsyncOperationCompletedHandler_abi<TResult>,
            invoke: F,
            count: ::windows::RefCount,
        }
        #[allow(non_snake_case)]
        impl<
                TResult: ::windows::RuntimeType + 'static,
                F: FnMut(
                        &::std::option::Option<IAsyncOperation<TResult>>,
                        AsyncStatus,
                    ) -> ::windows::Result<()>
                    + 'static,
            > AsyncOperationCompletedHandler_box<TResult, F>
        {
            const VTABLE: AsyncOperationCompletedHandler_abi<TResult> =
                AsyncOperationCompletedHandler_abi::<TResult>(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                    ::std::marker::PhantomData::<TResult>,
                );
            unsafe extern "system" fn QueryInterface(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                *interface = if iid
                    == &<AsyncOperationCompletedHandler<TResult> as ::windows::Interface>::IID
                    || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                    || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    ::std::ptr::null_mut()
                };
                if (*interface).is_null() {
                    ::windows::ErrorCode::E_NOINTERFACE
                } else {
                    (*this).count.add_ref();
                    ::windows::ErrorCode::S_OK
                }
            }
            unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: ::windows::RawPtr,
                async_info: ::windows::RawPtr,
                async_status: AsyncStatus,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                ( ( * this ) . invoke ) ( & * ( & async_info as * const < IAsyncOperation :: < TResult > as :: windows :: Abi > :: Abi as * const < IAsyncOperation :: < TResult > as :: windows :: RuntimeType > :: DefaultType ) , async_status , ) . into ( )
            }
        }
        #[repr(transparent)]
        pub struct AsyncOperationWithProgressCompletedHandler<TResult, TProgress>(
            ::windows::IUnknown,
            ::std::marker::PhantomData<TResult>,
            ::std::marker::PhantomData<TProgress>,
        )
        where
            TResult: ::windows::RuntimeType + 'static,
            TProgress: ::windows::RuntimeType + 'static;
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::clone::Clone
            for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            fn clone(&self) -> Self {
                Self(
                    self.0.clone(),
                    ::std::marker::PhantomData::<TResult>,
                    ::std::marker::PhantomData::<TProgress>,
                )
            }
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::cmp::PartialEq
            for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::cmp::Eq for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::fmt::Debug for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        unsafe impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::windows::Interface
            for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            type Vtable = AsyncOperationWithProgressCompletedHandler_abi<TResult, TProgress>;
            const IID : :: windows :: Guid = :: windows :: Guid :: from_signature ( < AsyncOperationWithProgressCompletedHandler :: < TResult , TProgress > as :: windows :: RuntimeType > :: SIGNATURE ) ;
        }
        unsafe impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::windows::RuntimeType
            for AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                let string = ::windows::ConstBuffer::new();
                let string = string.push_slice(b"pinterface(");
                let string = string.push_slice(b"{e85df41d-6aa7-46e3-a8e2-f009d840c627}");
                let string = string.push_slice(b";");
                let string = string.push_other(<TResult as ::windows::RuntimeType>::SIGNATURE);
                let string = string.push_slice(b";");
                let string = string.push_other(<TProgress as ::windows::RuntimeType>::SIGNATURE);
                string.push_slice(b")")
            };
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct AsyncOperationWithProgressCompletedHandler_abi<TResult, TProgress>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                async_info: ::windows::RawPtr,
                async_status: AsyncStatus,
            ) -> ::windows::ErrorCode,
            ::std::marker::PhantomData<TResult>,
            ::std::marker::PhantomData<TProgress>,
        )
        where
            TResult: ::windows::RuntimeType + 'static,
            TProgress: ::windows::RuntimeType + 'static;
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > AsyncOperationWithProgressCompletedHandler<TResult, TProgress>
        {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, IAsyncOperationWithProgress<TResult, TProgress>>,
                >,
            >(
                &self,
                async_info: T0__,
                async_status: AsyncStatus,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).3)(
                        ::windows::Abi::abi(this),
                        async_info.into().abi(),
                        async_status,
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                        &::std::option::Option<IAsyncOperationWithProgress<TResult, TProgress>>,
                        AsyncStatus,
                    ) -> ::windows::Result<()>
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com =
                    AsyncOperationWithProgressCompletedHandler_box::<TResult, TProgress, F> {
                        vtable: &AsyncOperationWithProgressCompletedHandler_box::<
                            TResult,
                            TProgress,
                            F,
                        >::VTABLE,
                        count: ::windows::RefCount::new(),
                        invoke,
                    };
                unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
            }
        }
        #[repr(C)]
        struct AsyncOperationWithProgressCompletedHandler_box<
            TResult,
            TProgress,
            F: FnMut(
                    &::std::option::Option<IAsyncOperationWithProgress<TResult, TProgress>>,
                    AsyncStatus,
                ) -> ::windows::Result<()>
                + 'static,
        >
        where
            TResult: ::windows::RuntimeType + 'static,
            TProgress: ::windows::RuntimeType + 'static,
        {
            vtable: *const AsyncOperationWithProgressCompletedHandler_abi<TResult, TProgress>,
            invoke: F,
            count: ::windows::RefCount,
        }
        #[allow(non_snake_case)]
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
                F: FnMut(
                        &::std::option::Option<IAsyncOperationWithProgress<TResult, TProgress>>,
                        AsyncStatus,
                    ) -> ::windows::Result<()>
                    + 'static,
            > AsyncOperationWithProgressCompletedHandler_box<TResult, TProgress, F>
        {
            const VTABLE: AsyncOperationWithProgressCompletedHandler_abi<TResult, TProgress> =
                AsyncOperationWithProgressCompletedHandler_abi::<TResult, TProgress>(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                    ::std::marker::PhantomData::<TResult>,
                    ::std::marker::PhantomData::<TProgress>,
                );
            unsafe extern "system" fn QueryInterface(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                *interface = if iid == &<AsyncOperationWithProgressCompletedHandler<
                    TResult,
                    TProgress,
                > as ::windows::Interface>::IID
                    || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                    || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    ::std::ptr::null_mut()
                };
                if (*interface).is_null() {
                    ::windows::ErrorCode::E_NOINTERFACE
                } else {
                    (*this).count.add_ref();
                    ::windows::ErrorCode::S_OK
                }
            }
            unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: ::windows::RawPtr,
                async_info: ::windows::RawPtr,
                async_status: AsyncStatus,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                ( ( * this ) . invoke ) ( & * ( & async_info as * const < IAsyncOperationWithProgress :: < TResult , TProgress > as :: windows :: Abi > :: Abi as * const < IAsyncOperationWithProgress :: < TResult , TProgress > as :: windows :: RuntimeType > :: DefaultType ) , async_status , ) . into ( )
            }
        }
        #[repr(transparent)]
        pub struct IAsyncOperationWithProgress<TResult, TProgress>(
            ::windows::Object,
            ::std::marker::PhantomData<TResult>,
            ::std::marker::PhantomData<TProgress>,
        )
        where
            TResult: ::windows::RuntimeType + 'static,
            TProgress: ::windows::RuntimeType + 'static;
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::clone::Clone for IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn clone(&self) -> Self {
                Self(
                    self.0.clone(),
                    ::std::marker::PhantomData::<TResult>,
                    ::std::marker::PhantomData::<TProgress>,
                )
            }
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::fmt::Debug for IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::cmp::PartialEq for IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::cmp::Eq for IAsyncOperationWithProgress<TResult, TProgress>
        {
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > IAsyncOperationWithProgress<TResult, TProgress>
        {
            pub fn id(&self) -> ::windows::Result<u32> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u32>(result__)
                }
            }
            pub fn status(&self) -> ::windows::Result<AsyncStatus> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe {
                    let mut result__: <AsyncStatus as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<AsyncStatus>(result__)
                }
            }
            pub fn error_code(&self) -> ::windows::Result<::windows::ErrorCode> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::ErrorCode as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::ErrorCode>(result__)
                }
            }
            pub fn cancel(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this)).ok() }
            }
            pub fn close(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IAsyncInfo>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this)).ok() }
            }
            pub fn set_progress<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, AsyncOperationProgressHandler<TResult, TProgress>>,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn progress(
                &self,
            ) -> ::windows::Result<AsyncOperationProgressHandler<TResult, TProgress>> {
                let this = self;
                unsafe {
                    let mut result__ : < AsyncOperationProgressHandler :: < TResult , TProgress > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<AsyncOperationProgressHandler<TResult, TProgress>>(result__)
                }
            }
            pub fn set_completed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        AsyncOperationWithProgressCompletedHandler<TResult, TProgress>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn completed(
                &self,
            ) -> ::windows::Result<AsyncOperationWithProgressCompletedHandler<TResult, TProgress>>
            {
                let this = self;
                unsafe {
                    let mut result__: <AsyncOperationWithProgressCompletedHandler<
                        TResult,
                        TProgress,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<AsyncOperationWithProgressCompletedHandler<TResult, TProgress>>(
                            result__,
                        )
                }
            }
            pub fn get_results(&self) -> ::windows::Result<TResult> {
                let this = self;
                unsafe {
                    let mut result__: <TResult as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<TResult>(result__)
                }
            }
            pub fn get(&self) -> ::windows::Result<TResult> {
                if self.status()? == ::windows::foundation::AsyncStatus::Started {
                    let (waiter, signaler) = ::windows::Waiter::new();
                    self.set_completed(
                        ::windows::foundation::AsyncOperationWithProgressCompletedHandler::new(
                            move |_sender, _args| {
                                unsafe {
                                    signaler.signal();
                                }
                                Ok(())
                            },
                        ),
                    )?;
                }
                self.get_results()
            }
        }
        unsafe impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::windows::Interface for IAsyncOperationWithProgress<TResult, TProgress>
        {
            type Vtable = IAsyncOperationWithProgress_abi<TResult, TProgress>;
            const IID : :: windows :: Guid = :: windows :: Guid :: from_signature ( < IAsyncOperationWithProgress :: < TResult , TProgress > as :: windows :: RuntimeType > :: SIGNATURE ) ;
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IAsyncOperationWithProgress_abi<TResult, TProgress>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut <TResult as ::windows::Abi>::Abi,
            ) -> ::windows::ErrorCode,
            ::std::marker::PhantomData<TResult>,
            ::std::marker::PhantomData<TProgress>,
        )
        where
            TResult: ::windows::RuntimeType + 'static,
            TProgress: ::windows::RuntimeType + 'static;
        unsafe impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::windows::RuntimeType for IAsyncOperationWithProgress<TResult, TProgress>
        {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                let string = ::windows::ConstBuffer::new();
                let string = string.push_slice(b"pinterface(");
                let string = string.push_slice(b"{b5d036d7-e297-498f-ba60-0289e76e23dd}");
                let string = string.push_slice(b";");
                let string = string.push_other(<TResult as ::windows::RuntimeType>::SIGNATURE);
                let string = string.push_slice(b";");
                let string = string.push_other(<TProgress as ::windows::RuntimeType>::SIGNATURE);
                string.push_slice(b")")
            };
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::convert::From<IAsyncOperationWithProgress<TResult, TProgress>>
            for ::windows::Object
        {
            fn from(value: IAsyncOperationWithProgress<TResult, TProgress>) -> Self {
                value.0
            }
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::convert::From<&IAsyncOperationWithProgress<TResult, TProgress>>
            for ::windows::Object
        {
            fn from(value: &IAsyncOperationWithProgress<TResult, TProgress>) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<
                'a,
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<
                'a,
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::convert::From<IAsyncOperationWithProgress<TResult, TProgress>> for IAsyncInfo
        {
            fn from(value: IAsyncOperationWithProgress<TResult, TProgress>) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::convert::From<&IAsyncOperationWithProgress<TResult, TProgress>>
            for IAsyncInfo
        {
            fn from(value: &IAsyncOperationWithProgress<TResult, TProgress>) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<
                'a,
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::convert::Into<::windows::Param<'a, IAsyncInfo>>
            for IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn into(self) -> ::windows::Param<'a, IAsyncInfo> {
                ::windows::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(self))
            }
        }
        impl<
                'a,
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::convert::Into<::windows::Param<'a, IAsyncInfo>>
            for &'a IAsyncOperationWithProgress<TResult, TProgress>
        {
            fn into(self) -> ::windows::Param<'a, IAsyncInfo> {
                ::windows::Param::Owned(::std::convert::Into::<IAsyncInfo>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::future::Future for IAsyncOperationWithProgress<TResult, TProgress>
        {
            type Output = ::windows::Result<TResult>;
            fn poll(
                self: ::std::pin::Pin<&mut Self>,
                context: &mut ::std::task::Context,
            ) -> ::std::task::Poll<Self::Output> {
                if self.status()? == ::windows::foundation::AsyncStatus::Started {
                    let waker = context.waker().clone();
                    let _ = self.set_completed(
                        ::windows::foundation::AsyncOperationWithProgressCompletedHandler::new(
                            move |_sender, _args| {
                                waker.wake_by_ref();
                                Ok(())
                            },
                        ),
                    );
                    ::std::task::Poll::Pending
                } else {
                    ::std::task::Poll::Ready(self.get_results())
                }
            }
        }
        #[repr(transparent)]
        pub struct AsyncOperationProgressHandler<TResult, TProgress>(
            ::windows::IUnknown,
            ::std::marker::PhantomData<TResult>,
            ::std::marker::PhantomData<TProgress>,
        )
        where
            TResult: ::windows::RuntimeType + 'static,
            TProgress: ::windows::RuntimeType + 'static;
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::clone::Clone for AsyncOperationProgressHandler<TResult, TProgress>
        {
            fn clone(&self) -> Self {
                Self(
                    self.0.clone(),
                    ::std::marker::PhantomData::<TResult>,
                    ::std::marker::PhantomData::<TProgress>,
                )
            }
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::cmp::PartialEq for AsyncOperationProgressHandler<TResult, TProgress>
        {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::cmp::Eq for AsyncOperationProgressHandler<TResult, TProgress>
        {
        }
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::std::fmt::Debug for AsyncOperationProgressHandler<TResult, TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        unsafe impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::windows::Interface for AsyncOperationProgressHandler<TResult, TProgress>
        {
            type Vtable = AsyncOperationProgressHandler_abi<TResult, TProgress>;
            const IID : :: windows :: Guid = :: windows :: Guid :: from_signature ( < AsyncOperationProgressHandler :: < TResult , TProgress > as :: windows :: RuntimeType > :: SIGNATURE ) ;
        }
        unsafe impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > ::windows::RuntimeType for AsyncOperationProgressHandler<TResult, TProgress>
        {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                let string = ::windows::ConstBuffer::new();
                let string = string.push_slice(b"pinterface(");
                let string = string.push_slice(b"{55690902-0aab-421a-8778-f8ce5026d758}");
                let string = string.push_slice(b";");
                let string = string.push_other(<TResult as ::windows::RuntimeType>::SIGNATURE);
                let string = string.push_slice(b";");
                let string = string.push_other(<TProgress as ::windows::RuntimeType>::SIGNATURE);
                string.push_slice(b")")
            };
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct AsyncOperationProgressHandler_abi<TResult, TProgress>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                async_info: ::windows::RawPtr,
                progress_info: <TProgress as ::windows::Abi>::Abi,
            ) -> ::windows::ErrorCode,
            ::std::marker::PhantomData<TResult>,
            ::std::marker::PhantomData<TProgress>,
        )
        where
            TResult: ::windows::RuntimeType + 'static,
            TProgress: ::windows::RuntimeType + 'static;
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
            > AsyncOperationProgressHandler<TResult, TProgress>
        {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, IAsyncOperationWithProgress<TResult, TProgress>>,
                >,
                T1__: ::std::convert::Into<::windows::Param<'a, TProgress>>,
            >(
                &self,
                async_info: T0__,
                progress_info: T1__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).3)(
                        ::windows::Abi::abi(this),
                        async_info.into().abi(),
                        progress_info.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                        &::std::option::Option<IAsyncOperationWithProgress<TResult, TProgress>>,
                        &<TProgress as ::windows::RuntimeType>::DefaultType,
                    ) -> ::windows::Result<()>
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = AsyncOperationProgressHandler_box::<TResult, TProgress, F> {
                    vtable: &AsyncOperationProgressHandler_box::<TResult, TProgress, F>::VTABLE,
                    count: ::windows::RefCount::new(),
                    invoke,
                };
                unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
            }
        }
        #[repr(C)]
        struct AsyncOperationProgressHandler_box<
            TResult,
            TProgress,
            F: FnMut(
                    &::std::option::Option<IAsyncOperationWithProgress<TResult, TProgress>>,
                    &<TProgress as ::windows::RuntimeType>::DefaultType,
                ) -> ::windows::Result<()>
                + 'static,
        >
        where
            TResult: ::windows::RuntimeType + 'static,
            TProgress: ::windows::RuntimeType + 'static,
        {
            vtable: *const AsyncOperationProgressHandler_abi<TResult, TProgress>,
            invoke: F,
            count: ::windows::RefCount,
        }
        #[allow(non_snake_case)]
        impl<
                TResult: ::windows::RuntimeType + 'static,
                TProgress: ::windows::RuntimeType + 'static,
                F: FnMut(
                        &::std::option::Option<IAsyncOperationWithProgress<TResult, TProgress>>,
                        &<TProgress as ::windows::RuntimeType>::DefaultType,
                    ) -> ::windows::Result<()>
                    + 'static,
            > AsyncOperationProgressHandler_box<TResult, TProgress, F>
        {
            const VTABLE: AsyncOperationProgressHandler_abi<TResult, TProgress> =
                AsyncOperationProgressHandler_abi::<TResult, TProgress>(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                    ::std::marker::PhantomData::<TResult>,
                    ::std::marker::PhantomData::<TProgress>,
                );
            unsafe extern "system" fn QueryInterface(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                * interface = if iid == & < AsyncOperationProgressHandler :: < TResult , TProgress > as :: windows :: Interface > :: IID || iid == & < :: windows :: IUnknown as :: windows :: Interface > :: IID || iid == & < :: windows :: IAgileObject as :: windows :: Interface > :: IID { & mut ( * this ) . vtable as * mut _ as _ } else { :: std :: ptr :: null_mut ( ) } ;
                if (*interface).is_null() {
                    ::windows::ErrorCode::E_NOINTERFACE
                } else {
                    (*this).count.add_ref();
                    ::windows::ErrorCode::S_OK
                }
            }
            unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: ::windows::RawPtr,
                async_info: ::windows::RawPtr,
                progress_info: <TProgress as ::windows::Abi>::Abi,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                ( ( * this ) . invoke ) ( & * ( & async_info as * const < IAsyncOperationWithProgress :: < TResult , TProgress > as :: windows :: Abi > :: Abi as * const < IAsyncOperationWithProgress :: < TResult , TProgress > as :: windows :: RuntimeType > :: DefaultType ) , & * ( & progress_info as * const < TProgress as :: windows :: Abi > :: Abi as * const < TProgress as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
            }
        }
        #[repr(C)]
        #[allow(non_snake_case)]
        pub struct DateTime {
            pub universal_time: i64,
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct DateTime_abi(i64);
        unsafe impl ::windows::Abi for DateTime {
            type Abi = DateTime_abi;
        }
        impl ::std::default::Default for DateTime {
            fn default() -> Self {
                Self { universal_time: 0 }
            }
        }
        impl ::std::fmt::Debug for DateTime {
            fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                fmt.debug_struct("DateTime")
                    .field("universal_time", &format_args!("{:?}", self.universal_time))
                    .finish()
            }
        }
        impl ::std::clone::Clone for DateTime {
            fn clone(&self) -> Self {
                Self {
                    universal_time: self.universal_time,
                }
            }
        }
        impl ::std::cmp::PartialEq for DateTime {
            fn eq(&self, other: &Self) -> bool {
                self.universal_time == other.universal_time
            }
        }
        impl ::std::cmp::Eq for DateTime {}
        unsafe impl ::windows::RuntimeType for DateTime {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"struct(Windows.Foundation.DateTime;i8)");
        }
        #[repr(transparent)]
        pub struct IClosable(::windows::Object);
        impl ::std::clone::Clone for IClosable {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IClosable {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IClosable {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IClosable {}
        impl IClosable {
            pub fn close(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
        }
        unsafe impl ::windows::Interface for IClosable {
            type Vtable = IClosable_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                819308585,
                32676,
                16422,
                [131, 187, 215, 91, 174, 78, 169, 158],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IClosable_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IClosable {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{30d5a829-7fa4-4026-83bb-d75bae4ea99e}") };
        }
        impl ::std::convert::From<IClosable> for ::windows::Object {
            fn from(value: IClosable) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IClosable> for ::windows::Object {
            fn from(value: &IClosable) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IClosable {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IClosable {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IDeferral(::windows::Object);
        impl ::std::clone::Clone for IDeferral {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IDeferral {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IDeferral {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IDeferral {}
        impl IDeferral {
            pub fn close(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IClosable>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
            pub fn complete(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
        }
        unsafe impl ::windows::Interface for IDeferral {
            type Vtable = IDeferral_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                3592853298,
                15231,
                18087,
                [180, 11, 79, 220, 162, 162, 198, 147],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IDeferral_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IDeferral {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{d6269732-3b7f-46a7-b40b-4fdca2a2c693}") };
        }
        impl ::std::convert::From<IDeferral> for ::windows::Object {
            fn from(value: IDeferral) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IDeferral> for ::windows::Object {
            fn from(value: &IDeferral) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IDeferral {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IDeferral {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IDeferral> for IClosable {
            fn from(value: IDeferral) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IDeferral> for IClosable {
            fn from(value: &IDeferral) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IClosable>> for IDeferral {
            fn into(self) -> ::windows::Param<'a, IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<IClosable>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IClosable>> for &'a IDeferral {
            fn into(self) -> ::windows::Param<'a, IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<IClosable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct DeferralCompletedHandler(::windows::IUnknown);
        impl ::std::clone::Clone for DeferralCompletedHandler {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for DeferralCompletedHandler {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for DeferralCompletedHandler {}
        impl ::std::fmt::Debug for DeferralCompletedHandler {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        unsafe impl ::windows::Interface for DeferralCompletedHandler {
            type Vtable = DeferralCompletedHandler_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                3979518834,
                62408,
                20394,
                [156, 251, 71, 1, 72, 218, 56, 136],
            );
        }
        unsafe impl ::windows::RuntimeType for DeferralCompletedHandler {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                ::windows::ConstBuffer::from_slice(
                    b"delegate({ed32a372-f3c8-4faa-9cfb-470148da3888})",
                )
            };
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct DeferralCompletedHandler_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
        );
        impl DeferralCompletedHandler {
            pub fn invoke(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).3)(::windows::Abi::abi(this)).ok() }
            }
            pub fn new<F: FnMut() -> ::windows::Result<()> + 'static>(invoke: F) -> Self {
                let com = DeferralCompletedHandler_box::<F> {
                    vtable: &DeferralCompletedHandler_box::<F>::VTABLE,
                    count: ::windows::RefCount::new(),
                    invoke,
                };
                unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
            }
        }
        #[repr(C)]
        struct DeferralCompletedHandler_box<F: FnMut() -> ::windows::Result<()> + 'static> {
            vtable: *const DeferralCompletedHandler_abi,
            invoke: F,
            count: ::windows::RefCount,
        }
        #[allow(non_snake_case)]
        impl<F: FnMut() -> ::windows::Result<()> + 'static> DeferralCompletedHandler_box<F> {
            const VTABLE: DeferralCompletedHandler_abi = DeferralCompletedHandler_abi(
                Self::QueryInterface,
                Self::AddRef,
                Self::Release,
                Self::Invoke,
            );
            unsafe extern "system" fn QueryInterface(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                *interface = if iid == &<DeferralCompletedHandler as ::windows::Interface>::IID
                    || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                    || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    ::std::ptr::null_mut()
                };
                if (*interface).is_null() {
                    ::windows::ErrorCode::E_NOINTERFACE
                } else {
                    (*this).count.add_ref();
                    ::windows::ErrorCode::S_OK
                }
            }
            unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(this: ::windows::RawPtr) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                ((*this).invoke)().into()
            }
        }
        #[repr(transparent)]
        pub struct IDeferralFactory(::windows::Object);
        impl ::std::clone::Clone for IDeferralFactory {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IDeferralFactory {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IDeferralFactory {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IDeferralFactory {}
        impl IDeferralFactory {
            pub fn create<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, DeferralCompletedHandler>>,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<Deferral> {
                let this = self;
                unsafe {
                    let mut result__: <Deferral as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<Deferral>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IDeferralFactory {
            type Vtable = IDeferralFactory_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1705110725,
                16309,
                18482,
                [140, 169, 240, 97, 178, 129, 209, 58],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IDeferralFactory_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IDeferralFactory {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{65a1ecc5-3fb5-4832-8ca9-f061b281d13a}") };
        }
        impl ::std::convert::From<IDeferralFactory> for ::windows::Object {
            fn from(value: IDeferralFactory) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IDeferralFactory> for ::windows::Object {
            fn from(value: &IDeferralFactory) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IDeferralFactory {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IDeferralFactory {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct Deferral(::windows::Object);
        impl Deferral {
            pub fn close(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IClosable>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
            pub fn complete(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
            pub fn create<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, DeferralCompletedHandler>>,
            >(
                handler: T0__,
            ) -> ::windows::Result<Deferral> {
                Self::IDeferralFactory(|this| unsafe {
                    let mut result__: <Deferral as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<Deferral>(result__)
                })
            }
            #[allow(non_snake_case)]
            fn IDeferralFactory<R, F: FnOnce(&IDeferralFactory) -> ::windows::Result<R>>(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<Deferral, IDeferralFactory> =
                    ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::std::clone::Clone for Deferral {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for Deferral {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for Deferral {}
        impl ::std::fmt::Debug for Deferral {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for Deferral {
            const NAME: &'static str = "Windows.Foundation.Deferral";
        }
        unsafe impl ::windows::Interface for Deferral {
            type Vtable = IDeferral_abi;
            const IID: ::windows::Guid = <IDeferral as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for Deferral {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"rc(Windows.Foundation.Deferral;{d6269732-3b7f-46a7-b40b-4fdca2a2c693})",
            );
        }
        impl ::std::convert::From<Deferral> for ::windows::Object {
            fn from(value: Deferral) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&Deferral> for ::windows::Object {
            fn from(value: &Deferral) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for Deferral {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a Deferral {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<Deferral> for IClosable {
            fn from(value: Deferral) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&Deferral> for IClosable {
            fn from(value: &Deferral) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IClosable>> for Deferral {
            fn into(self) -> ::windows::Param<'a, IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<IClosable>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IClosable>> for &'a Deferral {
            fn into(self) -> ::windows::Param<'a, IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<IClosable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<Deferral> for IDeferral {
            fn from(value: Deferral) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&Deferral> for IDeferral {
            fn from(value: &Deferral) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IDeferral>> for Deferral {
            fn into(self) -> ::windows::Param<'a, IDeferral> {
                ::windows::Param::Owned(::std::convert::Into::<IDeferral>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IDeferral>> for &'a Deferral {
            fn into(self) -> ::windows::Param<'a, IDeferral> {
                ::windows::Param::Owned(::std::convert::Into::<IDeferral>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        unsafe impl ::std::marker::Send for Deferral {}
        unsafe impl ::std::marker::Sync for Deferral {}
        #[repr(transparent)]
        pub struct EventHandler<T>(::windows::IUnknown, ::std::marker::PhantomData<T>)
        where
            T: ::windows::RuntimeType + 'static;
        impl<T: ::windows::RuntimeType + 'static> ::std::clone::Clone for EventHandler<T> {
            fn clone(&self) -> Self {
                Self(self.0.clone(), ::std::marker::PhantomData::<T>)
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq for EventHandler<T> {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::cmp::Eq for EventHandler<T> {}
        impl<T: ::windows::RuntimeType + 'static> ::std::fmt::Debug for EventHandler<T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for EventHandler<T> {
            type Vtable = EventHandler_abi<T>;
            const IID: ::windows::Guid = ::windows::Guid::from_signature(
                <EventHandler<T> as ::windows::RuntimeType>::SIGNATURE,
            );
        }
        unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for EventHandler<T> {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                let string = ::windows::ConstBuffer::new();
                let string = string.push_slice(b"pinterface(");
                let string = string.push_slice(b"{9de1c535-6ae1-11e0-84e1-18a905bcc53f}");
                let string = string.push_slice(b";");
                let string = string.push_other(<T as ::windows::RuntimeType>::SIGNATURE);
                string.push_slice(b")")
            };
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct EventHandler_abi<T>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                sender: ::windows::RawPtr,
                args: <T as ::windows::Abi>::Abi,
            ) -> ::windows::ErrorCode,
            ::std::marker::PhantomData<T>,
        )
        where
            T: ::windows::RuntimeType + 'static;
        impl<T: ::windows::RuntimeType + 'static> EventHandler<T> {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
                T1__: ::std::convert::Into<::windows::Param<'a, T>>,
            >(
                &self,
                sender: T0__,
                args: T1__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).3)(
                        ::windows::Abi::abi(this),
                        sender.into().abi(),
                        args.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                        &::std::option::Option<::windows::Object>,
                        &<T as ::windows::RuntimeType>::DefaultType,
                    ) -> ::windows::Result<()>
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = EventHandler_box::<T, F> {
                    vtable: &EventHandler_box::<T, F>::VTABLE,
                    count: ::windows::RefCount::new(),
                    invoke,
                };
                unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
            }
        }
        #[repr(C)]
        struct EventHandler_box<
            T,
            F: FnMut(
                    &::std::option::Option<::windows::Object>,
                    &<T as ::windows::RuntimeType>::DefaultType,
                ) -> ::windows::Result<()>
                + 'static,
        >
        where
            T: ::windows::RuntimeType + 'static,
        {
            vtable: *const EventHandler_abi<T>,
            invoke: F,
            count: ::windows::RefCount,
        }
        #[allow(non_snake_case)]
        impl<
                T: ::windows::RuntimeType + 'static,
                F: FnMut(
                        &::std::option::Option<::windows::Object>,
                        &<T as ::windows::RuntimeType>::DefaultType,
                    ) -> ::windows::Result<()>
                    + 'static,
            > EventHandler_box<T, F>
        {
            const VTABLE: EventHandler_abi<T> = EventHandler_abi::<T>(
                Self::QueryInterface,
                Self::AddRef,
                Self::Release,
                Self::Invoke,
                ::std::marker::PhantomData::<T>,
            );
            unsafe extern "system" fn QueryInterface(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                *interface = if iid == &<EventHandler<T> as ::windows::Interface>::IID
                    || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                    || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    ::std::ptr::null_mut()
                };
                if (*interface).is_null() {
                    ::windows::ErrorCode::E_NOINTERFACE
                } else {
                    (*this).count.add_ref();
                    ::windows::ErrorCode::S_OK
                }
            }
            unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: ::windows::RawPtr,
                sender: ::windows::RawPtr,
                args: <T as ::windows::Abi>::Abi,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                ((*this).invoke)(
                    &*(&sender as *const <::windows::Object as ::windows::Abi>::Abi
                        as *const <::windows::Object as ::windows::RuntimeType>::DefaultType),
                    &*(&args as *const <T as ::windows::Abi>::Abi
                        as *const <T as ::windows::RuntimeType>::DefaultType),
                )
                .into()
            }
        }
        #[repr(C)]
        #[allow(non_snake_case)]
        pub struct EventRegistrationToken {
            pub value: i64,
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct EventRegistrationToken_abi(i64);
        unsafe impl ::windows::Abi for EventRegistrationToken {
            type Abi = EventRegistrationToken_abi;
        }
        impl ::std::default::Default for EventRegistrationToken {
            fn default() -> Self {
                Self { value: 0 }
            }
        }
        impl ::std::fmt::Debug for EventRegistrationToken {
            fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                fmt.debug_struct("EventRegistrationToken")
                    .field("value", &format_args!("{:?}", self.value))
                    .finish()
            }
        }
        impl ::std::clone::Clone for EventRegistrationToken {
            fn clone(&self) -> Self {
                Self { value: self.value }
            }
        }
        impl ::std::cmp::PartialEq for EventRegistrationToken {
            fn eq(&self, other: &Self) -> bool {
                self.value == other.value
            }
        }
        impl ::std::cmp::Eq for EventRegistrationToken {}
        unsafe impl ::windows::RuntimeType for EventRegistrationToken {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"struct(Windows.Foundation.EventRegistrationToken;i8)",
            );
        }
        #[repr(transparent)]
        pub struct IGuidHelperStatics(::windows::Object);
        impl ::std::clone::Clone for IGuidHelperStatics {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IGuidHelperStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IGuidHelperStatics {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IGuidHelperStatics {}
        impl IGuidHelperStatics {
            pub fn create_new_guid(&self) -> ::windows::Result<::windows::Guid> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::Guid>(result__)
                }
            }
            pub fn empty(&self) -> ::windows::Result<::windows::Guid> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::Guid>(result__)
                }
            }
            pub fn equals<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
            >(
                &self,
                target: T0__,
                value: T1__,
            ) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        &target.into().abi(),
                        &value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IGuidHelperStatics {
            type Vtable = IGuidHelperStatics_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1506252395,
                44626,
                21123,
                [173, 127, 161, 185, 233, 103, 138, 221],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IGuidHelperStatics_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                target: &::windows::Guid,
                value: &::windows::Guid,
                result__: *mut bool,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IGuidHelperStatics {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{59c7966b-ae52-5283-ad7f-a1b9e9678add}") };
        }
        impl ::std::convert::From<IGuidHelperStatics> for ::windows::Object {
            fn from(value: IGuidHelperStatics) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IGuidHelperStatics> for ::windows::Object {
            fn from(value: &IGuidHelperStatics) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IGuidHelperStatics {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IGuidHelperStatics {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        pub struct GuidHelper {}
        impl GuidHelper {
            pub fn create_new_guid() -> ::windows::Result<::windows::Guid> {
                Self::IGuidHelperStatics(|this| unsafe {
                    let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::Guid>(result__)
                })
            }
            pub fn empty() -> ::windows::Result<::windows::Guid> {
                Self::IGuidHelperStatics(|this| unsafe {
                    let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::Guid>(result__)
                })
            }
            pub fn equals<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
            >(
                target: T0__,
                value: T1__,
            ) -> ::windows::Result<bool> {
                Self::IGuidHelperStatics(|this| unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        &target.into().abi(),
                        &value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                })
            }
            #[allow(non_snake_case)]
            fn IGuidHelperStatics<R, F: FnOnce(&IGuidHelperStatics) -> ::windows::Result<R>>(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<GuidHelper, IGuidHelperStatics> =
                    ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::windows::RuntimeName for GuidHelper {
            const NAME: &'static str = "Windows.Foundation.GuidHelper";
        }
        #[repr(transparent)]
        pub struct IGetActivationFactory(::windows::Object);
        impl ::std::clone::Clone for IGetActivationFactory {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IGetActivationFactory {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IGetActivationFactory {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IGetActivationFactory {}
        impl IGetActivationFactory {
            pub fn get_activation_factory<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                activatable_class_id: T0__,
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        activatable_class_id.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IGetActivationFactory {
            type Vtable = IGetActivationFactory_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1323011810,
                38621,
                18855,
                [148, 247, 70, 7, 221, 171, 142, 60],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IGetActivationFactory_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                activatable_class_id: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IGetActivationFactory {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{4edb8ee2-96dd-49a7-94f7-4607ddab8e3c}") };
        }
        impl ::std::convert::From<IGetActivationFactory> for ::windows::Object {
            fn from(value: IGetActivationFactory) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IGetActivationFactory> for ::windows::Object {
            fn from(value: &IGetActivationFactory) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IGetActivationFactory {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IGetActivationFactory
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct TypedEventHandler<TSender, TResult>(
            ::windows::IUnknown,
            ::std::marker::PhantomData<TSender>,
            ::std::marker::PhantomData<TResult>,
        )
        where
            TSender: ::windows::RuntimeType + 'static,
            TResult: ::windows::RuntimeType + 'static;
        impl<
                TSender: ::windows::RuntimeType + 'static,
                TResult: ::windows::RuntimeType + 'static,
            > ::std::clone::Clone for TypedEventHandler<TSender, TResult>
        {
            fn clone(&self) -> Self {
                Self(
                    self.0.clone(),
                    ::std::marker::PhantomData::<TSender>,
                    ::std::marker::PhantomData::<TResult>,
                )
            }
        }
        impl<
                TSender: ::windows::RuntimeType + 'static,
                TResult: ::windows::RuntimeType + 'static,
            > ::std::cmp::PartialEq for TypedEventHandler<TSender, TResult>
        {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl<
                TSender: ::windows::RuntimeType + 'static,
                TResult: ::windows::RuntimeType + 'static,
            > ::std::cmp::Eq for TypedEventHandler<TSender, TResult>
        {
        }
        impl<
                TSender: ::windows::RuntimeType + 'static,
                TResult: ::windows::RuntimeType + 'static,
            > ::std::fmt::Debug for TypedEventHandler<TSender, TResult>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        unsafe impl<
                TSender: ::windows::RuntimeType + 'static,
                TResult: ::windows::RuntimeType + 'static,
            > ::windows::Interface for TypedEventHandler<TSender, TResult>
        {
            type Vtable = TypedEventHandler_abi<TSender, TResult>;
            const IID: ::windows::Guid = ::windows::Guid::from_signature(
                <TypedEventHandler<TSender, TResult> as ::windows::RuntimeType>::SIGNATURE,
            );
        }
        unsafe impl<
                TSender: ::windows::RuntimeType + 'static,
                TResult: ::windows::RuntimeType + 'static,
            > ::windows::RuntimeType for TypedEventHandler<TSender, TResult>
        {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                let string = ::windows::ConstBuffer::new();
                let string = string.push_slice(b"pinterface(");
                let string = string.push_slice(b"{9de1c534-6ae1-11e0-84e1-18a905bcc53f}");
                let string = string.push_slice(b";");
                let string = string.push_other(<TSender as ::windows::RuntimeType>::SIGNATURE);
                let string = string.push_slice(b";");
                let string = string.push_other(<TResult as ::windows::RuntimeType>::SIGNATURE);
                string.push_slice(b")")
            };
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct TypedEventHandler_abi<TSender, TResult>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                sender: <TSender as ::windows::Abi>::Abi,
                args: <TResult as ::windows::Abi>::Abi,
            ) -> ::windows::ErrorCode,
            ::std::marker::PhantomData<TSender>,
            ::std::marker::PhantomData<TResult>,
        )
        where
            TSender: ::windows::RuntimeType + 'static,
            TResult: ::windows::RuntimeType + 'static;
        impl<
                TSender: ::windows::RuntimeType + 'static,
                TResult: ::windows::RuntimeType + 'static,
            > TypedEventHandler<TSender, TResult>
        {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, TSender>>,
                T1__: ::std::convert::Into<::windows::Param<'a, TResult>>,
            >(
                &self,
                sender: T0__,
                args: T1__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).3)(
                        ::windows::Abi::abi(this),
                        sender.into().abi(),
                        args.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                        &<TSender as ::windows::RuntimeType>::DefaultType,
                        &<TResult as ::windows::RuntimeType>::DefaultType,
                    ) -> ::windows::Result<()>
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = TypedEventHandler_box::<TSender, TResult, F> {
                    vtable: &TypedEventHandler_box::<TSender, TResult, F>::VTABLE,
                    count: ::windows::RefCount::new(),
                    invoke,
                };
                unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
            }
        }
        #[repr(C)]
        struct TypedEventHandler_box<
            TSender,
            TResult,
            F: FnMut(
                    &<TSender as ::windows::RuntimeType>::DefaultType,
                    &<TResult as ::windows::RuntimeType>::DefaultType,
                ) -> ::windows::Result<()>
                + 'static,
        >
        where
            TSender: ::windows::RuntimeType + 'static,
            TResult: ::windows::RuntimeType + 'static,
        {
            vtable: *const TypedEventHandler_abi<TSender, TResult>,
            invoke: F,
            count: ::windows::RefCount,
        }
        #[allow(non_snake_case)]
        impl<
                TSender: ::windows::RuntimeType + 'static,
                TResult: ::windows::RuntimeType + 'static,
                F: FnMut(
                        &<TSender as ::windows::RuntimeType>::DefaultType,
                        &<TResult as ::windows::RuntimeType>::DefaultType,
                    ) -> ::windows::Result<()>
                    + 'static,
            > TypedEventHandler_box<TSender, TResult, F>
        {
            const VTABLE: TypedEventHandler_abi<TSender, TResult> =
                TypedEventHandler_abi::<TSender, TResult>(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                    ::std::marker::PhantomData::<TSender>,
                    ::std::marker::PhantomData::<TResult>,
                );
            unsafe extern "system" fn QueryInterface(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                *interface = if iid
                    == &<TypedEventHandler<TSender, TResult> as ::windows::Interface>::IID
                    || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                    || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    ::std::ptr::null_mut()
                };
                if (*interface).is_null() {
                    ::windows::ErrorCode::E_NOINTERFACE
                } else {
                    (*this).count.add_ref();
                    ::windows::ErrorCode::S_OK
                }
            }
            unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: ::windows::RawPtr,
                sender: <TSender as ::windows::Abi>::Abi,
                args: <TResult as ::windows::Abi>::Abi,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                ((*this).invoke)(
                    &*(&sender as *const <TSender as ::windows::Abi>::Abi
                        as *const <TSender as ::windows::RuntimeType>::DefaultType),
                    &*(&args as *const <TResult as ::windows::Abi>::Abi
                        as *const <TResult as ::windows::RuntimeType>::DefaultType),
                )
                .into()
            }
        }
        #[repr(transparent)]
        pub struct IMemoryBufferReference(::windows::Object);
        impl ::std::clone::Clone for IMemoryBufferReference {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IMemoryBufferReference {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IMemoryBufferReference {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IMemoryBufferReference {}
        impl IMemoryBufferReference {
            pub fn close(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IClosable>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
            pub fn capacity(&self) -> ::windows::Result<u32> {
                let this = self;
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u32>(result__)
                }
            }
            pub fn closed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        TypedEventHandler<IMemoryBufferReference, ::windows::Object>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__: <EventRegistrationToken as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<EventRegistrationToken>(result__)
                }
            }
            pub fn remove_closed<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, EventRegistrationToken>>,
            >(
                &self,
                cookie: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        cookie.into().abi(),
                    )
                    .ok()
                }
            }
        }
        unsafe impl ::windows::Interface for IMemoryBufferReference {
            type Vtable = IMemoryBufferReference_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                4223982889,
                9307,
                4580,
                [175, 152, 104, 148, 35, 38, 12, 248],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IMemoryBufferReference_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut u32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
                result__: *mut EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                cookie: EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IMemoryBufferReference {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{fbc4dd29-245b-11e4-af98-689423260cf8}") };
        }
        impl ::std::convert::From<IMemoryBufferReference> for ::windows::Object {
            fn from(value: IMemoryBufferReference) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IMemoryBufferReference> for ::windows::Object {
            fn from(value: &IMemoryBufferReference) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IMemoryBufferReference {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IMemoryBufferReference
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IMemoryBufferReference> for IClosable {
            fn from(value: IMemoryBufferReference) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IMemoryBufferReference> for IClosable {
            fn from(value: &IMemoryBufferReference) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IClosable>> for IMemoryBufferReference {
            fn into(self) -> ::windows::Param<'a, IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<IClosable>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IClosable>> for &'a IMemoryBufferReference {
            fn into(self) -> ::windows::Param<'a, IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<IClosable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IMemoryBuffer(::windows::Object);
        impl ::std::clone::Clone for IMemoryBuffer {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IMemoryBuffer {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IMemoryBuffer {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IMemoryBuffer {}
        impl IMemoryBuffer {
            pub fn close(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IClosable>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
            pub fn create_reference(&self) -> ::windows::Result<IMemoryBufferReference> {
                let this = self;
                unsafe {
                    let mut result__: <IMemoryBufferReference as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<IMemoryBufferReference>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IMemoryBuffer {
            type Vtable = IMemoryBuffer_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                4223982890,
                9307,
                4580,
                [175, 152, 104, 148, 35, 38, 12, 248],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IMemoryBuffer_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IMemoryBuffer {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{fbc4dd2a-245b-11e4-af98-689423260cf8}") };
        }
        impl ::std::convert::From<IMemoryBuffer> for ::windows::Object {
            fn from(value: IMemoryBuffer) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IMemoryBuffer> for ::windows::Object {
            fn from(value: &IMemoryBuffer) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IMemoryBuffer {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IMemoryBuffer {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IMemoryBuffer> for IClosable {
            fn from(value: IMemoryBuffer) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IMemoryBuffer> for IClosable {
            fn from(value: &IMemoryBuffer) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IClosable>> for IMemoryBuffer {
            fn into(self) -> ::windows::Param<'a, IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<IClosable>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IClosable>> for &'a IMemoryBuffer {
            fn into(self) -> ::windows::Param<'a, IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<IClosable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct MemoryBuffer(::windows::Object);
        impl MemoryBuffer {
            pub fn close(&self) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IClosable>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
            pub fn create_reference(&self) -> ::windows::Result<IMemoryBufferReference> {
                let this = self;
                unsafe {
                    let mut result__: <IMemoryBufferReference as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<IMemoryBufferReference>(result__)
                }
            }
            pub fn create(capacity: u32) -> ::windows::Result<MemoryBuffer> {
                Self::IMemoryBufferFactory(|this| unsafe {
                    let mut result__: <MemoryBuffer as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        capacity,
                        &mut result__,
                    )
                    .from_abi::<MemoryBuffer>(result__)
                })
            }
            #[allow(non_snake_case)]
            fn IMemoryBufferFactory<R, F: FnOnce(&IMemoryBufferFactory) -> ::windows::Result<R>>(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<MemoryBuffer, IMemoryBufferFactory> =
                    ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::std::clone::Clone for MemoryBuffer {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for MemoryBuffer {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for MemoryBuffer {}
        impl ::std::fmt::Debug for MemoryBuffer {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for MemoryBuffer {
            const NAME: &'static str = "Windows.Foundation.MemoryBuffer";
        }
        unsafe impl ::windows::Interface for MemoryBuffer {
            type Vtable = IMemoryBuffer_abi;
            const IID: ::windows::Guid = <IMemoryBuffer as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for MemoryBuffer {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"rc(Windows.Foundation.MemoryBuffer;{fbc4dd2a-245b-11e4-af98-689423260cf8})",
            );
        }
        impl ::std::convert::From<MemoryBuffer> for ::windows::Object {
            fn from(value: MemoryBuffer) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&MemoryBuffer> for ::windows::Object {
            fn from(value: &MemoryBuffer) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for MemoryBuffer {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a MemoryBuffer {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<MemoryBuffer> for IClosable {
            fn from(value: MemoryBuffer) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&MemoryBuffer> for IClosable {
            fn from(value: &MemoryBuffer) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IClosable>> for MemoryBuffer {
            fn into(self) -> ::windows::Param<'a, IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<IClosable>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IClosable>> for &'a MemoryBuffer {
            fn into(self) -> ::windows::Param<'a, IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<IClosable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<MemoryBuffer> for IMemoryBuffer {
            fn from(value: MemoryBuffer) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&MemoryBuffer> for IMemoryBuffer {
            fn from(value: &MemoryBuffer) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IMemoryBuffer>> for MemoryBuffer {
            fn into(self) -> ::windows::Param<'a, IMemoryBuffer> {
                ::windows::Param::Owned(::std::convert::Into::<IMemoryBuffer>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IMemoryBuffer>> for &'a MemoryBuffer {
            fn into(self) -> ::windows::Param<'a, IMemoryBuffer> {
                ::windows::Param::Owned(::std::convert::Into::<IMemoryBuffer>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        unsafe impl ::std::marker::Send for MemoryBuffer {}
        unsafe impl ::std::marker::Sync for MemoryBuffer {}
        #[repr(transparent)]
        pub struct IMemoryBufferFactory(::windows::Object);
        impl ::std::clone::Clone for IMemoryBufferFactory {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IMemoryBufferFactory {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IMemoryBufferFactory {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IMemoryBufferFactory {}
        impl IMemoryBufferFactory {
            pub fn create(&self, capacity: u32) -> ::windows::Result<MemoryBuffer> {
                let this = self;
                unsafe {
                    let mut result__: <MemoryBuffer as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        capacity,
                        &mut result__,
                    )
                    .from_abi::<MemoryBuffer>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IMemoryBufferFactory {
            type Vtable = IMemoryBufferFactory_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                4223982891,
                9307,
                4580,
                [175, 152, 104, 148, 35, 38, 12, 248],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IMemoryBufferFactory_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                capacity: u32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IMemoryBufferFactory {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{fbc4dd2b-245b-11e4-af98-689423260cf8}") };
        }
        impl ::std::convert::From<IMemoryBufferFactory> for ::windows::Object {
            fn from(value: IMemoryBufferFactory) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IMemoryBufferFactory> for ::windows::Object {
            fn from(value: &IMemoryBufferFactory) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IMemoryBufferFactory {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IMemoryBufferFactory
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct PropertyType(pub i32);
        impl ::std::convert::From<i32> for PropertyType {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for PropertyType {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for PropertyType {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for PropertyType {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for PropertyType {}
        impl PropertyType {
            #![allow(non_upper_case_globals)]
            pub const Empty: Self = Self(0i32);
            pub const UInt8: Self = Self(1i32);
            pub const Int16: Self = Self(2i32);
            pub const UInt16: Self = Self(3i32);
            pub const Int32: Self = Self(4i32);
            pub const UInt32: Self = Self(5i32);
            pub const Int64: Self = Self(6i32);
            pub const UInt64: Self = Self(7i32);
            pub const Single: Self = Self(8i32);
            pub const Double: Self = Self(9i32);
            pub const Char16: Self = Self(10i32);
            pub const Boolean: Self = Self(11i32);
            pub const String: Self = Self(12i32);
            pub const Inspectable: Self = Self(13i32);
            pub const DateTime: Self = Self(14i32);
            pub const TimeSpan: Self = Self(15i32);
            pub const Guid: Self = Self(16i32);
            pub const Point: Self = Self(17i32);
            pub const Size: Self = Self(18i32);
            pub const Rect: Self = Self(19i32);
            pub const OtherType: Self = Self(20i32);
            pub const UInt8Array: Self = Self(1025i32);
            pub const Int16Array: Self = Self(1026i32);
            pub const UInt16Array: Self = Self(1027i32);
            pub const Int32Array: Self = Self(1028i32);
            pub const UInt32Array: Self = Self(1029i32);
            pub const Int64Array: Self = Self(1030i32);
            pub const UInt64Array: Self = Self(1031i32);
            pub const SingleArray: Self = Self(1032i32);
            pub const DoubleArray: Self = Self(1033i32);
            pub const Char16Array: Self = Self(1034i32);
            pub const BooleanArray: Self = Self(1035i32);
            pub const StringArray: Self = Self(1036i32);
            pub const InspectableArray: Self = Self(1037i32);
            pub const DateTimeArray: Self = Self(1038i32);
            pub const TimeSpanArray: Self = Self(1039i32);
            pub const GuidArray: Self = Self(1040i32);
            pub const PointArray: Self = Self(1041i32);
            pub const SizeArray: Self = Self(1042i32);
            pub const RectArray: Self = Self(1043i32);
            pub const OtherTypeArray: Self = Self(1044i32);
        }
        unsafe impl ::windows::Abi for PropertyType {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for PropertyType {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"enum(Windows.Foundation.PropertyType;i4)");
        }
        #[repr(C)]
        #[allow(non_snake_case)]
        pub struct TimeSpan {
            pub duration: i64,
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct TimeSpan_abi(i64);
        unsafe impl ::windows::Abi for TimeSpan {
            type Abi = TimeSpan_abi;
        }
        impl ::std::default::Default for TimeSpan {
            fn default() -> Self {
                Self { duration: 0 }
            }
        }
        impl ::std::fmt::Debug for TimeSpan {
            fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                fmt.debug_struct("TimeSpan")
                    .field("duration", &format_args!("{:?}", self.duration))
                    .finish()
            }
        }
        impl ::std::clone::Clone for TimeSpan {
            fn clone(&self) -> Self {
                Self {
                    duration: self.duration,
                }
            }
        }
        impl ::std::cmp::PartialEq for TimeSpan {
            fn eq(&self, other: &Self) -> bool {
                self.duration == other.duration
            }
        }
        impl ::std::cmp::Eq for TimeSpan {}
        unsafe impl ::windows::RuntimeType for TimeSpan {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"struct(Windows.Foundation.TimeSpan;i8)");
        }
        #[repr(C)]
        #[allow(non_snake_case)]
        pub struct Point {
            pub x: f32,
            pub y: f32,
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct Point_abi(f32, f32);
        unsafe impl ::windows::Abi for Point {
            type Abi = Point_abi;
        }
        impl ::std::default::Default for Point {
            fn default() -> Self {
                Self { x: 0.0, y: 0.0 }
            }
        }
        impl ::std::fmt::Debug for Point {
            fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                fmt.debug_struct("Point")
                    .field("x", &format_args!("{:?}", self.x))
                    .field("y", &format_args!("{:?}", self.y))
                    .finish()
            }
        }
        impl ::std::clone::Clone for Point {
            fn clone(&self) -> Self {
                Self {
                    x: self.x,
                    y: self.y,
                }
            }
        }
        impl ::std::cmp::PartialEq for Point {
            fn eq(&self, other: &Self) -> bool {
                self.x == other.x && self.y == other.y
            }
        }
        impl ::std::cmp::Eq for Point {}
        unsafe impl ::windows::RuntimeType for Point {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"struct(Windows.Foundation.Point;f4;f4)");
        }
        #[repr(C)]
        #[allow(non_snake_case)]
        pub struct Size {
            pub width: f32,
            pub height: f32,
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct Size_abi(f32, f32);
        unsafe impl ::windows::Abi for Size {
            type Abi = Size_abi;
        }
        impl ::std::default::Default for Size {
            fn default() -> Self {
                Self {
                    width: 0.0,
                    height: 0.0,
                }
            }
        }
        impl ::std::fmt::Debug for Size {
            fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                fmt.debug_struct("Size")
                    .field("width", &format_args!("{:?}", self.width))
                    .field("height", &format_args!("{:?}", self.height))
                    .finish()
            }
        }
        impl ::std::clone::Clone for Size {
            fn clone(&self) -> Self {
                Self {
                    width: self.width,
                    height: self.height,
                }
            }
        }
        impl ::std::cmp::PartialEq for Size {
            fn eq(&self, other: &Self) -> bool {
                self.width == other.width && self.height == other.height
            }
        }
        impl ::std::cmp::Eq for Size {}
        unsafe impl ::windows::RuntimeType for Size {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"struct(Windows.Foundation.Size;f4;f4)");
        }
        #[repr(C)]
        #[allow(non_snake_case)]
        pub struct Rect {
            pub x: f32,
            pub y: f32,
            pub width: f32,
            pub height: f32,
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct Rect_abi(f32, f32, f32, f32);
        unsafe impl ::windows::Abi for Rect {
            type Abi = Rect_abi;
        }
        impl ::std::default::Default for Rect {
            fn default() -> Self {
                Self {
                    x: 0.0,
                    y: 0.0,
                    width: 0.0,
                    height: 0.0,
                }
            }
        }
        impl ::std::fmt::Debug for Rect {
            fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                fmt.debug_struct("Rect")
                    .field("x", &format_args!("{:?}", self.x))
                    .field("y", &format_args!("{:?}", self.y))
                    .field("width", &format_args!("{:?}", self.width))
                    .field("height", &format_args!("{:?}", self.height))
                    .finish()
            }
        }
        impl ::std::clone::Clone for Rect {
            fn clone(&self) -> Self {
                Self {
                    x: self.x,
                    y: self.y,
                    width: self.width,
                    height: self.height,
                }
            }
        }
        impl ::std::cmp::PartialEq for Rect {
            fn eq(&self, other: &Self) -> bool {
                self.x == other.x
                    && self.y == other.y
                    && self.width == other.width
                    && self.height == other.height
            }
        }
        impl ::std::cmp::Eq for Rect {}
        unsafe impl ::windows::RuntimeType for Rect {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"struct(Windows.Foundation.Rect;f4;f4;f4;f4)");
        }
        #[repr(transparent)]
        pub struct IPropertyValue(::windows::Object);
        impl ::std::clone::Clone for IPropertyValue {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IPropertyValue {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IPropertyValue {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IPropertyValue {}
        impl IPropertyValue {
            pub fn r#type(&self) -> ::windows::Result<PropertyType> {
                let this = self;
                unsafe {
                    let mut result__: <PropertyType as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<PropertyType>(result__)
                }
            }
            pub fn is_numeric_scalar(&self) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<bool>(result__)
                }
            }
            pub fn get_uint8(&self) -> ::windows::Result<u8> {
                let this = self;
                unsafe {
                    let mut result__: <u8 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u8>(result__)
                }
            }
            pub fn get_int16(&self) -> ::windows::Result<i16> {
                let this = self;
                unsafe {
                    let mut result__: <i16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<i16>(result__)
                }
            }
            pub fn get_uint16(&self) -> ::windows::Result<u16> {
                let this = self;
                unsafe {
                    let mut result__: <u16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u16>(result__)
                }
            }
            pub fn get_int32(&self) -> ::windows::Result<i32> {
                let this = self;
                unsafe {
                    let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<i32>(result__)
                }
            }
            pub fn get_uint32(&self) -> ::windows::Result<u32> {
                let this = self;
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u32>(result__)
                }
            }
            pub fn get_int64(&self) -> ::windows::Result<i64> {
                let this = self;
                unsafe {
                    let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<i64>(result__)
                }
            }
            pub fn get_uint64(&self) -> ::windows::Result<u64> {
                let this = self;
                unsafe {
                    let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u64>(result__)
                }
            }
            pub fn get_single(&self) -> ::windows::Result<f32> {
                let this = self;
                unsafe {
                    let mut result__: <f32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<f32>(result__)
                }
            }
            pub fn get_double(&self) -> ::windows::Result<f64> {
                let this = self;
                unsafe {
                    let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<f64>(result__)
                }
            }
            pub fn get_char16(&self) -> ::windows::Result<u16> {
                let this = self;
                unsafe {
                    let mut result__: <u16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u16>(result__)
                }
            }
            pub fn get_boolean(&self) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn get_string(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn get_guid(&self) -> ::windows::Result<::windows::Guid> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::Guid>(result__)
                }
            }
            pub fn get_date_time(&self) -> ::windows::Result<DateTime> {
                let this = self;
                unsafe {
                    let mut result__: <DateTime as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).21)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<DateTime>(result__)
                }
            }
            pub fn get_time_span(&self) -> ::windows::Result<TimeSpan> {
                let this = self;
                unsafe {
                    let mut result__: <TimeSpan as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).22)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<TimeSpan>(result__)
                }
            }
            pub fn get_point(&self) -> ::windows::Result<Point> {
                let this = self;
                unsafe {
                    let mut result__: <Point as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).23)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<Point>(result__)
                }
            }
            pub fn get_size(&self) -> ::windows::Result<Size> {
                let this = self;
                unsafe {
                    let mut result__: <Size as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).24)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<Size>(result__)
                }
            }
            pub fn get_rect(&self) -> ::windows::Result<Rect> {
                let this = self;
                unsafe {
                    let mut result__: <Rect as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).25)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<Rect>(result__)
                }
            }
            pub fn get_uint8_array(
                &self,
                value: &mut ::windows::Array<u8>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).26)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_int16_array(
                &self,
                value: &mut ::windows::Array<i16>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).27)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_uint16_array(
                &self,
                value: &mut ::windows::Array<u16>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).28)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_int32_array(
                &self,
                value: &mut ::windows::Array<i32>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).29)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_uint32_array(
                &self,
                value: &mut ::windows::Array<u32>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).30)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_int64_array(
                &self,
                value: &mut ::windows::Array<i64>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).31)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_uint64_array(
                &self,
                value: &mut ::windows::Array<u64>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).32)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_single_array(
                &self,
                value: &mut ::windows::Array<f32>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).33)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_double_array(
                &self,
                value: &mut ::windows::Array<f64>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).34)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_char16_array(
                &self,
                value: &mut ::windows::Array<u16>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).35)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_boolean_array(
                &self,
                value: &mut ::windows::Array<bool>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).36)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_string_array(
                &self,
                value: &mut ::windows::Array<::windows::HString>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).37)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_inspectable_array(
                &self,
                value: &mut ::windows::Array<::windows::Object>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).38)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_guid_array(
                &self,
                value: &mut ::windows::Array<::windows::Guid>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).39)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_date_time_array(
                &self,
                value: &mut ::windows::Array<DateTime>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).40)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_time_span_array(
                &self,
                value: &mut ::windows::Array<TimeSpan>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).41)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_point_array(
                &self,
                value: &mut ::windows::Array<Point>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).42)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_size_array(
                &self,
                value: &mut ::windows::Array<Size>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).43)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_rect_array(
                &self,
                value: &mut ::windows::Array<Rect>,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).44)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
        }
        unsafe impl ::windows::Interface for IPropertyValue {
            type Vtable = IPropertyValue_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1272349405,
                30036,
                16617,
                [154, 155, 130, 101, 78, 222, 126, 98],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IPropertyValue_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut PropertyType,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut bool,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut u8,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut i16,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut u16,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut u32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut i64,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut u64,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut f32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut f64,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut u16,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut bool,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut DateTime_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut TimeSpan_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut Point_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut Size_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut Rect_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut u8,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut i16,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut u16,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut u32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut i64,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut u64,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut f32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut f64,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut u16,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut bool,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut DateTime_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut TimeSpan_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut Point_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut Size_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: *mut u32,
                value: *mut *mut Rect_abi,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IPropertyValue {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{4bd682dd-7554-40e9-9a9b-82654ede7e62}") };
        }
        impl ::std::convert::From<IPropertyValue> for ::windows::Object {
            fn from(value: IPropertyValue) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IPropertyValue> for ::windows::Object {
            fn from(value: &IPropertyValue) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IPropertyValue {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IPropertyValue {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IPropertyValueStatics(::windows::Object);
        impl ::std::clone::Clone for IPropertyValueStatics {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IPropertyValueStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IPropertyValueStatics {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IPropertyValueStatics {}
        impl IPropertyValueStatics {
            pub fn create_empty(&self) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_uint8(&self, value: u8) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_int16(&self, value: i16) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_uint16(&self, value: u16) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_int32(&self, value: i32) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_uint32(&self, value: u32) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_int64(&self, value: i64) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_uint64(&self, value: u64) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_single(&self, value: f32) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_double(&self, value: f64) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_char16(&self, value: u16) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_boolean(&self, value: bool) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_string<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_inspectable<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
            >(
                &self,
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_guid<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
            >(
                &self,
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_date_time<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, DateTime>>,
            >(
                &self,
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).21)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_time_span<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, TimeSpan>>,
            >(
                &self,
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).22)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_point<'a, T0__: ::std::convert::Into<::windows::Param<'a, Point>>>(
                &self,
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).23)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_size<'a, T0__: ::std::convert::Into<::windows::Param<'a, Size>>>(
                &self,
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).24)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_rect<'a, T0__: ::std::convert::Into<::windows::Param<'a, Rect>>>(
                &self,
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).25)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_uint8_array(
                &self,
                value: &[<u8 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).26)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_int16_array(
                &self,
                value: &[<i16 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).27)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_uint16_array(
                &self,
                value: &[<u16 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).28)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_int32_array(
                &self,
                value: &[<i32 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).29)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_uint32_array(
                &self,
                value: &[<u32 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).30)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_int64_array(
                &self,
                value: &[<i64 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).31)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_uint64_array(
                &self,
                value: &[<u64 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).32)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_single_array(
                &self,
                value: &[<f32 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).33)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_double_array(
                &self,
                value: &[<f64 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).34)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_char16_array(
                &self,
                value: &[<u16 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).35)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_boolean_array(
                &self,
                value: &[<bool as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).36)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_string_array(
                &self,
                value: &[<::windows::HString as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).37)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_inspectable_array(
                &self,
                value: &[<::windows::Object as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).38)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_guid_array(
                &self,
                value: &[<::windows::Guid as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).39)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_date_time_array(
                &self,
                value: &[<DateTime as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).40)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_time_span_array(
                &self,
                value: &[<TimeSpan as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).41)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_point_array(
                &self,
                value: &[<Point as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).42)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_size_array(
                &self,
                value: &[<Size as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).43)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
            pub fn create_rect_array(
                &self,
                value: &[<Rect as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).44)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IPropertyValueStatics {
            type Vtable = IPropertyValueStatics_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1654381512,
                55602,
                20468,
                [150, 185, 141, 150, 197, 193, 232, 88],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IPropertyValueStatics_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: u8,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: i16,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: u16,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: i32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: u32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: i64,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: u64,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: f32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: f64,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: u16,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: bool,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: ::windows::Guid,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: DateTime_abi,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: TimeSpan_abi,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: Point_abi,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: Size_abi,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: Rect_abi,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const u8,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const i16,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const u16,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const i32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const u32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const i64,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const u64,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const f32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const f64,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const u16,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const bool,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const ::windows::Guid,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const DateTime_abi,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const TimeSpan_abi,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const Point_abi,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const Size_abi,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_value: u32,
                value: *const Rect_abi,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IPropertyValueStatics {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{629bdbc8-d932-4ff4-96b9-8d96c5c1e858}") };
        }
        impl ::std::convert::From<IPropertyValueStatics> for ::windows::Object {
            fn from(value: IPropertyValueStatics) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IPropertyValueStatics> for ::windows::Object {
            fn from(value: &IPropertyValueStatics) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IPropertyValueStatics {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IPropertyValueStatics
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IReferenceArray<T>(::windows::Object, ::std::marker::PhantomData<T>)
        where
            T: ::windows::RuntimeType + 'static;
        impl<T: ::windows::RuntimeType + 'static> ::std::clone::Clone for IReferenceArray<T> {
            fn clone(&self) -> Self {
                Self(self.0.clone(), ::std::marker::PhantomData::<T>)
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::fmt::Debug for IReferenceArray<T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq for IReferenceArray<T> {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::cmp::Eq for IReferenceArray<T> {}
        impl<T: ::windows::RuntimeType + 'static> IReferenceArray<T> {
            pub fn r#type(&self) -> ::windows::Result<PropertyType> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <PropertyType as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<PropertyType>(result__)
                }
            }
            pub fn is_numeric_scalar(&self) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<bool>(result__)
                }
            }
            pub fn get_uint8(&self) -> ::windows::Result<u8> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u8 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u8>(result__)
                }
            }
            pub fn get_int16(&self) -> ::windows::Result<i16> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <i16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<i16>(result__)
                }
            }
            pub fn get_uint16(&self) -> ::windows::Result<u16> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u16>(result__)
                }
            }
            pub fn get_int32(&self) -> ::windows::Result<i32> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<i32>(result__)
                }
            }
            pub fn get_uint32(&self) -> ::windows::Result<u32> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u32>(result__)
                }
            }
            pub fn get_int64(&self) -> ::windows::Result<i64> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<i64>(result__)
                }
            }
            pub fn get_uint64(&self) -> ::windows::Result<u64> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u64>(result__)
                }
            }
            pub fn get_single(&self) -> ::windows::Result<f32> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <f32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<f32>(result__)
                }
            }
            pub fn get_double(&self) -> ::windows::Result<f64> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<f64>(result__)
                }
            }
            pub fn get_char16(&self) -> ::windows::Result<u16> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u16>(result__)
                }
            }
            pub fn get_boolean(&self) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn get_string(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn get_guid(&self) -> ::windows::Result<::windows::Guid> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::Guid>(result__)
                }
            }
            pub fn get_date_time(&self) -> ::windows::Result<DateTime> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <DateTime as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).21)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<DateTime>(result__)
                }
            }
            pub fn get_time_span(&self) -> ::windows::Result<TimeSpan> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <TimeSpan as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).22)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<TimeSpan>(result__)
                }
            }
            pub fn get_point(&self) -> ::windows::Result<Point> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <Point as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).23)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<Point>(result__)
                }
            }
            pub fn get_size(&self) -> ::windows::Result<Size> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <Size as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).24)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<Size>(result__)
                }
            }
            pub fn get_rect(&self) -> ::windows::Result<Rect> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <Rect as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).25)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<Rect>(result__)
                }
            }
            pub fn get_uint8_array(
                &self,
                value: &mut ::windows::Array<u8>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).26)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_int16_array(
                &self,
                value: &mut ::windows::Array<i16>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).27)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_uint16_array(
                &self,
                value: &mut ::windows::Array<u16>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).28)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_int32_array(
                &self,
                value: &mut ::windows::Array<i32>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).29)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_uint32_array(
                &self,
                value: &mut ::windows::Array<u32>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).30)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_int64_array(
                &self,
                value: &mut ::windows::Array<i64>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).31)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_uint64_array(
                &self,
                value: &mut ::windows::Array<u64>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).32)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_single_array(
                &self,
                value: &mut ::windows::Array<f32>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).33)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_double_array(
                &self,
                value: &mut ::windows::Array<f64>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).34)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_char16_array(
                &self,
                value: &mut ::windows::Array<u16>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).35)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_boolean_array(
                &self,
                value: &mut ::windows::Array<bool>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).36)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_string_array(
                &self,
                value: &mut ::windows::Array<::windows::HString>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).37)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_inspectable_array(
                &self,
                value: &mut ::windows::Array<::windows::Object>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).38)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_guid_array(
                &self,
                value: &mut ::windows::Array<::windows::Guid>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).39)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_date_time_array(
                &self,
                value: &mut ::windows::Array<DateTime>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).40)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_time_span_array(
                &self,
                value: &mut ::windows::Array<TimeSpan>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).41)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_point_array(
                &self,
                value: &mut ::windows::Array<Point>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).42)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_size_array(
                &self,
                value: &mut ::windows::Array<Size>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).43)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_rect_array(
                &self,
                value: &mut ::windows::Array<Rect>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).44)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn value(&self) -> ::windows::Result<::windows::Array<T>> {
                let this = self;
                unsafe {
                    let mut result__: ::windows::Array<T> = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        ::windows::Array::<T>::set_abi_len(&mut result__),
                        windows::Array::<T>::set_abi(&mut result__),
                    )
                    .and_then(|| result__)
                }
            }
        }
        unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IReferenceArray<T> {
            type Vtable = IReferenceArray_abi<T>;
            const IID: ::windows::Guid = ::windows::Guid::from_signature(
                <IReferenceArray<T> as ::windows::RuntimeType>::SIGNATURE,
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IReferenceArray_abi<T>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                array_size_result__: *mut u32,
                result__: *mut *mut <T as ::windows::Abi>::Abi,
            ) -> ::windows::ErrorCode,
            ::std::marker::PhantomData<T>,
        )
        where
            T: ::windows::RuntimeType + 'static;
        unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IReferenceArray<T> {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                let string = ::windows::ConstBuffer::new();
                let string = string.push_slice(b"pinterface(");
                let string = string.push_slice(b"{61c17707-2d65-11e0-9ae8-d48564015472}");
                let string = string.push_slice(b";");
                let string = string.push_other(<T as ::windows::RuntimeType>::SIGNATURE);
                string.push_slice(b")")
            };
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IReferenceArray<T>>
            for ::windows::Object
        {
            fn from(value: IReferenceArray<T>) -> Self {
                value.0
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IReferenceArray<T>>
            for ::windows::Object
        {
            fn from(value: &IReferenceArray<T>) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a, T: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IReferenceArray<T>
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a, T: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IReferenceArray<T>
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IReferenceArray<T>>
            for IPropertyValue
        {
            fn from(value: IReferenceArray<T>) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IReferenceArray<T>>
            for IPropertyValue
        {
            fn from(value: &IReferenceArray<T>) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a, T: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, IPropertyValue>> for IReferenceArray<T>
        {
            fn into(self) -> ::windows::Param<'a, IPropertyValue> {
                ::windows::Param::Owned(::std::convert::Into::<IPropertyValue>::into(self))
            }
        }
        impl<'a, T: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, IPropertyValue>> for &'a IReferenceArray<T>
        {
            fn into(self) -> ::windows::Param<'a, IPropertyValue> {
                ::windows::Param::Owned(::std::convert::Into::<IPropertyValue>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IReference<T>(::windows::Object, ::std::marker::PhantomData<T>)
        where
            T: ::windows::RuntimeType + 'static;
        impl<T: ::windows::RuntimeType + 'static> ::std::clone::Clone for IReference<T> {
            fn clone(&self) -> Self {
                Self(self.0.clone(), ::std::marker::PhantomData::<T>)
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::fmt::Debug for IReference<T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq for IReference<T> {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::cmp::Eq for IReference<T> {}
        impl<T: ::windows::RuntimeType + 'static> IReference<T> {
            pub fn r#type(&self) -> ::windows::Result<PropertyType> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <PropertyType as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<PropertyType>(result__)
                }
            }
            pub fn is_numeric_scalar(&self) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<bool>(result__)
                }
            }
            pub fn get_uint8(&self) -> ::windows::Result<u8> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u8 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u8>(result__)
                }
            }
            pub fn get_int16(&self) -> ::windows::Result<i16> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <i16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<i16>(result__)
                }
            }
            pub fn get_uint16(&self) -> ::windows::Result<u16> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u16>(result__)
                }
            }
            pub fn get_int32(&self) -> ::windows::Result<i32> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<i32>(result__)
                }
            }
            pub fn get_uint32(&self) -> ::windows::Result<u32> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u32>(result__)
                }
            }
            pub fn get_int64(&self) -> ::windows::Result<i64> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<i64>(result__)
                }
            }
            pub fn get_uint64(&self) -> ::windows::Result<u64> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u64>(result__)
                }
            }
            pub fn get_single(&self) -> ::windows::Result<f32> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <f32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<f32>(result__)
                }
            }
            pub fn get_double(&self) -> ::windows::Result<f64> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<f64>(result__)
                }
            }
            pub fn get_char16(&self) -> ::windows::Result<u16> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <u16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<u16>(result__)
                }
            }
            pub fn get_boolean(&self) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn get_string(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn get_guid(&self) -> ::windows::Result<::windows::Guid> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::Guid>(result__)
                }
            }
            pub fn get_date_time(&self) -> ::windows::Result<DateTime> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <DateTime as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).21)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<DateTime>(result__)
                }
            }
            pub fn get_time_span(&self) -> ::windows::Result<TimeSpan> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <TimeSpan as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).22)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<TimeSpan>(result__)
                }
            }
            pub fn get_point(&self) -> ::windows::Result<Point> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <Point as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).23)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<Point>(result__)
                }
            }
            pub fn get_size(&self) -> ::windows::Result<Size> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <Size as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).24)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<Size>(result__)
                }
            }
            pub fn get_rect(&self) -> ::windows::Result<Rect> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    let mut result__: <Rect as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).25)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<Rect>(result__)
                }
            }
            pub fn get_uint8_array(
                &self,
                value: &mut ::windows::Array<u8>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).26)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_int16_array(
                &self,
                value: &mut ::windows::Array<i16>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).27)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_uint16_array(
                &self,
                value: &mut ::windows::Array<u16>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).28)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_int32_array(
                &self,
                value: &mut ::windows::Array<i32>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).29)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_uint32_array(
                &self,
                value: &mut ::windows::Array<u32>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).30)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_int64_array(
                &self,
                value: &mut ::windows::Array<i64>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).31)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_uint64_array(
                &self,
                value: &mut ::windows::Array<u64>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).32)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_single_array(
                &self,
                value: &mut ::windows::Array<f32>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).33)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_double_array(
                &self,
                value: &mut ::windows::Array<f64>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).34)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_char16_array(
                &self,
                value: &mut ::windows::Array<u16>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).35)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_boolean_array(
                &self,
                value: &mut ::windows::Array<bool>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).36)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_string_array(
                &self,
                value: &mut ::windows::Array<::windows::HString>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).37)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_inspectable_array(
                &self,
                value: &mut ::windows::Array<::windows::Object>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).38)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_guid_array(
                &self,
                value: &mut ::windows::Array<::windows::Guid>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).39)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_date_time_array(
                &self,
                value: &mut ::windows::Array<DateTime>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).40)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_time_span_array(
                &self,
                value: &mut ::windows::Array<TimeSpan>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).41)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_point_array(
                &self,
                value: &mut ::windows::Array<Point>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).42)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_size_array(
                &self,
                value: &mut ::windows::Array<Size>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).43)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn get_rect_array(
                &self,
                value: &mut ::windows::Array<Rect>,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IPropertyValue>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).44)(
                        ::windows::Abi::abi(this),
                        value.set_abi_len(),
                        value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn value(&self) -> ::windows::Result<T> {
                let this = self;
                unsafe {
                    let mut result__: <T as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<T>(result__)
                }
            }
        }
        unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IReference<T> {
            type Vtable = IReference_abi<T>;
            const IID: ::windows::Guid = ::windows::Guid::from_signature(
                <IReference<T> as ::windows::RuntimeType>::SIGNATURE,
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IReference_abi<T>(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut <T as ::windows::Abi>::Abi,
            ) -> ::windows::ErrorCode,
            ::std::marker::PhantomData<T>,
        )
        where
            T: ::windows::RuntimeType + 'static;
        unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IReference<T> {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                let string = ::windows::ConstBuffer::new();
                let string = string.push_slice(b"pinterface(");
                let string = string.push_slice(b"{61c17706-2d65-11e0-9ae8-d48564015472}");
                let string = string.push_slice(b";");
                let string = string.push_other(<T as ::windows::RuntimeType>::SIGNATURE);
                string.push_slice(b")")
            };
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IReference<T>>
            for ::windows::Object
        {
            fn from(value: IReference<T>) -> Self {
                value.0
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IReference<T>>
            for ::windows::Object
        {
            fn from(value: &IReference<T>) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a, T: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IReference<T>
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a, T: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IReference<T>
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IReference<T>> for IPropertyValue {
            fn from(value: IReference<T>) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IReference<T>> for IPropertyValue {
            fn from(value: &IReference<T>) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a, T: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, IPropertyValue>> for IReference<T>
        {
            fn into(self) -> ::windows::Param<'a, IPropertyValue> {
                ::windows::Param::Owned(::std::convert::Into::<IPropertyValue>::into(self))
            }
        }
        impl<'a, T: ::windows::RuntimeType + 'static>
            ::std::convert::Into<::windows::Param<'a, IPropertyValue>> for &'a IReference<T>
        {
            fn into(self) -> ::windows::Param<'a, IPropertyValue> {
                ::windows::Param::Owned(::std::convert::Into::<IPropertyValue>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStringable(::windows::Object);
        impl ::std::clone::Clone for IStringable {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStringable {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStringable {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStringable {}
        impl IStringable {
            pub fn to_string(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStringable {
            type Vtable = IStringable_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2520162132,
                36534,
                18672,
                [171, 206, 193, 178, 17, 230, 39, 195],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStringable_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStringable {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{96369f54-8eb6-48f0-abce-c1b211e627c3}") };
        }
        impl ::std::convert::From<IStringable> for ::windows::Object {
            fn from(value: IStringable) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStringable> for ::windows::Object {
            fn from(value: &IStringable) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStringable {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IStringable {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IUriEscapeStatics(::windows::Object);
        impl ::std::clone::Clone for IUriEscapeStatics {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IUriEscapeStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IUriEscapeStatics {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IUriEscapeStatics {}
        impl IUriEscapeStatics {
            pub fn unescape_component<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                to_unescape: T0__,
            ) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        to_unescape.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn escape_component<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                to_escape: T0__,
            ) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        to_escape.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IUriEscapeStatics {
            type Vtable = IUriEscapeStatics_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                3251909306,
                51236,
                17490,
                [167, 253, 81, 43, 195, 187, 233, 161],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IUriEscapeStatics_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                to_unescape: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                to_escape: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IUriEscapeStatics {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{c1d432ba-c824-4452-a7fd-512bc3bbe9a1}") };
        }
        impl ::std::convert::From<IUriEscapeStatics> for ::windows::Object {
            fn from(value: IUriEscapeStatics) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IUriEscapeStatics> for ::windows::Object {
            fn from(value: &IUriEscapeStatics) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IUriEscapeStatics {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IUriEscapeStatics {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IWwwFormUrlDecoderEntry(::windows::Object);
        impl ::std::clone::Clone for IWwwFormUrlDecoderEntry {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IWwwFormUrlDecoderEntry {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IWwwFormUrlDecoderEntry {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IWwwFormUrlDecoderEntry {}
        impl IWwwFormUrlDecoderEntry {
            pub fn name(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn value(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IWwwFormUrlDecoderEntry {
            type Vtable = IWwwFormUrlDecoderEntry_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                308180017,
                63096,
                20110,
                [182, 112, 32, 169, 176, 108, 81, 45],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IWwwFormUrlDecoderEntry_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IWwwFormUrlDecoderEntry {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{125e7431-f678-4e8e-b670-20a9b06c512d}") };
        }
        impl ::std::convert::From<IWwwFormUrlDecoderEntry> for ::windows::Object {
            fn from(value: IWwwFormUrlDecoderEntry) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IWwwFormUrlDecoderEntry> for ::windows::Object {
            fn from(value: &IWwwFormUrlDecoderEntry) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IWwwFormUrlDecoderEntry {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IWwwFormUrlDecoderEntry
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IWwwFormUrlDecoderRuntimeClass(::windows::Object);
        impl ::std::clone::Clone for IWwwFormUrlDecoderRuntimeClass {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IWwwFormUrlDecoderRuntimeClass {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IWwwFormUrlDecoderRuntimeClass {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IWwwFormUrlDecoderRuntimeClass {}
        impl IWwwFormUrlDecoderRuntimeClass {
            pub fn get_first_value_by_name<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn first(
                &self,
            ) -> ::windows::Result<collections::IIterator<IWwwFormUrlDecoderEntry>> {
                let this = &::windows::Interface::cast::<
                    collections::IIterable<IWwwFormUrlDecoderEntry>,
                >(self)
                .unwrap();
                unsafe {
                    let mut result__ : < collections :: IIterator :: < IWwwFormUrlDecoderEntry > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<collections::IIterator<IWwwFormUrlDecoderEntry>>(result__)
                }
            }
            pub fn get_at(&self, index: u32) -> ::windows::Result<IWwwFormUrlDecoderEntry> {
                let this = &::windows::Interface::cast::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >(self)
                .unwrap();
                unsafe {
                    let mut result__: <IWwwFormUrlDecoderEntry as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        index,
                        &mut result__,
                    )
                    .from_abi::<IWwwFormUrlDecoderEntry>(result__)
                }
            }
            pub fn size(&self) -> ::windows::Result<u32> {
                let this = &::windows::Interface::cast::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >(self)
                .unwrap();
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u32>(result__)
                }
            }
            pub fn index_of<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IWwwFormUrlDecoderEntry>>,
            >(
                &self,
                value: T0__,
                index: &mut u32,
            ) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >(self)
                .unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        index,
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn get_many(
                &self,
                start_index: u32,
                items: &mut [<IWwwFormUrlDecoderEntry as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<u32> {
                let this = &::windows::Interface::cast::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >(self)
                .unwrap();
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        start_index,
                        items.len() as u32,
                        ::std::mem::transmute_copy(&items),
                        &mut result__,
                    )
                    .from_abi::<u32>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IWwwFormUrlDecoderRuntimeClass {
            type Vtable = IWwwFormUrlDecoderRuntimeClass_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                3562669137,
                61989,
                17730,
                [146, 150, 14, 29, 245, 210, 84, 223],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IWwwFormUrlDecoderRuntimeClass_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                name: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IWwwFormUrlDecoderRuntimeClass {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{d45a0451-f225-4542-9296-0e1df5d254df}") };
        }
        impl ::std::convert::From<IWwwFormUrlDecoderRuntimeClass> for ::windows::Object {
            fn from(value: IWwwFormUrlDecoderRuntimeClass) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IWwwFormUrlDecoderRuntimeClass> for ::windows::Object {
            fn from(value: &IWwwFormUrlDecoderRuntimeClass) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IWwwFormUrlDecoderRuntimeClass
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IWwwFormUrlDecoderRuntimeClass
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IWwwFormUrlDecoderRuntimeClass>
            for collections::IIterable<IWwwFormUrlDecoderEntry>
        {
            fn from(value: IWwwFormUrlDecoderRuntimeClass) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IWwwFormUrlDecoderRuntimeClass>
            for collections::IIterable<IWwwFormUrlDecoderEntry>
        {
            fn from(value: &IWwwFormUrlDecoderRuntimeClass) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::windows::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>>,
            > for IWwwFormUrlDecoderRuntimeClass
        {
            fn into(self) -> ::windows::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>> {
                ::windows::Param::Owned(::std::convert::Into::<
                    collections::IIterable<IWwwFormUrlDecoderEntry>,
                >::into(self))
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::windows::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>>,
            > for &'a IWwwFormUrlDecoderRuntimeClass
        {
            fn into(self) -> ::windows::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>> {
                ::windows::Param::Owned(::std::convert::Into::<
                    collections::IIterable<IWwwFormUrlDecoderEntry>,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        impl ::std::convert::From<IWwwFormUrlDecoderRuntimeClass>
            for collections::IVectorView<IWwwFormUrlDecoderEntry>
        {
            fn from(value: IWwwFormUrlDecoderRuntimeClass) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IWwwFormUrlDecoderRuntimeClass>
            for collections::IVectorView<IWwwFormUrlDecoderEntry>
        {
            fn from(value: &IWwwFormUrlDecoderRuntimeClass) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::windows::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>>,
            > for IWwwFormUrlDecoderRuntimeClass
        {
            fn into(
                self,
            ) -> ::windows::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>>
            {
                ::windows::Param::Owned(::std::convert::Into::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >::into(self))
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::windows::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>>,
            > for &'a IWwwFormUrlDecoderRuntimeClass
        {
            fn into(
                self,
            ) -> ::windows::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>>
            {
                ::windows::Param::Owned(::std::convert::Into::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        impl ::std::iter::IntoIterator for IWwwFormUrlDecoderRuntimeClass {
            type Item = IWwwFormUrlDecoderEntry;
            type IntoIter = collections::VectorViewIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                collections::VectorViewIterator::new(self.into())
            }
        }
        impl<'a> ::std::iter::IntoIterator for &'a IWwwFormUrlDecoderRuntimeClass {
            type Item = IWwwFormUrlDecoderEntry;
            type IntoIter = collections::VectorViewIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                collections::VectorViewIterator::new(self.into())
            }
        }
        #[repr(transparent)]
        pub struct IWwwFormUrlDecoderRuntimeClassFactory(::windows::Object);
        impl ::std::clone::Clone for IWwwFormUrlDecoderRuntimeClassFactory {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IWwwFormUrlDecoderRuntimeClassFactory {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IWwwFormUrlDecoderRuntimeClassFactory {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IWwwFormUrlDecoderRuntimeClassFactory {}
        impl IWwwFormUrlDecoderRuntimeClassFactory {
            pub fn create_www_form_url_decoder<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                query: T0__,
            ) -> ::windows::Result<WwwFormUrlDecoder> {
                let this = self;
                unsafe {
                    let mut result__: <WwwFormUrlDecoder as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        query.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<WwwFormUrlDecoder>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IWwwFormUrlDecoderRuntimeClassFactory {
            type Vtable = IWwwFormUrlDecoderRuntimeClassFactory_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1535929149,
                9390,
                16821,
                [161, 191, 240, 195, 213, 68, 132, 91],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IWwwFormUrlDecoderRuntimeClassFactory_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                query: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IWwwFormUrlDecoderRuntimeClassFactory {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{5b8c6b3d-24ae-41b5-a1bf-f0c3d544845b}") };
        }
        impl ::std::convert::From<IWwwFormUrlDecoderRuntimeClassFactory> for ::windows::Object {
            fn from(value: IWwwFormUrlDecoderRuntimeClassFactory) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IWwwFormUrlDecoderRuntimeClassFactory> for ::windows::Object {
            fn from(value: &IWwwFormUrlDecoderRuntimeClassFactory) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IWwwFormUrlDecoderRuntimeClassFactory
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IWwwFormUrlDecoderRuntimeClassFactory
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct WwwFormUrlDecoder(::windows::Object);
        impl WwwFormUrlDecoder {
            pub fn get_first_value_by_name<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn create_www_form_url_decoder<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                query: T0__,
            ) -> ::windows::Result<WwwFormUrlDecoder> {
                Self::IWwwFormUrlDecoderRuntimeClassFactory(|this| unsafe {
                    let mut result__: <WwwFormUrlDecoder as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        query.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<WwwFormUrlDecoder>(result__)
                })
            }
            pub fn first(
                &self,
            ) -> ::windows::Result<collections::IIterator<IWwwFormUrlDecoderEntry>> {
                let this = &::windows::Interface::cast::<
                    collections::IIterable<IWwwFormUrlDecoderEntry>,
                >(self)
                .unwrap();
                unsafe {
                    let mut result__ : < collections :: IIterator :: < IWwwFormUrlDecoderEntry > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<collections::IIterator<IWwwFormUrlDecoderEntry>>(result__)
                }
            }
            pub fn get_at(&self, index: u32) -> ::windows::Result<IWwwFormUrlDecoderEntry> {
                let this = &::windows::Interface::cast::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >(self)
                .unwrap();
                unsafe {
                    let mut result__: <IWwwFormUrlDecoderEntry as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        index,
                        &mut result__,
                    )
                    .from_abi::<IWwwFormUrlDecoderEntry>(result__)
                }
            }
            pub fn size(&self) -> ::windows::Result<u32> {
                let this = &::windows::Interface::cast::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >(self)
                .unwrap();
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<u32>(result__)
                }
            }
            pub fn index_of<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IWwwFormUrlDecoderEntry>>,
            >(
                &self,
                value: T0__,
                index: &mut u32,
            ) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >(self)
                .unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        index,
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn get_many(
                &self,
                start_index: u32,
                items: &mut [<IWwwFormUrlDecoderEntry as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<u32> {
                let this = &::windows::Interface::cast::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >(self)
                .unwrap();
                unsafe {
                    let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        start_index,
                        items.len() as u32,
                        ::std::mem::transmute_copy(&items),
                        &mut result__,
                    )
                    .from_abi::<u32>(result__)
                }
            }
            #[allow(non_snake_case)]
            fn IWwwFormUrlDecoderRuntimeClassFactory<
                R,
                F: FnOnce(&IWwwFormUrlDecoderRuntimeClassFactory) -> ::windows::Result<R>,
            >(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<
                    WwwFormUrlDecoder,
                    IWwwFormUrlDecoderRuntimeClassFactory,
                > = ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::std::clone::Clone for WwwFormUrlDecoder {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for WwwFormUrlDecoder {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for WwwFormUrlDecoder {}
        impl ::std::fmt::Debug for WwwFormUrlDecoder {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for WwwFormUrlDecoder {
            const NAME: &'static str = "Windows.Foundation.WwwFormUrlDecoder";
        }
        unsafe impl ::windows::Interface for WwwFormUrlDecoder {
            type Vtable = IWwwFormUrlDecoderRuntimeClass_abi;
            const IID: ::windows::Guid =
                <IWwwFormUrlDecoderRuntimeClass as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for WwwFormUrlDecoder {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"rc(Windows.Foundation.WwwFormUrlDecoder;{d45a0451-f225-4542-9296-0e1df5d254df})",
            );
        }
        impl ::std::convert::From<WwwFormUrlDecoder> for ::windows::Object {
            fn from(value: WwwFormUrlDecoder) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&WwwFormUrlDecoder> for ::windows::Object {
            fn from(value: &WwwFormUrlDecoder) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for WwwFormUrlDecoder {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a WwwFormUrlDecoder {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<WwwFormUrlDecoder> for IWwwFormUrlDecoderRuntimeClass {
            fn from(value: WwwFormUrlDecoder) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&WwwFormUrlDecoder> for IWwwFormUrlDecoderRuntimeClass {
            fn from(value: &WwwFormUrlDecoder) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IWwwFormUrlDecoderRuntimeClass>>
            for WwwFormUrlDecoder
        {
            fn into(self) -> ::windows::Param<'a, IWwwFormUrlDecoderRuntimeClass> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<IWwwFormUrlDecoderRuntimeClass>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IWwwFormUrlDecoderRuntimeClass>>
            for &'a WwwFormUrlDecoder
        {
            fn into(self) -> ::windows::Param<'a, IWwwFormUrlDecoderRuntimeClass> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<IWwwFormUrlDecoderRuntimeClass>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<WwwFormUrlDecoder> for collections::IIterable<IWwwFormUrlDecoderEntry> {
            fn from(value: WwwFormUrlDecoder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&WwwFormUrlDecoder> for collections::IIterable<IWwwFormUrlDecoderEntry> {
            fn from(value: &WwwFormUrlDecoder) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::windows::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>>,
            > for WwwFormUrlDecoder
        {
            fn into(self) -> ::windows::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>> {
                ::windows::Param::Owned(::std::convert::Into::<
                    collections::IIterable<IWwwFormUrlDecoderEntry>,
                >::into(self))
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::windows::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>>,
            > for &'a WwwFormUrlDecoder
        {
            fn into(self) -> ::windows::Param<'a, collections::IIterable<IWwwFormUrlDecoderEntry>> {
                ::windows::Param::Owned(::std::convert::Into::<
                    collections::IIterable<IWwwFormUrlDecoderEntry>,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        impl ::std::convert::From<WwwFormUrlDecoder> for collections::IVectorView<IWwwFormUrlDecoderEntry> {
            fn from(value: WwwFormUrlDecoder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&WwwFormUrlDecoder>
            for collections::IVectorView<IWwwFormUrlDecoderEntry>
        {
            fn from(value: &WwwFormUrlDecoder) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::windows::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>>,
            > for WwwFormUrlDecoder
        {
            fn into(
                self,
            ) -> ::windows::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>>
            {
                ::windows::Param::Owned(::std::convert::Into::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >::into(self))
            }
        }
        impl<'a>
            ::std::convert::Into<
                ::windows::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>>,
            > for &'a WwwFormUrlDecoder
        {
            fn into(
                self,
            ) -> ::windows::Param<'a, collections::IVectorView<IWwwFormUrlDecoderEntry>>
            {
                ::windows::Param::Owned(::std::convert::Into::<
                    collections::IVectorView<IWwwFormUrlDecoderEntry>,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        impl ::std::iter::IntoIterator for WwwFormUrlDecoder {
            type Item = IWwwFormUrlDecoderEntry;
            type IntoIter = collections::VectorViewIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                collections::VectorViewIterator::new(self.into())
            }
        }
        impl<'a> ::std::iter::IntoIterator for &'a WwwFormUrlDecoder {
            type Item = IWwwFormUrlDecoderEntry;
            type IntoIter = collections::VectorViewIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                collections::VectorViewIterator::new(self.into())
            }
        }
        unsafe impl ::std::marker::Send for WwwFormUrlDecoder {}
        unsafe impl ::std::marker::Sync for WwwFormUrlDecoder {}
        #[repr(transparent)]
        pub struct IUriRuntimeClassFactory(::windows::Object);
        impl ::std::clone::Clone for IUriRuntimeClassFactory {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IUriRuntimeClassFactory {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IUriRuntimeClassFactory {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IUriRuntimeClassFactory {}
        impl IUriRuntimeClassFactory {
            pub fn create_uri<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                uri: T0__,
            ) -> ::windows::Result<Uri> {
                let this = self;
                unsafe {
                    let mut result__: <Uri as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        uri.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<Uri>(result__)
                }
            }
            pub fn create_with_relative_uri<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                base_uri: T0__,
                relative_uri: T1__,
            ) -> ::windows::Result<Uri> {
                let this = self;
                unsafe {
                    let mut result__: <Uri as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        base_uri.into().abi(),
                        relative_uri.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<Uri>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IUriRuntimeClassFactory {
            type Vtable = IUriRuntimeClassFactory_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1151957359,
                29246,
                20447,
                [162, 24, 3, 62, 117, 176, 192, 132],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IUriRuntimeClassFactory_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                uri: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                base_uri: ::windows::RawPtr,
                relative_uri: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IUriRuntimeClassFactory {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{44a9796f-723e-4fdf-a218-033e75b0c084}") };
        }
        impl ::std::convert::From<IUriRuntimeClassFactory> for ::windows::Object {
            fn from(value: IUriRuntimeClassFactory) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IUriRuntimeClassFactory> for ::windows::Object {
            fn from(value: &IUriRuntimeClassFactory) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IUriRuntimeClassFactory {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IUriRuntimeClassFactory
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IUriRuntimeClassWithAbsoluteCanonicalUri(::windows::Object);
        impl ::std::clone::Clone for IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IUriRuntimeClassWithAbsoluteCanonicalUri {}
        impl IUriRuntimeClassWithAbsoluteCanonicalUri {
            pub fn absolute_canonical_uri(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn display_iri(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IUriRuntimeClassWithAbsoluteCanonicalUri {
            type Vtable = IUriRuntimeClassWithAbsoluteCanonicalUri_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1972213345,
                8732,
                18447,
                [163, 57, 80, 101, 102, 115, 244, 111],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IUriRuntimeClassWithAbsoluteCanonicalUri_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IUriRuntimeClassWithAbsoluteCanonicalUri {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{758d9661-221c-480f-a339-50656673f46f}") };
        }
        impl ::std::convert::From<IUriRuntimeClassWithAbsoluteCanonicalUri> for ::windows::Object {
            fn from(value: IUriRuntimeClassWithAbsoluteCanonicalUri) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IUriRuntimeClassWithAbsoluteCanonicalUri> for ::windows::Object {
            fn from(value: &IUriRuntimeClassWithAbsoluteCanonicalUri) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IUriRuntimeClassWithAbsoluteCanonicalUri
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IUriRuntimeClassWithAbsoluteCanonicalUri
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct Uri(::windows::Object);
        impl Uri {
            pub fn to_string(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStringable>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn unescape_component<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                to_unescape: T0__,
            ) -> ::windows::Result<::windows::HString> {
                Self::IUriEscapeStatics(|this| unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        to_unescape.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                })
            }
            pub fn escape_component<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                to_escape: T0__,
            ) -> ::windows::Result<::windows::HString> {
                Self::IUriEscapeStatics(|this| unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        to_escape.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                })
            }
            pub fn absolute_uri(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn display_uri(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn domain(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn extension(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn fragment(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn host(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn password(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn path(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn query(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn query_parsed(&self) -> ::windows::Result<WwwFormUrlDecoder> {
                let this = self;
                unsafe {
                    let mut result__: <WwwFormUrlDecoder as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<WwwFormUrlDecoder>(result__)
                }
            }
            pub fn raw_uri(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn scheme_name(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn user_name(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn port(&self) -> ::windows::Result<i32> {
                let this = self;
                unsafe {
                    let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<i32>(result__)
                }
            }
            pub fn suspicious(&self) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn equals<'a, T0__: ::std::convert::Into<::windows::Param<'a, Uri>>>(
                &self,
                p_uri: T0__,
            ) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).21)(
                        ::windows::Abi::abi(this),
                        p_uri.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn combine_uri<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                relative_uri: T0__,
            ) -> ::windows::Result<Uri> {
                let this = self;
                unsafe {
                    let mut result__: <Uri as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).22)(
                        ::windows::Abi::abi(this),
                        relative_uri.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<Uri>(result__)
                }
            }
            pub fn create_uri<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                uri: T0__,
            ) -> ::windows::Result<Uri> {
                Self::IUriRuntimeClassFactory(|this| unsafe {
                    let mut result__: <Uri as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        uri.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<Uri>(result__)
                })
            }
            pub fn create_with_relative_uri<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                base_uri: T0__,
                relative_uri: T1__,
            ) -> ::windows::Result<Uri> {
                Self::IUriRuntimeClassFactory(|this| unsafe {
                    let mut result__: <Uri as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        base_uri.into().abi(),
                        relative_uri.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<Uri>(result__)
                })
            }
            pub fn absolute_canonical_uri(&self) -> ::windows::Result<::windows::HString> {
                let this =
                    &::windows::Interface::cast::<IUriRuntimeClassWithAbsoluteCanonicalUri>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn display_iri(&self) -> ::windows::Result<::windows::HString> {
                let this =
                    &::windows::Interface::cast::<IUriRuntimeClassWithAbsoluteCanonicalUri>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            #[allow(non_snake_case)]
            fn IUriEscapeStatics<R, F: FnOnce(&IUriEscapeStatics) -> ::windows::Result<R>>(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<Uri, IUriEscapeStatics> =
                    ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
            #[allow(non_snake_case)]
            fn IUriRuntimeClassFactory<
                R,
                F: FnOnce(&IUriRuntimeClassFactory) -> ::windows::Result<R>,
            >(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<Uri, IUriRuntimeClassFactory> =
                    ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::std::clone::Clone for Uri {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for Uri {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for Uri {}
        impl ::std::fmt::Debug for Uri {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for Uri {
            const NAME: &'static str = "Windows.Foundation.Uri";
        }
        unsafe impl ::windows::Interface for Uri {
            type Vtable = IUriRuntimeClass_abi;
            const IID: ::windows::Guid = <IUriRuntimeClass as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for Uri {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"rc(Windows.Foundation.Uri;{9e365e57-48b2-4160-956f-c7385120bbfc})",
            );
        }
        impl ::std::convert::From<Uri> for ::windows::Object {
            fn from(value: Uri) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&Uri> for ::windows::Object {
            fn from(value: &Uri) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for Uri {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a Uri {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<Uri> for IStringable {
            fn from(value: Uri) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&Uri> for IStringable {
            fn from(value: &Uri) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStringable>> for Uri {
            fn into(self) -> ::windows::Param<'a, IStringable> {
                ::windows::Param::Owned(::std::convert::Into::<IStringable>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStringable>> for &'a Uri {
            fn into(self) -> ::windows::Param<'a, IStringable> {
                ::windows::Param::Owned(::std::convert::Into::<IStringable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<Uri> for IUriRuntimeClass {
            fn from(value: Uri) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&Uri> for IUriRuntimeClass {
            fn from(value: &Uri) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IUriRuntimeClass>> for Uri {
            fn into(self) -> ::windows::Param<'a, IUriRuntimeClass> {
                ::windows::Param::Owned(::std::convert::Into::<IUriRuntimeClass>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IUriRuntimeClass>> for &'a Uri {
            fn into(self) -> ::windows::Param<'a, IUriRuntimeClass> {
                ::windows::Param::Owned(::std::convert::Into::<IUriRuntimeClass>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<Uri> for IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn from(value: Uri) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&Uri> for IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn from(value: &Uri) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a>
            ::std::convert::Into<::windows::Param<'a, IUriRuntimeClassWithAbsoluteCanonicalUri>>
            for Uri
        {
            fn into(self) -> ::windows::Param<'a, IUriRuntimeClassWithAbsoluteCanonicalUri> {
                ::windows::Param::Owned(::std::convert::Into::<
                    IUriRuntimeClassWithAbsoluteCanonicalUri,
                >::into(self))
            }
        }
        impl<'a>
            ::std::convert::Into<::windows::Param<'a, IUriRuntimeClassWithAbsoluteCanonicalUri>>
            for &'a Uri
        {
            fn into(self) -> ::windows::Param<'a, IUriRuntimeClassWithAbsoluteCanonicalUri> {
                ::windows::Param::Owned(::std::convert::Into::<
                    IUriRuntimeClassWithAbsoluteCanonicalUri,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        unsafe impl ::std::marker::Send for Uri {}
        unsafe impl ::std::marker::Sync for Uri {}
        #[repr(transparent)]
        pub struct IUriRuntimeClass(::windows::Object);
        impl ::std::clone::Clone for IUriRuntimeClass {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IUriRuntimeClass {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IUriRuntimeClass {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IUriRuntimeClass {}
        impl IUriRuntimeClass {
            pub fn absolute_uri(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn display_uri(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn domain(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn extension(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn fragment(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn host(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn password(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn path(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn query(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn query_parsed(&self) -> ::windows::Result<WwwFormUrlDecoder> {
                let this = self;
                unsafe {
                    let mut result__: <WwwFormUrlDecoder as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<WwwFormUrlDecoder>(result__)
                }
            }
            pub fn raw_uri(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn scheme_name(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn user_name(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn port(&self) -> ::windows::Result<i32> {
                let this = self;
                unsafe {
                    let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<i32>(result__)
                }
            }
            pub fn suspicious(&self) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn equals<'a, T0__: ::std::convert::Into<::windows::Param<'a, Uri>>>(
                &self,
                p_uri: T0__,
            ) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).21)(
                        ::windows::Abi::abi(this),
                        p_uri.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn combine_uri<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                relative_uri: T0__,
            ) -> ::windows::Result<Uri> {
                let this = self;
                unsafe {
                    let mut result__: <Uri as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).22)(
                        ::windows::Abi::abi(this),
                        relative_uri.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<Uri>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IUriRuntimeClass {
            type Vtable = IUriRuntimeClass_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2654363223,
                18610,
                16736,
                [149, 111, 199, 56, 81, 32, 187, 252],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IUriRuntimeClass_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut bool,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                p_uri: ::windows::RawPtr,
                result__: *mut bool,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                relative_uri: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IUriRuntimeClass {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{9e365e57-48b2-4160-956f-c7385120bbfc}") };
        }
        impl ::std::convert::From<IUriRuntimeClass> for ::windows::Object {
            fn from(value: IUriRuntimeClass) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IUriRuntimeClass> for ::windows::Object {
            fn from(value: &IUriRuntimeClass) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IUriRuntimeClass {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IUriRuntimeClass {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        pub struct PropertyValue {}
        impl PropertyValue {
            pub fn create_empty() -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_uint8(value: u8) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_int16(value: i16) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_uint16(value: u16) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_int32(value: i32) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_uint32(value: u32) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_int64(value: i64) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_uint64(value: u64) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_single(value: f32) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_double(value: f64) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_char16(value: u16) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_boolean(value: bool) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        value,
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_string<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_inspectable<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
            >(
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_guid<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
            >(
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_date_time<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, DateTime>>,
            >(
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).21)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_time_span<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, TimeSpan>>,
            >(
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).22)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_point<'a, T0__: ::std::convert::Into<::windows::Param<'a, Point>>>(
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).23)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_size<'a, T0__: ::std::convert::Into<::windows::Param<'a, Size>>>(
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).24)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_rect<'a, T0__: ::std::convert::Into<::windows::Param<'a, Rect>>>(
                value: T0__,
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).25)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_uint8_array(
                value: &[<u8 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).26)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_int16_array(
                value: &[<i16 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).27)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_uint16_array(
                value: &[<u16 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).28)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_int32_array(
                value: &[<i32 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).29)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_uint32_array(
                value: &[<u32 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).30)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_int64_array(
                value: &[<i64 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).31)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_uint64_array(
                value: &[<u64 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).32)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_single_array(
                value: &[<f32 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).33)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_double_array(
                value: &[<f64 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).34)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_char16_array(
                value: &[<u16 as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).35)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_boolean_array(
                value: &[<bool as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).36)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_string_array(
                value: &[<::windows::HString as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).37)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_inspectable_array(
                value: &[<::windows::Object as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).38)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_guid_array(
                value: &[<::windows::Guid as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).39)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_date_time_array(
                value: &[<DateTime as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).40)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_time_span_array(
                value: &[<TimeSpan as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).41)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_point_array(
                value: &[<Point as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).42)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_size_array(
                value: &[<Size as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).43)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            pub fn create_rect_array(
                value: &[<Rect as ::windows::RuntimeType>::DefaultType],
            ) -> ::windows::Result<::windows::Object> {
                Self::IPropertyValueStatics(|this| unsafe {
                    let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).44)(
                        ::windows::Abi::abi(this),
                        value.len() as u32,
                        ::std::mem::transmute(value.as_ptr()),
                        &mut result__,
                    )
                    .from_abi::<::windows::Object>(result__)
                })
            }
            #[allow(non_snake_case)]
            fn IPropertyValueStatics<
                R,
                F: FnOnce(&IPropertyValueStatics) -> ::windows::Result<R>,
            >(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<PropertyValue, IPropertyValueStatics> =
                    ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::windows::RuntimeName for PropertyValue {
            const NAME: &'static str = "Windows.Foundation.PropertyValue";
        }
        #[repr(transparent)]
        pub struct WwwFormUrlDecoderEntry(::windows::Object);
        impl WwwFormUrlDecoderEntry {
            pub fn name(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn value(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
        }
        impl ::std::clone::Clone for WwwFormUrlDecoderEntry {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for WwwFormUrlDecoderEntry {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for WwwFormUrlDecoderEntry {}
        impl ::std::fmt::Debug for WwwFormUrlDecoderEntry {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for WwwFormUrlDecoderEntry {
            const NAME: &'static str = "Windows.Foundation.WwwFormUrlDecoderEntry";
        }
        unsafe impl ::windows::Interface for WwwFormUrlDecoderEntry {
            type Vtable = IWwwFormUrlDecoderEntry_abi;
            const IID: ::windows::Guid = <IWwwFormUrlDecoderEntry as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for WwwFormUrlDecoderEntry {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.WwwFormUrlDecoderEntry;{125e7431-f678-4e8e-b670-20a9b06c512d})" ) ;
        }
        impl ::std::convert::From<WwwFormUrlDecoderEntry> for ::windows::Object {
            fn from(value: WwwFormUrlDecoderEntry) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&WwwFormUrlDecoderEntry> for ::windows::Object {
            fn from(value: &WwwFormUrlDecoderEntry) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for WwwFormUrlDecoderEntry {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a WwwFormUrlDecoderEntry
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<WwwFormUrlDecoderEntry> for IWwwFormUrlDecoderEntry {
            fn from(value: WwwFormUrlDecoderEntry) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&WwwFormUrlDecoderEntry> for IWwwFormUrlDecoderEntry {
            fn from(value: &WwwFormUrlDecoderEntry) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IWwwFormUrlDecoderEntry>>
            for WwwFormUrlDecoderEntry
        {
            fn into(self) -> ::windows::Param<'a, IWwwFormUrlDecoderEntry> {
                ::windows::Param::Owned(::std::convert::Into::<IWwwFormUrlDecoderEntry>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IWwwFormUrlDecoderEntry>>
            for &'a WwwFormUrlDecoderEntry
        {
            fn into(self) -> ::windows::Param<'a, IWwwFormUrlDecoderEntry> {
                ::windows::Param::Owned(::std::convert::Into::<IWwwFormUrlDecoderEntry>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        unsafe impl ::std::marker::Send for WwwFormUrlDecoderEntry {}
        unsafe impl ::std::marker::Sync for WwwFormUrlDecoderEntry {}
        #[allow(unused_variables)]
        #[allow(non_upper_case_globals)]
        pub mod collections {
            #[repr(transparent)]
            pub struct IIterator<T>(::windows::Object, ::std::marker::PhantomData<T>)
            where
                T: ::windows::RuntimeType + 'static;
            impl<T: ::windows::RuntimeType + 'static> ::std::clone::Clone for IIterator<T> {
                fn clone(&self) -> Self {
                    Self(self.0.clone(), ::std::marker::PhantomData::<T>)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::fmt::Debug for IIterator<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq for IIterator<T> {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::cmp::Eq for IIterator<T> {}
            impl<T: ::windows::RuntimeType + 'static> IIterator<T> {
                pub fn current(&self) -> ::windows::Result<T> {
                    let this = self;
                    unsafe {
                        let mut result__: <T as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<T>(result__)
                    }
                }
                pub fn has_current(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn move_next(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn get_many(
                    &self,
                    items: &mut [<T as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IIterator<T> {
                type Vtable = IIterator_abi<T>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IIterator<T> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IIterator_abi<T>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut <T as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    array_size_items: u32,
                    items: *mut <T as ::windows::Abi>::Abi,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IIterator<T> {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    let string = ::windows::ConstBuffer::new();
                    let string = string.push_slice(b"pinterface(");
                    let string = string.push_slice(b"{6a79e863-4300-459a-9966-cbb660963ee1}");
                    let string = string.push_slice(b";");
                    let string = string.push_other(<T as ::windows::RuntimeType>::SIGNATURE);
                    string.push_slice(b")")
                };
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IIterator<T>> for ::windows::Object {
                fn from(value: IIterator<T>) -> Self {
                    value.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IIterator<T>>
                for ::windows::Object
            {
                fn from(value: &IIterator<T>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IIterator<T>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IIterator<T>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<T: ::windows::RuntimeType> ::std::iter::Iterator for IIterator<T> {
                type Item = T;
                fn next(&mut self) -> ::std::option::Option<Self::Item> {
                    let result = self.current().ok();
                    if result.is_some() {
                        self.move_next().ok()?;
                    }
                    result
                }
            }
            #[repr(transparent)]
            pub struct IIterable<T>(::windows::Object, ::std::marker::PhantomData<T>)
            where
                T: ::windows::RuntimeType + 'static;
            impl<T: ::windows::RuntimeType + 'static> ::std::clone::Clone for IIterable<T> {
                fn clone(&self) -> Self {
                    Self(self.0.clone(), ::std::marker::PhantomData::<T>)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::fmt::Debug for IIterable<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq for IIterable<T> {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::cmp::Eq for IIterable<T> {}
            impl<T: ::windows::RuntimeType + 'static> IIterable<T> {
                pub fn first(&self) -> ::windows::Result<IIterator<T>> {
                    let this = self;
                    unsafe {
                        let mut result__: <IIterator<T> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<T>>(result__)
                    }
                }
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IIterable<T> {
                type Vtable = IIterable_abi<T>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IIterable<T> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IIterable_abi<T>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IIterable<T> {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    let string = ::windows::ConstBuffer::new();
                    let string = string.push_slice(b"pinterface(");
                    let string = string.push_slice(b"{faa585ea-6214-4217-afda-7f46de5869b3}");
                    let string = string.push_slice(b";");
                    let string = string.push_other(<T as ::windows::RuntimeType>::SIGNATURE);
                    string.push_slice(b")")
                };
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IIterable<T>> for ::windows::Object {
                fn from(value: IIterable<T>) -> Self {
                    value.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IIterable<T>>
                for ::windows::Object
            {
                fn from(value: &IIterable<T>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IIterable<T>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IIterable<T>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<T: ::windows::RuntimeType> ::std::iter::IntoIterator for IIterable<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a, T: ::windows::RuntimeType> ::std::iter::IntoIterator for &'a IIterable<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            pub struct IVectorView<T>(::windows::Object, ::std::marker::PhantomData<T>)
            where
                T: ::windows::RuntimeType + 'static;
            impl<T: ::windows::RuntimeType + 'static> ::std::clone::Clone for IVectorView<T> {
                fn clone(&self) -> Self {
                    Self(self.0.clone(), ::std::marker::PhantomData::<T>)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::fmt::Debug for IVectorView<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq for IVectorView<T> {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::cmp::Eq for IVectorView<T> {}
            impl<T: ::windows::RuntimeType + 'static> IVectorView<T> {
                pub fn first(&self) -> ::windows::Result<IIterator<T>> {
                    let this = &::windows::Interface::cast::<IIterable<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <IIterator<T> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<T>>(result__)
                    }
                }
                pub fn get_at(&self, index: u32) -> ::windows::Result<T> {
                    let this = self;
                    unsafe {
                        let mut result__: <T as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            index,
                            &mut result__,
                        )
                        .from_abi::<T>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn index_of<'a, T0__: ::std::convert::Into<::windows::Param<'a, T>>>(
                    &self,
                    value: T0__,
                    index: &mut u32,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                            index,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn get_many(
                    &self,
                    start_index: u32,
                    items: &mut [<T as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            start_index,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IVectorView<T> {
                type Vtable = IVectorView_abi<T>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IVectorView<T> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVectorView_abi<T>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    index: u32,
                    result__: *mut <T as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: <T as ::windows::Abi>::Abi,
                    index: *mut u32,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    start_index: u32,
                    array_size_items: u32,
                    items: *mut <T as ::windows::Abi>::Abi,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IVectorView<T> {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    let string = ::windows::ConstBuffer::new();
                    let string = string.push_slice(b"pinterface(");
                    let string = string.push_slice(b"{bbe1fa4c-b0e3-4583-baef-1f1b2e483e56}");
                    let string = string.push_slice(b";");
                    let string = string.push_other(<T as ::windows::RuntimeType>::SIGNATURE);
                    string.push_slice(b")")
                };
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IVectorView<T>>
                for ::windows::Object
            {
                fn from(value: IVectorView<T>) -> Self {
                    value.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IVectorView<T>>
                for ::windows::Object
            {
                fn from(value: &IVectorView<T>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IVectorView<T>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IVectorView<T>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IVectorView<T>> for IIterable<T> {
                fn from(value: IVectorView<T>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IVectorView<T>> for IIterable<T> {
                fn from(value: &IVectorView<T>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IIterable<T>>> for IVectorView<T>
            {
                fn into(self) -> ::windows::Param<'a, IIterable<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IIterable<T>>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IIterable<T>>> for &'a IVectorView<T>
            {
                fn into(self) -> ::windows::Param<'a, IIterable<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IIterable<T>>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            pub struct VectorViewIterator<T: ::windows::RuntimeType + 'static> {
                vector: IVectorView<T>,
                current: u32,
                size: u32,
            }
            impl<T: ::windows::RuntimeType> VectorViewIterator<T> {
                pub fn new(vector: IVectorView<T>) -> Self {
                    let size = vector.size().unwrap();
                    Self {
                        vector,
                        current: 0,
                        size,
                    }
                }
            }
            impl<T: ::windows::RuntimeType> ::std::iter::Iterator for VectorViewIterator<T> {
                type Item = T;
                fn next(&mut self) -> ::std::option::Option<Self::Item> {
                    if self.current >= self.size {
                        return None;
                    }
                    let result = self.vector.get_at(self.current);
                    self.current += 1;
                    result.ok()
                }
            }
            impl<T: ::windows::RuntimeType> ::std::iter::IntoIterator for IVectorView<T> {
                type Item = T;
                type IntoIter = VectorViewIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorViewIterator::new(self)
                }
            }
            impl<'a, T: ::windows::RuntimeType> ::std::iter::IntoIterator for &'a IVectorView<T> {
                type Item = T;
                type IntoIter = VectorViewIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorViewIterator::new(::std::clone::Clone::clone(self))
                }
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct CollectionChange(pub i32);
            impl ::std::convert::From<i32> for CollectionChange {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for CollectionChange {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for CollectionChange {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for CollectionChange {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for CollectionChange {}
            impl CollectionChange {
                #![allow(non_upper_case_globals)]
                pub const Reset: Self = Self(0i32);
                pub const ItemInserted: Self = Self(1i32);
                pub const ItemRemoved: Self = Self(2i32);
                pub const ItemChanged: Self = Self(3i32);
            }
            unsafe impl ::windows::Abi for CollectionChange {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for CollectionChange {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Foundation.Collections.CollectionChange;i4)",
                );
            }
            #[repr(transparent)]
            pub struct IKeyValuePair<K, V>(
                ::windows::Object,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::clone::Clone for IKeyValuePair<K, V>
            {
                fn clone(&self) -> Self {
                    Self(
                        self.0.clone(),
                        ::std::marker::PhantomData::<K>,
                        ::std::marker::PhantomData::<V>,
                    )
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::fmt::Debug for IKeyValuePair<K, V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::cmp::PartialEq for IKeyValuePair<K, V>
            {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::cmp::Eq for IKeyValuePair<K, V>
            {
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static> IKeyValuePair<K, V> {
                pub fn key(&self) -> ::windows::Result<K> {
                    let this = self;
                    unsafe {
                        let mut result__: <K as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<K>(result__)
                    }
                }
                pub fn value(&self) -> ::windows::Result<V> {
                    let this = self;
                    unsafe {
                        let mut result__: <V as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<V>(result__)
                    }
                }
            }
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::Interface for IKeyValuePair<K, V>
            {
                type Vtable = IKeyValuePair_abi<K, V>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IKeyValuePair<K, V> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IKeyValuePair_abi<K, V>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut <K as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut <V as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::RuntimeType for IKeyValuePair<K, V>
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    let string = ::windows::ConstBuffer::new();
                    let string = string.push_slice(b"pinterface(");
                    let string = string.push_slice(b"{02b51929-c1c4-4a7e-8940-0312b5c18500}");
                    let string = string.push_slice(b";");
                    let string = string.push_other(<K as ::windows::RuntimeType>::SIGNATURE);
                    let string = string.push_slice(b";");
                    let string = string.push_other(<V as ::windows::RuntimeType>::SIGNATURE);
                    string.push_slice(b")")
                };
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IKeyValuePair<K, V>> for ::windows::Object
            {
                fn from(value: IKeyValuePair<K, V>) -> Self {
                    value.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IKeyValuePair<K, V>> for ::windows::Object
            {
                fn from(value: &IKeyValuePair<K, V>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IKeyValuePair<K, V>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IKeyValuePair<K, V>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IMapChangedEventArgs<K>(::windows::Object, ::std::marker::PhantomData<K>)
            where
                K: ::windows::RuntimeType + 'static;
            impl<K: ::windows::RuntimeType + 'static> ::std::clone::Clone for IMapChangedEventArgs<K> {
                fn clone(&self) -> Self {
                    Self(self.0.clone(), ::std::marker::PhantomData::<K>)
                }
            }
            impl<K: ::windows::RuntimeType + 'static> ::std::fmt::Debug for IMapChangedEventArgs<K> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl<K: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq for IMapChangedEventArgs<K> {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static> ::std::cmp::Eq for IMapChangedEventArgs<K> {}
            impl<K: ::windows::RuntimeType + 'static> IMapChangedEventArgs<K> {
                pub fn collection_change(&self) -> ::windows::Result<CollectionChange> {
                    let this = self;
                    unsafe {
                        let mut result__: <CollectionChange as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<CollectionChange>(result__)
                    }
                }
                pub fn key(&self) -> ::windows::Result<K> {
                    let this = self;
                    unsafe {
                        let mut result__: <K as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<K>(result__)
                    }
                }
            }
            unsafe impl<K: ::windows::RuntimeType + 'static> ::windows::Interface for IMapChangedEventArgs<K> {
                type Vtable = IMapChangedEventArgs_abi<K>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IMapChangedEventArgs<K> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IMapChangedEventArgs_abi<K>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut CollectionChange,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut <K as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                ::std::marker::PhantomData<K>,
            )
            where
                K: ::windows::RuntimeType + 'static;
            unsafe impl<K: ::windows::RuntimeType + 'static> ::windows::RuntimeType
                for IMapChangedEventArgs<K>
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    let string = ::windows::ConstBuffer::new();
                    let string = string.push_slice(b"pinterface(");
                    let string = string.push_slice(b"{9939f4df-050a-4c0f-aa60-77075f9c4777}");
                    let string = string.push_slice(b";");
                    let string = string.push_other(<K as ::windows::RuntimeType>::SIGNATURE);
                    string.push_slice(b")")
                };
            }
            impl<K: ::windows::RuntimeType + 'static> ::std::convert::From<IMapChangedEventArgs<K>>
                for ::windows::Object
            {
                fn from(value: IMapChangedEventArgs<K>) -> Self {
                    value.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static> ::std::convert::From<&IMapChangedEventArgs<K>>
                for ::windows::Object
            {
                fn from(value: &IMapChangedEventArgs<K>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IMapChangedEventArgs<K>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IMapChangedEventArgs<K>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IMapView<K, V>(
                ::windows::Object,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::clone::Clone for IMapView<K, V>
            {
                fn clone(&self) -> Self {
                    Self(
                        self.0.clone(),
                        ::std::marker::PhantomData::<K>,
                        ::std::marker::PhantomData::<V>,
                    )
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::fmt::Debug for IMapView<K, V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::cmp::PartialEq for IMapView<K, V>
            {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::cmp::Eq for IMapView<K, V>
            {
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static> IMapView<K, V> {
                pub fn first(&self) -> ::windows::Result<IIterator<IKeyValuePair<K, V>>> {
                    let this = &::windows::Interface::cast::<IIterable<IKeyValuePair<K, V>>>(self)
                        .unwrap();
                    unsafe {
                        let mut result__: <IIterator<IKeyValuePair<K, V>> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<IKeyValuePair<K, V>>>(result__)
                    }
                }
                pub fn lookup<'a, T0__: ::std::convert::Into<::windows::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<V> {
                    let this = self;
                    unsafe {
                        let mut result__: <V as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<V>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn has_key<'a, T0__: ::std::convert::Into<::windows::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn split(
                    &self,
                    first: &mut ::std::option::Option<IMapView<K, V>>,
                    second: &mut ::std::option::Option<IMapView<K, V>>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            ::windows::Abi::set_abi(first),
                            ::windows::Abi::set_abi(second),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::Interface for IMapView<K, V>
            {
                type Vtable = IMapView_abi<K, V>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IMapView<K, V> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IMapView_abi<K, V>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    key: <K as ::windows::Abi>::Abi,
                    result__: *mut <V as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    key: <K as ::windows::Abi>::Abi,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    first: *mut ::windows::RawPtr,
                    second: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::RuntimeType for IMapView<K, V>
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    let string = ::windows::ConstBuffer::new();
                    let string = string.push_slice(b"pinterface(");
                    let string = string.push_slice(b"{e480ce40-a338-4ada-adcf-272272e48cb9}");
                    let string = string.push_slice(b";");
                    let string = string.push_other(<K as ::windows::RuntimeType>::SIGNATURE);
                    let string = string.push_slice(b";");
                    let string = string.push_other(<V as ::windows::RuntimeType>::SIGNATURE);
                    string.push_slice(b")")
                };
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IMapView<K, V>> for ::windows::Object
            {
                fn from(value: IMapView<K, V>) -> Self {
                    value.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IMapView<K, V>> for ::windows::Object
            {
                fn from(value: &IMapView<K, V>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IMapView<K, V>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IMapView<K, V>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IMapView<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: IMapView<K, V>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IMapView<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: &IMapView<K, V>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IIterable<IKeyValuePair<K, V>>>>
                for IMapView<K, V>
            {
                fn into(self) -> ::windows::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(self),
                    )
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IIterable<IKeyValuePair<K, V>>>>
                for &'a IMapView<K, V>
            {
                fn into(self) -> ::windows::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::iter::IntoIterator for IMapView<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::iter::IntoIterator for &'a IMapView<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            pub struct IMap<K, V>(
                ::windows::Object,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::clone::Clone for IMap<K, V>
            {
                fn clone(&self) -> Self {
                    Self(
                        self.0.clone(),
                        ::std::marker::PhantomData::<K>,
                        ::std::marker::PhantomData::<V>,
                    )
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::fmt::Debug for IMap<K, V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::cmp::PartialEq for IMap<K, V>
            {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::cmp::Eq for IMap<K, V>
            {
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static> IMap<K, V> {
                pub fn first(&self) -> ::windows::Result<IIterator<IKeyValuePair<K, V>>> {
                    let this = &::windows::Interface::cast::<IIterable<IKeyValuePair<K, V>>>(self)
                        .unwrap();
                    unsafe {
                        let mut result__: <IIterator<IKeyValuePair<K, V>> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<IKeyValuePair<K, V>>>(result__)
                    }
                }
                pub fn lookup<'a, T0__: ::std::convert::Into<::windows::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<V> {
                    let this = self;
                    unsafe {
                        let mut result__: <V as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<V>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn has_key<'a, T0__: ::std::convert::Into<::windows::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn get_view(&self) -> ::windows::Result<IMapView<K, V>> {
                    let this = self;
                    unsafe {
                        let mut result__: <IMapView<K, V> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IMapView<K, V>>(result__)
                    }
                }
                pub fn insert<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, K>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, V>>,
                >(
                    &self,
                    key: T0__,
                    value: T1__,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn remove<'a, T0__: ::std::convert::Into<::windows::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn clear(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this)).ok()
                    }
                }
            }
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::Interface for IMap<K, V>
            {
                type Vtable = IMap_abi<K, V>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IMap<K, V> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IMap_abi<K, V>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    key: <K as ::windows::Abi>::Abi,
                    result__: *mut <V as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    key: <K as ::windows::Abi>::Abi,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    key: <K as ::windows::Abi>::Abi,
                    value: <V as ::windows::Abi>::Abi,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    key: <K as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::RuntimeType for IMap<K, V>
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    let string = ::windows::ConstBuffer::new();
                    let string = string.push_slice(b"pinterface(");
                    let string = string.push_slice(b"{3c2925fe-8519-45c1-aa79-197b6718c1c1}");
                    let string = string.push_slice(b";");
                    let string = string.push_other(<K as ::windows::RuntimeType>::SIGNATURE);
                    let string = string.push_slice(b";");
                    let string = string.push_other(<V as ::windows::RuntimeType>::SIGNATURE);
                    string.push_slice(b")")
                };
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IMap<K, V>> for ::windows::Object
            {
                fn from(value: IMap<K, V>) -> Self {
                    value.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IMap<K, V>> for ::windows::Object
            {
                fn from(value: &IMap<K, V>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IMap<K, V>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IMap<K, V>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IMap<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: IMap<K, V>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IMap<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: &IMap<K, V>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IIterable<IKeyValuePair<K, V>>>>
                for IMap<K, V>
            {
                fn into(self) -> ::windows::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(self),
                    )
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IIterable<IKeyValuePair<K, V>>>>
                for &'a IMap<K, V>
            {
                fn into(self) -> ::windows::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::iter::IntoIterator for IMap<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::iter::IntoIterator for &'a IMap<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            pub struct MapChangedEventHandler<K, V>(
                ::windows::IUnknown,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::clone::Clone for MapChangedEventHandler<K, V>
            {
                fn clone(&self) -> Self {
                    Self(
                        self.0.clone(),
                        ::std::marker::PhantomData::<K>,
                        ::std::marker::PhantomData::<V>,
                    )
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::cmp::PartialEq for MapChangedEventHandler<K, V>
            {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::cmp::Eq for MapChangedEventHandler<K, V>
            {
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::fmt::Debug for MapChangedEventHandler<K, V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::Interface for MapChangedEventHandler<K, V>
            {
                type Vtable = MapChangedEventHandler_abi<K, V>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <MapChangedEventHandler<K, V> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::RuntimeType for MapChangedEventHandler<K, V>
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    let string = ::windows::ConstBuffer::new();
                    let string = string.push_slice(b"pinterface(");
                    let string = string.push_slice(b"{179517f3-94ee-41f8-bddc-768a895544f3}");
                    let string = string.push_slice(b";");
                    let string = string.push_other(<K as ::windows::RuntimeType>::SIGNATURE);
                    let string = string.push_slice(b";");
                    let string = string.push_other(<V as ::windows::RuntimeType>::SIGNATURE);
                    string.push_slice(b")")
                };
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct MapChangedEventHandler_abi<K, V>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    event: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                MapChangedEventHandler<K, V>
            {
                pub fn invoke<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, IObservableMap<K, V>>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, IMapChangedEventArgs<K>>>,
                >(
                    &self,
                    sender: T0__,
                    event: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into().abi(),
                            event.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<IObservableMap<K, V>>,
                            &::std::option::Option<IMapChangedEventArgs<K>>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = MapChangedEventHandler_box::<K, V, F> {
                        vtable: &MapChangedEventHandler_box::<K, V, F>::VTABLE,
                        count: ::windows::RefCount::new(),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
            }
            #[repr(C)]
            struct MapChangedEventHandler_box<
                K,
                V,
                F: FnMut(
                        &::std::option::Option<IObservableMap<K, V>>,
                        &::std::option::Option<IMapChangedEventArgs<K>>,
                    ) -> ::windows::Result<()>
                    + 'static,
            >
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static,
            {
                vtable: *const MapChangedEventHandler_abi<K, V>,
                invoke: F,
                count: ::windows::RefCount,
            }
            #[allow(non_snake_case)]
            impl<
                    K: ::windows::RuntimeType + 'static,
                    V: ::windows::RuntimeType + 'static,
                    F: FnMut(
                            &::std::option::Option<IObservableMap<K, V>>,
                            &::std::option::Option<IMapChangedEventArgs<K>>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > MapChangedEventHandler_box<K, V, F>
            {
                const VTABLE: MapChangedEventHandler_abi<K, V> = MapChangedEventHandler_abi::<K, V>(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                    ::std::marker::PhantomData::<K>,
                    ::std::marker::PhantomData::<V>,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<MapChangedEventHandler<K, V> as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::ErrorCode::E_NOINTERFACE
                    } else {
                        (*this).count.add_ref();
                        ::windows::ErrorCode::S_OK
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    event: ::windows::RawPtr,
                ) -> ::windows::ErrorCode {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < IObservableMap :: < K , V > as :: windows :: Abi > :: Abi as * const < IObservableMap :: < K , V > as :: windows :: RuntimeType > :: DefaultType ) , & * ( & event as * const < IMapChangedEventArgs :: < K > as :: windows :: Abi > :: Abi as * const < IMapChangedEventArgs :: < K > as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            pub struct IObservableMap<K, V>(
                ::windows::Object,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::clone::Clone for IObservableMap<K, V>
            {
                fn clone(&self) -> Self {
                    Self(
                        self.0.clone(),
                        ::std::marker::PhantomData::<K>,
                        ::std::marker::PhantomData::<V>,
                    )
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::fmt::Debug for IObservableMap<K, V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::cmp::PartialEq for IObservableMap<K, V>
            {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::cmp::Eq for IObservableMap<K, V>
            {
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                IObservableMap<K, V>
            {
                pub fn first(&self) -> ::windows::Result<IIterator<IKeyValuePair<K, V>>> {
                    let this = &::windows::Interface::cast::<IIterable<IKeyValuePair<K, V>>>(self)
                        .unwrap();
                    unsafe {
                        let mut result__: <IIterator<IKeyValuePair<K, V>> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<IKeyValuePair<K, V>>>(result__)
                    }
                }
                pub fn lookup<'a, T0__: ::std::convert::Into<::windows::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<V> {
                    let this = &::windows::Interface::cast::<IMap<K, V>>(self).unwrap();
                    unsafe {
                        let mut result__: <V as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<V>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<IMap<K, V>>(self).unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn has_key<'a, T0__: ::std::convert::Into<::windows::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IMap<K, V>>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn get_view(&self) -> ::windows::Result<IMapView<K, V>> {
                    let this = &::windows::Interface::cast::<IMap<K, V>>(self).unwrap();
                    unsafe {
                        let mut result__: <IMapView<K, V> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IMapView<K, V>>(result__)
                    }
                }
                pub fn insert<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, K>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, V>>,
                >(
                    &self,
                    key: T0__,
                    value: T1__,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IMap<K, V>>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn remove<'a, T0__: ::std::convert::Into<::windows::Param<'a, K>>>(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IMap<K, V>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn clear(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IMap<K, V>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn map_changed<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, MapChangedEventHandler<K, V>>>,
                >(
                    &self,
                    vhnd: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = self;
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            vhnd.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_map_changed<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    &self,
                    token: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            token.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::Interface for IObservableMap<K, V>
            {
                type Vtable = IObservableMap_abi<K, V>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IObservableMap<K, V> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IObservableMap_abi<K, V>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    vhnd: ::windows::RawPtr,
                    result__: *mut super::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::RuntimeType for IObservableMap<K, V>
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    let string = ::windows::ConstBuffer::new();
                    let string = string.push_slice(b"pinterface(");
                    let string = string.push_slice(b"{65df2bf5-bf39-41b5-aebc-5a9d865e472b}");
                    let string = string.push_slice(b";");
                    let string = string.push_other(<K as ::windows::RuntimeType>::SIGNATURE);
                    let string = string.push_slice(b";");
                    let string = string.push_other(<V as ::windows::RuntimeType>::SIGNATURE);
                    string.push_slice(b")")
                };
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IObservableMap<K, V>> for ::windows::Object
            {
                fn from(value: IObservableMap<K, V>) -> Self {
                    value.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IObservableMap<K, V>> for ::windows::Object
            {
                fn from(value: &IObservableMap<K, V>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IObservableMap<K, V>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IObservableMap<K, V>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IObservableMap<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: IObservableMap<K, V>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IObservableMap<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: &IObservableMap<K, V>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IIterable<IKeyValuePair<K, V>>>>
                for IObservableMap<K, V>
            {
                fn into(self) -> ::windows::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(self),
                    )
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IIterable<IKeyValuePair<K, V>>>>
                for &'a IObservableMap<K, V>
            {
                fn into(self) -> ::windows::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IObservableMap<K, V>> for IMap<K, V>
            {
                fn from(value: IObservableMap<K, V>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IObservableMap<K, V>> for IMap<K, V>
            {
                fn from(value: &IObservableMap<K, V>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IMap<K, V>>> for IObservableMap<K, V>
            {
                fn into(self) -> ::windows::Param<'a, IMap<K, V>> {
                    ::windows::Param::Owned(::std::convert::Into::<IMap<K, V>>::into(self))
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IMap<K, V>>>
                for &'a IObservableMap<K, V>
            {
                fn into(self) -> ::windows::Param<'a, IMap<K, V>> {
                    ::windows::Param::Owned(::std::convert::Into::<IMap<K, V>>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::iter::IntoIterator for IObservableMap<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::iter::IntoIterator for &'a IObservableMap<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            pub struct IVectorChangedEventArgs(::windows::Object);
            impl ::std::clone::Clone for IVectorChangedEventArgs {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IVectorChangedEventArgs {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IVectorChangedEventArgs {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IVectorChangedEventArgs {}
            impl IVectorChangedEventArgs {
                pub fn collection_change(&self) -> ::windows::Result<CollectionChange> {
                    let this = self;
                    unsafe {
                        let mut result__: <CollectionChange as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<CollectionChange>(result__)
                    }
                }
                pub fn index(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IVectorChangedEventArgs {
                type Vtable = IVectorChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1465463775,
                    13566,
                    17536,
                    [175, 21, 7, 105, 31, 61, 93, 155],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVectorChangedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut CollectionChange,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IVectorChangedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{575933df-34fe-4480-af15-07691f3d5d9b}")
                };
            }
            impl ::std::convert::From<IVectorChangedEventArgs> for ::windows::Object {
                fn from(value: IVectorChangedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IVectorChangedEventArgs> for ::windows::Object {
                fn from(value: &IVectorChangedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IVectorChangedEventArgs {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IVectorChangedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct VectorChangedEventHandler<T>(
                ::windows::IUnknown,
                ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            impl<T: ::windows::RuntimeType + 'static> ::std::clone::Clone for VectorChangedEventHandler<T> {
                fn clone(&self) -> Self {
                    Self(self.0.clone(), ::std::marker::PhantomData::<T>)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq for VectorChangedEventHandler<T> {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::cmp::Eq for VectorChangedEventHandler<T> {}
            impl<T: ::windows::RuntimeType + 'static> ::std::fmt::Debug for VectorChangedEventHandler<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface
                for VectorChangedEventHandler<T>
            {
                type Vtable = VectorChangedEventHandler_abi<T>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <VectorChangedEventHandler<T> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType
                for VectorChangedEventHandler<T>
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    let string = ::windows::ConstBuffer::new();
                    let string = string.push_slice(b"pinterface(");
                    let string = string.push_slice(b"{0c051752-9fbf-4c70-aa0c-0e4c82d9a761}");
                    let string = string.push_slice(b";");
                    let string = string.push_other(<T as ::windows::RuntimeType>::SIGNATURE);
                    string.push_slice(b")")
                };
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct VectorChangedEventHandler_abi<T>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    event: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            impl<T: ::windows::RuntimeType + 'static> VectorChangedEventHandler<T> {
                pub fn invoke<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, IObservableVector<T>>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, IVectorChangedEventArgs>>,
                >(
                    &self,
                    sender: T0__,
                    event: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into().abi(),
                            event.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<IObservableVector<T>>,
                            &::std::option::Option<IVectorChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = VectorChangedEventHandler_box::<T, F> {
                        vtable: &VectorChangedEventHandler_box::<T, F>::VTABLE,
                        count: ::windows::RefCount::new(),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
            }
            #[repr(C)]
            struct VectorChangedEventHandler_box<
                T,
                F: FnMut(
                        &::std::option::Option<IObservableVector<T>>,
                        &::std::option::Option<IVectorChangedEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            >
            where
                T: ::windows::RuntimeType + 'static,
            {
                vtable: *const VectorChangedEventHandler_abi<T>,
                invoke: F,
                count: ::windows::RefCount,
            }
            #[allow(non_snake_case)]
            impl<
                    T: ::windows::RuntimeType + 'static,
                    F: FnMut(
                            &::std::option::Option<IObservableVector<T>>,
                            &::std::option::Option<IVectorChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > VectorChangedEventHandler_box<T, F>
            {
                const VTABLE: VectorChangedEventHandler_abi<T> = VectorChangedEventHandler_abi::<T>(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                    ::std::marker::PhantomData::<T>,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<VectorChangedEventHandler<T> as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::ErrorCode::E_NOINTERFACE
                    } else {
                        (*this).count.add_ref();
                        ::windows::ErrorCode::S_OK
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    event: ::windows::RawPtr,
                ) -> ::windows::ErrorCode {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < IObservableVector :: < T > as :: windows :: Abi > :: Abi as * const < IObservableVector :: < T > as :: windows :: RuntimeType > :: DefaultType ) , & * ( & event as * const < IVectorChangedEventArgs as :: windows :: Abi > :: Abi as * const < IVectorChangedEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            pub struct IVector<T>(::windows::Object, ::std::marker::PhantomData<T>)
            where
                T: ::windows::RuntimeType + 'static;
            impl<T: ::windows::RuntimeType + 'static> ::std::clone::Clone for IVector<T> {
                fn clone(&self) -> Self {
                    Self(self.0.clone(), ::std::marker::PhantomData::<T>)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::fmt::Debug for IVector<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq for IVector<T> {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::cmp::Eq for IVector<T> {}
            impl<T: ::windows::RuntimeType + 'static> IVector<T> {
                pub fn first(&self) -> ::windows::Result<IIterator<T>> {
                    let this = &::windows::Interface::cast::<IIterable<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <IIterator<T> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<T>>(result__)
                    }
                }
                pub fn get_at(&self, index: u32) -> ::windows::Result<T> {
                    let this = self;
                    unsafe {
                        let mut result__: <T as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            index,
                            &mut result__,
                        )
                        .from_abi::<T>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn get_view(&self) -> ::windows::Result<IVectorView<T>> {
                    let this = self;
                    unsafe {
                        let mut result__: <IVectorView<T> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IVectorView<T>>(result__)
                    }
                }
                pub fn index_of<'a, T0__: ::std::convert::Into<::windows::Param<'a, T>>>(
                    &self,
                    value: T0__,
                    index: &mut u32,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                            index,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn set_at<'a, T1__: ::std::convert::Into<::windows::Param<'a, T>>>(
                    &self,
                    index: u32,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn insert_at<'a, T1__: ::std::convert::Into<::windows::Param<'a, T>>>(
                    &self,
                    index: u32,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn remove_at(&self, index: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), index)
                            .ok()
                    }
                }
                pub fn append<'a, T0__: ::std::convert::Into<::windows::Param<'a, T>>>(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn remove_at_end(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn clear(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).15)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn get_many(
                    &self,
                    start_index: u32,
                    items: &mut [<T as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            start_index,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn replace_all(
                    &self,
                    items: &[<T as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            items.len() as u32,
                            ::std::mem::transmute(items.as_ptr()),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IVector<T> {
                type Vtable = IVector_abi<T>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IVector<T> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVector_abi<T>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    index: u32,
                    result__: *mut <T as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: <T as ::windows::Abi>::Abi,
                    index: *mut u32,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    index: u32,
                    value: <T as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    index: u32,
                    value: <T as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    index: u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: <T as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    start_index: u32,
                    array_size_items: u32,
                    items: *mut <T as ::windows::Abi>::Abi,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    array_size_items: u32,
                    items: *const <T as ::windows::Abi>::Abi,
                ) -> ::windows::ErrorCode,
                ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IVector<T> {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    let string = ::windows::ConstBuffer::new();
                    let string = string.push_slice(b"pinterface(");
                    let string = string.push_slice(b"{913337e9-11a1-4345-a3a2-4e7f956e222d}");
                    let string = string.push_slice(b";");
                    let string = string.push_other(<T as ::windows::RuntimeType>::SIGNATURE);
                    string.push_slice(b")")
                };
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IVector<T>> for ::windows::Object {
                fn from(value: IVector<T>) -> Self {
                    value.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IVector<T>> for ::windows::Object {
                fn from(value: &IVector<T>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IVector<T>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IVector<T>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IVector<T>> for IIterable<T> {
                fn from(value: IVector<T>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IVector<T>> for IIterable<T> {
                fn from(value: &IVector<T>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IIterable<T>>> for IVector<T>
            {
                fn into(self) -> ::windows::Param<'a, IIterable<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IIterable<T>>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IIterable<T>>> for &'a IVector<T>
            {
                fn into(self) -> ::windows::Param<'a, IIterable<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IIterable<T>>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            pub struct VectorIterator<T: ::windows::RuntimeType + 'static> {
                vector: IVector<T>,
                current: u32,
                size: u32,
            }
            impl<T: ::windows::RuntimeType> VectorIterator<T> {
                pub fn new(vector: IVector<T>) -> Self {
                    let size = vector.size().unwrap();
                    Self {
                        vector,
                        current: 0,
                        size,
                    }
                }
            }
            impl<T: ::windows::RuntimeType> ::std::iter::Iterator for VectorIterator<T> {
                type Item = T;
                fn next(&mut self) -> ::std::option::Option<Self::Item> {
                    if self.current >= self.size {
                        return None;
                    }
                    let result = self.vector.get_at(self.current);
                    self.current += 1;
                    result.ok()
                }
            }
            impl<T: ::windows::RuntimeType> ::std::iter::IntoIterator for IVector<T> {
                type Item = T;
                type IntoIter = VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorIterator::new(self)
                }
            }
            impl<'a, T: ::windows::RuntimeType> ::std::iter::IntoIterator for &'a IVector<T> {
                type Item = T;
                type IntoIter = VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorIterator::new(::std::clone::Clone::clone(self))
                }
            }
            #[repr(transparent)]
            pub struct IObservableVector<T>(::windows::Object, ::std::marker::PhantomData<T>)
            where
                T: ::windows::RuntimeType + 'static;
            impl<T: ::windows::RuntimeType + 'static> ::std::clone::Clone for IObservableVector<T> {
                fn clone(&self) -> Self {
                    Self(self.0.clone(), ::std::marker::PhantomData::<T>)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::fmt::Debug for IObservableVector<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::cmp::PartialEq for IObservableVector<T> {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::cmp::Eq for IObservableVector<T> {}
            impl<T: ::windows::RuntimeType + 'static> IObservableVector<T> {
                pub fn first(&self) -> ::windows::Result<IIterator<T>> {
                    let this = &::windows::Interface::cast::<IIterable<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <IIterator<T> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<T>>(result__)
                    }
                }
                pub fn vector_changed<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, VectorChangedEventHandler<T>>>,
                >(
                    &self,
                    vhnd: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = self;
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            vhnd.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_vector_changed<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    &self,
                    token: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            token.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn get_at(&self, index: u32) -> ::windows::Result<T> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <T as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            index,
                            &mut result__,
                        )
                        .from_abi::<T>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn get_view(&self) -> ::windows::Result<IVectorView<T>> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <IVectorView<T> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IVectorView<T>>(result__)
                    }
                }
                pub fn index_of<'a, T0__: ::std::convert::Into<::windows::Param<'a, T>>>(
                    &self,
                    value: T0__,
                    index: &mut u32,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                            index,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn set_at<'a, T1__: ::std::convert::Into<::windows::Param<'a, T>>>(
                    &self,
                    index: u32,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn insert_at<'a, T1__: ::std::convert::Into<::windows::Param<'a, T>>>(
                    &self,
                    index: u32,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn remove_at(&self, index: u32) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), index)
                            .ok()
                    }
                }
                pub fn append<'a, T0__: ::std::convert::Into<::windows::Param<'a, T>>>(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn remove_at_end(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn clear(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).15)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn get_many(
                    &self,
                    start_index: u32,
                    items: &mut [<T as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            start_index,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn replace_all(
                    &self,
                    items: &[<T as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            items.len() as u32,
                            ::std::mem::transmute(items.as_ptr()),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IObservableVector<T> {
                type Vtable = IObservableVector_abi<T>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IObservableVector<T> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IObservableVector_abi<T>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    vhnd: ::windows::RawPtr,
                    result__: *mut super::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
                ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IObservableVector<T> {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    let string = ::windows::ConstBuffer::new();
                    let string = string.push_slice(b"pinterface(");
                    let string = string.push_slice(b"{5917eb53-50b4-4a0d-b309-65862b3f1dbc}");
                    let string = string.push_slice(b";");
                    let string = string.push_other(<T as ::windows::RuntimeType>::SIGNATURE);
                    string.push_slice(b")")
                };
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IObservableVector<T>>
                for ::windows::Object
            {
                fn from(value: IObservableVector<T>) -> Self {
                    value.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IObservableVector<T>>
                for ::windows::Object
            {
                fn from(value: &IObservableVector<T>) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IObservableVector<T>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IObservableVector<T>
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IObservableVector<T>>
                for IIterable<T>
            {
                fn from(value: IObservableVector<T>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IObservableVector<T>>
                for IIterable<T>
            {
                fn from(value: &IObservableVector<T>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IIterable<T>>> for IObservableVector<T>
            {
                fn into(self) -> ::windows::Param<'a, IIterable<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IIterable<T>>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IIterable<T>>>
                for &'a IObservableVector<T>
            {
                fn into(self) -> ::windows::Param<'a, IIterable<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IIterable<T>>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IObservableVector<T>>
                for IVector<T>
            {
                fn from(value: IObservableVector<T>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IObservableVector<T>>
                for IVector<T>
            {
                fn from(value: &IObservableVector<T>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IVector<T>>> for IObservableVector<T>
            {
                fn into(self) -> ::windows::Param<'a, IVector<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IVector<T>>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::std::convert::Into<::windows::Param<'a, IVector<T>>>
                for &'a IObservableVector<T>
            {
                fn into(self) -> ::windows::Param<'a, IVector<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IVector<T>>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::iter::IntoIterator for IObservableVector<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static> ::std::iter::IntoIterator
                for &'a IObservableVector<T>
            {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            pub struct IPropertySet(::windows::Object);
            impl ::std::clone::Clone for IPropertySet {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IPropertySet {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IPropertySet {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IPropertySet {}
            impl IPropertySet {
                pub fn first(
                    &self,
                ) -> ::windows::Result<
                    IIterator<IKeyValuePair<::windows::HString, ::windows::Object>>,
                > {
                    let this = &::windows::Interface::cast::<
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <IIterator<
                            IKeyValuePair<::windows::HString, ::windows::Object>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<
                            IKeyValuePair<::windows::HString, ::windows::Object>,
                        >>(result__)
                    }
                }
                pub fn lookup<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<::windows::Object> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::Object>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn has_key<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn get_view(
                    &self,
                ) -> ::windows::Result<IMapView<::windows::HString, ::windows::Object>>
                {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__ : < IMapView :: < :: windows :: HString , :: windows :: Object > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IMapView<::windows::HString, ::windows::Object>>(result__)
                    }
                }
                pub fn insert<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
                >(
                    &self,
                    key: T0__,
                    value: T1__,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn remove<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn clear(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn map_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            MapChangedEventHandler<::windows::HString, ::windows::Object>,
                        >,
                    >,
                >(
                    &self,
                    vhnd: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = &::windows::Interface::cast::<
                        IObservableMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            vhnd.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_map_changed<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    &self,
                    token: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        IObservableMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            token.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for IPropertySet {
                type Vtable = IPropertySet_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2319707551,
                    62694,
                    17441,
                    [172, 249, 29, 171, 41, 134, 130, 12],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IPropertySet_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IPropertySet {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{8a43ed9f-f4e6-4421-acf9-1dab2986820c}")
                };
            }
            impl ::std::convert::From<IPropertySet> for ::windows::Object {
                fn from(value: IPropertySet) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IPropertySet> for ::windows::Object {
                fn from(value: &IPropertySet) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IPropertySet {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IPropertySet {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IPropertySet>
                for IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>
            {
                fn from(value: IPropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IPropertySet>
                for IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>
            {
                fn from(value: &IPropertySet) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >,
                > for IPropertySet
            {
                fn into(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >,
                > for &'a IPropertySet
            {
                fn into(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<IPropertySet> for IMap<::windows::HString, ::windows::Object> {
                fn from(value: IPropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IPropertySet> for IMap<::windows::HString, ::windows::Object> {
                fn from(value: &IPropertySet) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IMap<::windows::HString, ::windows::Object>>,
                > for IPropertySet
            {
                fn into(self) -> ::windows::Param<'a, IMap<::windows::HString, ::windows::Object>> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IMap<::windows::HString, ::windows::Object>,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IMap<::windows::HString, ::windows::Object>>,
                > for &'a IPropertySet
            {
                fn into(self) -> ::windows::Param<'a, IMap<::windows::HString, ::windows::Object>> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IMap<::windows::HString, ::windows::Object>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<IPropertySet> for IObservableMap<::windows::HString, ::windows::Object> {
                fn from(value: IPropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IPropertySet> for IObservableMap<::windows::HString, ::windows::Object> {
                fn from(value: &IPropertySet) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::Object>>,
                > for IPropertySet
            {
                fn into(
                    self,
                ) -> ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::Object>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IObservableMap<::windows::HString, ::windows::Object>,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::Object>>,
                > for &'a IPropertySet
            {
                fn into(
                    self,
                ) -> ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::Object>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IObservableMap<::windows::HString, ::windows::Object>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::iter::IntoIterator for IPropertySet {
                type Item = IKeyValuePair<::windows::HString, ::windows::Object>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a IPropertySet {
                type Item = IKeyValuePair<::windows::HString, ::windows::Object>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            pub struct PropertySet(::windows::Object);
            impl PropertySet {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                pub fn first(
                    &self,
                ) -> ::windows::Result<
                    IIterator<IKeyValuePair<::windows::HString, ::windows::Object>>,
                > {
                    let this = &::windows::Interface::cast::<
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <IIterator<
                            IKeyValuePair<::windows::HString, ::windows::Object>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<
                            IKeyValuePair<::windows::HString, ::windows::Object>,
                        >>(result__)
                    }
                }
                pub fn lookup<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<::windows::Object> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::Object>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn has_key<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn get_view(
                    &self,
                ) -> ::windows::Result<IMapView<::windows::HString, ::windows::Object>>
                {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__ : < IMapView :: < :: windows :: HString , :: windows :: Object > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IMapView<::windows::HString, ::windows::Object>>(result__)
                    }
                }
                pub fn insert<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
                >(
                    &self,
                    key: T0__,
                    value: T1__,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn remove<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn clear(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn map_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            MapChangedEventHandler<::windows::HString, ::windows::Object>,
                        >,
                    >,
                >(
                    &self,
                    vhnd: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = &::windows::Interface::cast::<
                        IObservableMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            vhnd.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_map_changed<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    &self,
                    token: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        IObservableMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            token.into().abi(),
                        )
                        .ok()
                    }
                }
                #[allow(non_snake_case)]
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        PropertySet,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for PropertySet {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for PropertySet {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for PropertySet {}
            impl ::std::fmt::Debug for PropertySet {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for PropertySet {
                const NAME: &'static str = "Windows.Foundation.Collections.PropertySet";
            }
            unsafe impl ::windows::Interface for PropertySet {
                type Vtable = IPropertySet_abi;
                const IID: ::windows::Guid = <IPropertySet as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for PropertySet {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Collections.PropertySet;{8a43ed9f-f4e6-4421-acf9-1dab2986820c})" ) ;
            }
            impl ::std::convert::From<PropertySet> for ::windows::Object {
                fn from(value: PropertySet) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&PropertySet> for ::windows::Object {
                fn from(value: &PropertySet) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for PropertySet {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a PropertySet {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<PropertySet>
                for IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>
            {
                fn from(value: PropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&PropertySet>
                for IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>
            {
                fn from(value: &PropertySet) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >,
                > for PropertySet
            {
                fn into(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >,
                > for &'a PropertySet
            {
                fn into(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<PropertySet> for IMap<::windows::HString, ::windows::Object> {
                fn from(value: PropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&PropertySet> for IMap<::windows::HString, ::windows::Object> {
                fn from(value: &PropertySet) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IMap<::windows::HString, ::windows::Object>>,
                > for PropertySet
            {
                fn into(self) -> ::windows::Param<'a, IMap<::windows::HString, ::windows::Object>> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IMap<::windows::HString, ::windows::Object>,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IMap<::windows::HString, ::windows::Object>>,
                > for &'a PropertySet
            {
                fn into(self) -> ::windows::Param<'a, IMap<::windows::HString, ::windows::Object>> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IMap<::windows::HString, ::windows::Object>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<PropertySet> for IObservableMap<::windows::HString, ::windows::Object> {
                fn from(value: PropertySet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&PropertySet> for IObservableMap<::windows::HString, ::windows::Object> {
                fn from(value: &PropertySet) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::Object>>,
                > for PropertySet
            {
                fn into(
                    self,
                ) -> ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::Object>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IObservableMap<::windows::HString, ::windows::Object>,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::Object>>,
                > for &'a PropertySet
            {
                fn into(
                    self,
                ) -> ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::Object>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IObservableMap<::windows::HString, ::windows::Object>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<PropertySet> for IPropertySet {
                fn from(value: PropertySet) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&PropertySet> for IPropertySet {
                fn from(value: &PropertySet) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IPropertySet>> for PropertySet {
                fn into(self) -> ::windows::Param<'a, IPropertySet> {
                    ::windows::Param::Owned(::std::convert::Into::<IPropertySet>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IPropertySet>> for &'a PropertySet {
                fn into(self) -> ::windows::Param<'a, IPropertySet> {
                    ::windows::Param::Owned(::std::convert::Into::<IPropertySet>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::iter::IntoIterator for PropertySet {
                type Item = IKeyValuePair<::windows::HString, ::windows::Object>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a PropertySet {
                type Item = IKeyValuePair<::windows::HString, ::windows::Object>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            unsafe impl ::std::marker::Send for PropertySet {}
            unsafe impl ::std::marker::Sync for PropertySet {}
            #[repr(transparent)]
            pub struct StringMap(::windows::Object);
            impl StringMap {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                pub fn first(
                    &self,
                ) -> ::windows::Result<
                    IIterator<IKeyValuePair<::windows::HString, ::windows::HString>>,
                > {
                    let this = &::windows::Interface::cast::<
                        IIterable<IKeyValuePair<::windows::HString, ::windows::HString>>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <IIterator<
                            IKeyValuePair<::windows::HString, ::windows::HString>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<
                            IKeyValuePair<::windows::HString, ::windows::HString>,
                        >>(result__)
                    }
                }
                pub fn lookup<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn has_key<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn get_view(
                    &self,
                ) -> ::windows::Result<IMapView<::windows::HString, ::windows::HString>>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < IMapView :: < :: windows :: HString , :: windows :: HString > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IMapView<::windows::HString, ::windows::HString>>(result__)
                    }
                }
                pub fn insert<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                    value: T1__,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn remove<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn clear(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn map_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            MapChangedEventHandler<::windows::HString, ::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    vhnd: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = &::windows::Interface::cast::<
                        IObservableMap<::windows::HString, ::windows::HString>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            vhnd.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_map_changed<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    &self,
                    token: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        IObservableMap<::windows::HString, ::windows::HString>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            token.into().abi(),
                        )
                        .ok()
                    }
                }
                #[allow(non_snake_case)]
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        StringMap,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for StringMap {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for StringMap {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for StringMap {}
            impl ::std::fmt::Debug for StringMap {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for StringMap {
                const NAME: &'static str = "Windows.Foundation.Collections.StringMap";
            }
            unsafe impl ::windows::Interface for StringMap {
                type Vtable = IMap_abi<::windows::HString, ::windows::HString>;
                const IID: ::windows::Guid =
                    <IMap<::windows::HString, ::windows::HString> as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for StringMap {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Collections.StringMap;pinterface({3c2925fe-8519-45c1-aa79-197b6718c1c1};string;string))" ) ;
            }
            impl ::std::convert::From<StringMap> for ::windows::Object {
                fn from(value: StringMap) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&StringMap> for ::windows::Object {
                fn from(value: &StringMap) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for StringMap {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a StringMap {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StringMap>
                for IIterable<IKeyValuePair<::windows::HString, ::windows::HString>>
            {
                fn from(value: StringMap) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StringMap>
                for IIterable<IKeyValuePair<::windows::HString, ::windows::HString>>
            {
                fn from(value: &StringMap) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        IIterable<IKeyValuePair<::windows::HString, ::windows::HString>>,
                    >,
                > for StringMap
            {
                fn into(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IIterable<IKeyValuePair<::windows::HString, ::windows::HString>>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IIterable<IKeyValuePair<::windows::HString, ::windows::HString>>,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        IIterable<IKeyValuePair<::windows::HString, ::windows::HString>>,
                    >,
                > for &'a StringMap
            {
                fn into(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IIterable<IKeyValuePair<::windows::HString, ::windows::HString>>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IIterable<IKeyValuePair<::windows::HString, ::windows::HString>>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<StringMap> for IMap<::windows::HString, ::windows::HString> {
                fn from(value: StringMap) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StringMap> for IMap<::windows::HString, ::windows::HString> {
                fn from(value: &StringMap) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IMap<::windows::HString, ::windows::HString>>,
                > for StringMap
            {
                fn into(
                    self,
                ) -> ::windows::Param<'a, IMap<::windows::HString, ::windows::HString>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IMap<::windows::HString, ::windows::HString>,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IMap<::windows::HString, ::windows::HString>>,
                > for &'a StringMap
            {
                fn into(
                    self,
                ) -> ::windows::Param<'a, IMap<::windows::HString, ::windows::HString>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IMap<::windows::HString, ::windows::HString>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<StringMap> for IObservableMap<::windows::HString, ::windows::HString> {
                fn from(value: StringMap) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StringMap> for IObservableMap<::windows::HString, ::windows::HString> {
                fn from(value: &StringMap) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::HString>>,
                > for StringMap
            {
                fn into(
                    self,
                ) -> ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::HString>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IObservableMap<::windows::HString, ::windows::HString>,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::HString>>,
                > for &'a StringMap
            {
                fn into(
                    self,
                ) -> ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::HString>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IObservableMap<::windows::HString, ::windows::HString>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::iter::IntoIterator for StringMap {
                type Item = IKeyValuePair<::windows::HString, ::windows::HString>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a StringMap {
                type Item = IKeyValuePair<::windows::HString, ::windows::HString>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            unsafe impl ::std::marker::Send for StringMap {}
            unsafe impl ::std::marker::Sync for StringMap {}
            #[repr(transparent)]
            pub struct ValueSet(::windows::Object);
            impl ValueSet {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                pub fn first(
                    &self,
                ) -> ::windows::Result<
                    IIterator<IKeyValuePair<::windows::HString, ::windows::Object>>,
                > {
                    let this = &::windows::Interface::cast::<
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <IIterator<
                            IKeyValuePair<::windows::HString, ::windows::Object>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<
                            IKeyValuePair<::windows::HString, ::windows::Object>,
                        >>(result__)
                    }
                }
                pub fn lookup<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<::windows::Object> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <::windows::Object as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::Object>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn has_key<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn get_view(
                    &self,
                ) -> ::windows::Result<IMapView<::windows::HString, ::windows::Object>>
                {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__ : < IMapView :: < :: windows :: HString , :: windows :: Object > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IMapView<::windows::HString, ::windows::Object>>(result__)
                    }
                }
                pub fn insert<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
                >(
                    &self,
                    key: T0__,
                    value: T1__,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn remove<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    key: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            key.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn clear(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        IMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn map_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            MapChangedEventHandler<::windows::HString, ::windows::Object>,
                        >,
                    >,
                >(
                    &self,
                    vhnd: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = &::windows::Interface::cast::<
                        IObservableMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            vhnd.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_map_changed<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    &self,
                    token: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        IObservableMap<::windows::HString, ::windows::Object>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            token.into().abi(),
                        )
                        .ok()
                    }
                }
                #[allow(non_snake_case)]
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        ValueSet,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for ValueSet {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for ValueSet {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ValueSet {}
            impl ::std::fmt::Debug for ValueSet {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for ValueSet {
                const NAME: &'static str = "Windows.Foundation.Collections.ValueSet";
            }
            unsafe impl ::windows::Interface for ValueSet {
                type Vtable = IPropertySet_abi;
                const IID: ::windows::Guid = <IPropertySet as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for ValueSet {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Collections.ValueSet;{8a43ed9f-f4e6-4421-acf9-1dab2986820c})" ) ;
            }
            impl ::std::convert::From<ValueSet> for ::windows::Object {
                fn from(value: ValueSet) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ValueSet> for ::windows::Object {
                fn from(value: &ValueSet) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ValueSet {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a ValueSet {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ValueSet>
                for IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>
            {
                fn from(value: ValueSet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ValueSet>
                for IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>
            {
                fn from(value: &ValueSet) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >,
                > for ValueSet
            {
                fn into(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >,
                > for &'a ValueSet
            {
                fn into(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IIterable<IKeyValuePair<::windows::HString, ::windows::Object>>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ValueSet> for IMap<::windows::HString, ::windows::Object> {
                fn from(value: ValueSet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ValueSet> for IMap<::windows::HString, ::windows::Object> {
                fn from(value: &ValueSet) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IMap<::windows::HString, ::windows::Object>>,
                > for ValueSet
            {
                fn into(self) -> ::windows::Param<'a, IMap<::windows::HString, ::windows::Object>> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IMap<::windows::HString, ::windows::Object>,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IMap<::windows::HString, ::windows::Object>>,
                > for &'a ValueSet
            {
                fn into(self) -> ::windows::Param<'a, IMap<::windows::HString, ::windows::Object>> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IMap<::windows::HString, ::windows::Object>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ValueSet> for IObservableMap<::windows::HString, ::windows::Object> {
                fn from(value: ValueSet) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ValueSet> for IObservableMap<::windows::HString, ::windows::Object> {
                fn from(value: &ValueSet) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::Object>>,
                > for ValueSet
            {
                fn into(
                    self,
                ) -> ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::Object>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IObservableMap<::windows::HString, ::windows::Object>,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::Object>>,
                > for &'a ValueSet
            {
                fn into(
                    self,
                ) -> ::windows::Param<'a, IObservableMap<::windows::HString, ::windows::Object>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IObservableMap<::windows::HString, ::windows::Object>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ValueSet> for IPropertySet {
                fn from(value: ValueSet) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ValueSet> for IPropertySet {
                fn from(value: &ValueSet) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IPropertySet>> for ValueSet {
                fn into(self) -> ::windows::Param<'a, IPropertySet> {
                    ::windows::Param::Owned(::std::convert::Into::<IPropertySet>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IPropertySet>> for &'a ValueSet {
                fn into(self) -> ::windows::Param<'a, IPropertySet> {
                    ::windows::Param::Owned(::std::convert::Into::<IPropertySet>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::iter::IntoIterator for ValueSet {
                type Item = IKeyValuePair<::windows::HString, ::windows::Object>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a ValueSet {
                type Item = IKeyValuePair<::windows::HString, ::windows::Object>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            unsafe impl ::std::marker::Send for ValueSet {}
            unsafe impl ::std::marker::Sync for ValueSet {}
        }
        #[allow(unused_variables)]
        #[allow(non_upper_case_globals)]
        pub mod diagnostics {
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct CausalityTraceLevel(pub i32);
            impl ::std::convert::From<i32> for CausalityTraceLevel {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for CausalityTraceLevel {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for CausalityTraceLevel {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for CausalityTraceLevel {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for CausalityTraceLevel {}
            impl CausalityTraceLevel {
                #![allow(non_upper_case_globals)]
                pub const Required: Self = Self(0i32);
                pub const Important: Self = Self(1i32);
                pub const Verbose: Self = Self(2i32);
            }
            unsafe impl ::windows::Abi for CausalityTraceLevel {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for CausalityTraceLevel {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Foundation.Diagnostics.CausalityTraceLevel;i4)",
                );
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct CausalitySource(pub i32);
            impl ::std::convert::From<i32> for CausalitySource {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for CausalitySource {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for CausalitySource {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for CausalitySource {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for CausalitySource {}
            impl CausalitySource {
                #![allow(non_upper_case_globals)]
                pub const Application: Self = Self(0i32);
                pub const Library: Self = Self(1i32);
                pub const System: Self = Self(2i32);
            }
            unsafe impl ::windows::Abi for CausalitySource {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for CausalitySource {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Foundation.Diagnostics.CausalitySource;i4)",
                );
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct CausalityRelation(pub i32);
            impl ::std::convert::From<i32> for CausalityRelation {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for CausalityRelation {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for CausalityRelation {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for CausalityRelation {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for CausalityRelation {}
            impl CausalityRelation {
                #![allow(non_upper_case_globals)]
                pub const AssignDelegate: Self = Self(0i32);
                pub const Join: Self = Self(1i32);
                pub const Choice: Self = Self(2i32);
                pub const Cancel: Self = Self(3i32);
                pub const Error: Self = Self(4i32);
            }
            unsafe impl ::windows::Abi for CausalityRelation {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for CausalityRelation {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Foundation.Diagnostics.CausalityRelation;i4)",
                );
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct CausalitySynchronousWork(pub i32);
            impl ::std::convert::From<i32> for CausalitySynchronousWork {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for CausalitySynchronousWork {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for CausalitySynchronousWork {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for CausalitySynchronousWork {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for CausalitySynchronousWork {}
            impl CausalitySynchronousWork {
                #![allow(non_upper_case_globals)]
                pub const CompletionNotification: Self = Self(0i32);
                pub const ProgressNotification: Self = Self(1i32);
                pub const Execution: Self = Self(2i32);
            }
            unsafe impl ::windows::Abi for CausalitySynchronousWork {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for CausalitySynchronousWork {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Foundation.Diagnostics.CausalitySynchronousWork;i4)",
                );
            }
            #[repr(transparent)]
            pub struct ITracingStatusChangedEventArgs(::windows::Object);
            impl ::std::clone::Clone for ITracingStatusChangedEventArgs {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ITracingStatusChangedEventArgs {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ITracingStatusChangedEventArgs {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ITracingStatusChangedEventArgs {}
            impl ITracingStatusChangedEventArgs {
                pub fn enabled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn trace_level(&self) -> ::windows::Result<CausalityTraceLevel> {
                    let this = self;
                    unsafe {
                        let mut result__: <CausalityTraceLevel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<CausalityTraceLevel>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for ITracingStatusChangedEventArgs {
                type Vtable = ITracingStatusChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1091270417,
                    65339,
                    18303,
                    [156, 154, 210, 239, 218, 48, 45, 195],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ITracingStatusChangedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut CausalityTraceLevel,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ITracingStatusChangedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{410b7711-ff3b-477f-9c9a-d2efda302dc3}")
                };
            }
            impl ::std::convert::From<ITracingStatusChangedEventArgs> for ::windows::Object {
                fn from(value: ITracingStatusChangedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ITracingStatusChangedEventArgs> for ::windows::Object {
                fn from(value: &ITracingStatusChangedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for ITracingStatusChangedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a ITracingStatusChangedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct TracingStatusChangedEventArgs(::windows::Object);
            impl TracingStatusChangedEventArgs {
                pub fn enabled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn trace_level(&self) -> ::windows::Result<CausalityTraceLevel> {
                    let this = self;
                    unsafe {
                        let mut result__: <CausalityTraceLevel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<CausalityTraceLevel>(result__)
                    }
                }
            }
            impl ::std::clone::Clone for TracingStatusChangedEventArgs {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for TracingStatusChangedEventArgs {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for TracingStatusChangedEventArgs {}
            impl ::std::fmt::Debug for TracingStatusChangedEventArgs {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for TracingStatusChangedEventArgs {
                const NAME: &'static str =
                    "Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs";
            }
            unsafe impl ::windows::Interface for TracingStatusChangedEventArgs {
                type Vtable = ITracingStatusChangedEventArgs_abi;
                const IID: ::windows::Guid =
                    <ITracingStatusChangedEventArgs as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for TracingStatusChangedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs;{410b7711-ff3b-477f-9c9a-d2efda302dc3})" ) ;
            }
            impl ::std::convert::From<TracingStatusChangedEventArgs> for ::windows::Object {
                fn from(value: TracingStatusChangedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&TracingStatusChangedEventArgs> for ::windows::Object {
                fn from(value: &TracingStatusChangedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for TracingStatusChangedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a TracingStatusChangedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<TracingStatusChangedEventArgs> for ITracingStatusChangedEventArgs {
                fn from(value: TracingStatusChangedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&TracingStatusChangedEventArgs> for ITracingStatusChangedEventArgs {
                fn from(value: &TracingStatusChangedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ITracingStatusChangedEventArgs>>
                for TracingStatusChangedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ITracingStatusChangedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ITracingStatusChangedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ITracingStatusChangedEventArgs>>
                for &'a TracingStatusChangedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ITracingStatusChangedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ITracingStatusChangedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for TracingStatusChangedEventArgs {}
            unsafe impl ::std::marker::Sync for TracingStatusChangedEventArgs {}
            #[repr(transparent)]
            pub struct IAsyncCausalityTracerStatics(::windows::Object);
            impl ::std::clone::Clone for IAsyncCausalityTracerStatics {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IAsyncCausalityTracerStatics {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IAsyncCausalityTracerStatics {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IAsyncCausalityTracerStatics {}
            impl IAsyncCausalityTracerStatics {
                pub fn trace_operation_creation<
                    'a,
                    T2__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                    T4__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    platform_id: T2__,
                    operation_id: u64,
                    operation_name: T4__,
                    related_context: u64,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            trace_level,
                            source,
                            platform_id.into().abi(),
                            operation_id,
                            operation_name.into().abi(),
                            related_context,
                        )
                        .ok()
                    }
                }
                pub fn trace_operation_completion<
                    'a,
                    T2__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    platform_id: T2__,
                    operation_id: u64,
                    status: super::AsyncStatus,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            trace_level,
                            source,
                            platform_id.into().abi(),
                            operation_id,
                            status,
                        )
                        .ok()
                    }
                }
                pub fn trace_operation_relation<
                    'a,
                    T2__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    platform_id: T2__,
                    operation_id: u64,
                    relation: CausalityRelation,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            trace_level,
                            source,
                            platform_id.into().abi(),
                            operation_id,
                            relation,
                        )
                        .ok()
                    }
                }
                pub fn trace_synchronous_work_start<
                    'a,
                    T2__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    platform_id: T2__,
                    operation_id: u64,
                    work: CausalitySynchronousWork,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            trace_level,
                            source,
                            platform_id.into().abi(),
                            operation_id,
                            work,
                        )
                        .ok()
                    }
                }
                pub fn trace_synchronous_work_completion(
                    &self,
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    work: CausalitySynchronousWork,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            trace_level,
                            source,
                            work,
                        )
                        .ok()
                    }
                }
                pub fn tracing_status_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::EventHandler<TracingStatusChangedEventArgs>>,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = self;
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_tracing_status_changed<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    &self,
                    cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            cookie.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for IAsyncCausalityTracerStatics {
                type Vtable = IAsyncCausalityTracerStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1350896422,
                    9854,
                    17691,
                    [168, 144, 171, 106, 55, 2, 69, 238],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IAsyncCausalityTracerStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    platform_id: ::windows::Guid,
                    operation_id: u64,
                    operation_name: ::windows::RawPtr,
                    related_context: u64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    platform_id: ::windows::Guid,
                    operation_id: u64,
                    status: super::AsyncStatus,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    platform_id: ::windows::Guid,
                    operation_id: u64,
                    relation: CausalityRelation,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    platform_id: ::windows::Guid,
                    operation_id: u64,
                    work: CausalitySynchronousWork,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    work: CausalitySynchronousWork,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    cookie: super::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IAsyncCausalityTracerStatics {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{50850b26-267e-451b-a890-ab6a370245ee}")
                };
            }
            impl ::std::convert::From<IAsyncCausalityTracerStatics> for ::windows::Object {
                fn from(value: IAsyncCausalityTracerStatics) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IAsyncCausalityTracerStatics> for ::windows::Object {
                fn from(value: &IAsyncCausalityTracerStatics) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IAsyncCausalityTracerStatics
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IAsyncCausalityTracerStatics
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            pub struct AsyncCausalityTracer {}
            impl AsyncCausalityTracer {
                pub fn trace_operation_creation<
                    'a,
                    T2__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                    T4__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    platform_id: T2__,
                    operation_id: u64,
                    operation_name: T4__,
                    related_context: u64,
                ) -> ::windows::Result<()> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            trace_level,
                            source,
                            platform_id.into().abi(),
                            operation_id,
                            operation_name.into().abi(),
                            related_context,
                        )
                        .ok()
                    })
                }
                pub fn trace_operation_completion<
                    'a,
                    T2__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    platform_id: T2__,
                    operation_id: u64,
                    status: super::AsyncStatus,
                ) -> ::windows::Result<()> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            trace_level,
                            source,
                            platform_id.into().abi(),
                            operation_id,
                            status,
                        )
                        .ok()
                    })
                }
                pub fn trace_operation_relation<
                    'a,
                    T2__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    platform_id: T2__,
                    operation_id: u64,
                    relation: CausalityRelation,
                ) -> ::windows::Result<()> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            trace_level,
                            source,
                            platform_id.into().abi(),
                            operation_id,
                            relation,
                        )
                        .ok()
                    })
                }
                pub fn trace_synchronous_work_start<
                    'a,
                    T2__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    platform_id: T2__,
                    operation_id: u64,
                    work: CausalitySynchronousWork,
                ) -> ::windows::Result<()> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            trace_level,
                            source,
                            platform_id.into().abi(),
                            operation_id,
                            work,
                        )
                        .ok()
                    })
                }
                pub fn trace_synchronous_work_completion(
                    trace_level: CausalityTraceLevel,
                    source: CausalitySource,
                    work: CausalitySynchronousWork,
                ) -> ::windows::Result<()> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            trace_level,
                            source,
                            work,
                        )
                        .ok()
                    })
                }
                pub fn tracing_status_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::EventHandler<TracingStatusChangedEventArgs>>,
                    >,
                >(
                    handler: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    })
                }
                pub fn remove_tracing_status_changed<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    cookie: T0__,
                ) -> ::windows::Result<()> {
                    Self::IAsyncCausalityTracerStatics(|this| unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            cookie.into().abi(),
                        )
                        .ok()
                    })
                }
                #[allow(non_snake_case)]
                fn IAsyncCausalityTracerStatics<
                    R,
                    F: FnOnce(&IAsyncCausalityTracerStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        AsyncCausalityTracer,
                        IAsyncCausalityTracerStatics,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::windows::RuntimeName for AsyncCausalityTracer {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.AsyncCausalityTracer";
            }
            #[repr(transparent)]
            pub struct IErrorDetails(::windows::Object);
            impl ::std::clone::Clone for IErrorDetails {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IErrorDetails {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IErrorDetails {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IErrorDetails {}
            impl IErrorDetails {
                pub fn description(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn long_description(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn help_uri(&self) -> ::windows::Result<super::Uri> {
                    let this = self;
                    unsafe {
                        let mut result__: <super::Uri as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::Uri>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IErrorDetails {
                type Vtable = IErrorDetails_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    931969793,
                    11465,
                    17039,
                    [140, 85, 44, 153, 13, 70, 62, 143],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IErrorDetails_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IErrorDetails {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{378cbb01-2cc9-428f-8c55-2c990d463e8f}")
                };
            }
            impl ::std::convert::From<IErrorDetails> for ::windows::Object {
                fn from(value: IErrorDetails) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IErrorDetails> for ::windows::Object {
                fn from(value: &IErrorDetails) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IErrorDetails {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IErrorDetails {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IErrorDetailsStatics(::windows::Object);
            impl ::std::clone::Clone for IErrorDetailsStatics {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IErrorDetailsStatics {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IErrorDetailsStatics {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IErrorDetailsStatics {}
            impl IErrorDetailsStatics {
                pub fn create_from_hresult_async(
                    &self,
                    error_code: i32,
                ) -> ::windows::Result<super::IAsyncOperation<ErrorDetails>> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: IAsyncOperation :: < ErrorDetails > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            error_code,
                            &mut result__,
                        )
                        .from_abi::<super::IAsyncOperation<ErrorDetails>>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IErrorDetailsStatics {
                type Vtable = IErrorDetailsStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3077584720,
                    2845,
                    18120,
                    [170, 14, 75, 129, 120, 228, 252, 233],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IErrorDetailsStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    error_code: i32,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IErrorDetailsStatics {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{b7703750-0b1d-46c8-aa0e-4b8178e4fce9}")
                };
            }
            impl ::std::convert::From<IErrorDetailsStatics> for ::windows::Object {
                fn from(value: IErrorDetailsStatics) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IErrorDetailsStatics> for ::windows::Object {
                fn from(value: &IErrorDetailsStatics) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IErrorDetailsStatics {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IErrorDetailsStatics
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct ErrorDetails(::windows::Object);
            impl ErrorDetails {
                pub fn description(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn long_description(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn help_uri(&self) -> ::windows::Result<super::Uri> {
                    let this = self;
                    unsafe {
                        let mut result__: <super::Uri as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::Uri>(result__)
                    }
                }
                pub fn create_from_hresult_async(
                    error_code: i32,
                ) -> ::windows::Result<super::IAsyncOperation<ErrorDetails>> {
                    Self::IErrorDetailsStatics(|this| unsafe {
                        let mut result__ : < super :: IAsyncOperation :: < ErrorDetails > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            error_code,
                            &mut result__,
                        )
                        .from_abi::<super::IAsyncOperation<ErrorDetails>>(result__)
                    })
                }
                #[allow(non_snake_case)]
                fn IErrorDetailsStatics<
                    R,
                    F: FnOnce(&IErrorDetailsStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<ErrorDetails, IErrorDetailsStatics> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for ErrorDetails {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for ErrorDetails {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ErrorDetails {}
            impl ::std::fmt::Debug for ErrorDetails {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for ErrorDetails {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.ErrorDetails";
            }
            unsafe impl ::windows::Interface for ErrorDetails {
                type Vtable = IErrorDetails_abi;
                const IID: ::windows::Guid = <IErrorDetails as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for ErrorDetails {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Diagnostics.ErrorDetails;{378cbb01-2cc9-428f-8c55-2c990d463e8f})" ) ;
            }
            impl ::std::convert::From<ErrorDetails> for ::windows::Object {
                fn from(value: ErrorDetails) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ErrorDetails> for ::windows::Object {
                fn from(value: &ErrorDetails) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ErrorDetails {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a ErrorDetails {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ErrorDetails> for IErrorDetails {
                fn from(value: ErrorDetails) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ErrorDetails> for IErrorDetails {
                fn from(value: &ErrorDetails) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IErrorDetails>> for ErrorDetails {
                fn into(self) -> ::windows::Param<'a, IErrorDetails> {
                    ::windows::Param::Owned(::std::convert::Into::<IErrorDetails>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IErrorDetails>> for &'a ErrorDetails {
                fn into(self) -> ::windows::Param<'a, IErrorDetails> {
                    ::windows::Param::Owned(::std::convert::Into::<IErrorDetails>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for ErrorDetails {}
            unsafe impl ::std::marker::Sync for ErrorDetails {}
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct ErrorOptions(pub u32);
            impl ::std::convert::From<u32> for ErrorOptions {
                fn from(value: u32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for ErrorOptions {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for ErrorOptions {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for ErrorOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for ErrorOptions {}
            impl ErrorOptions {
                #![allow(non_upper_case_globals)]
                pub const None: Self = Self(0u32);
                pub const SuppressExceptions: Self = Self(1u32);
                pub const ForceExceptions: Self = Self(2u32);
                pub const UseSetErrorInfo: Self = Self(4u32);
                pub const SuppressSetErrorInfo: Self = Self(8u32);
            }
            unsafe impl ::windows::Abi for ErrorOptions {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ErrorOptions {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Foundation.Diagnostics.ErrorOptions;u4)",
                );
            }
            impl ::std::ops::BitOr for ErrorOptions {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self(self.0 | rhs.0)
                }
            }
            impl ::std::ops::BitAnd for ErrorOptions {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self(self.0 & rhs.0)
                }
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct LoggingLevel(pub i32);
            impl ::std::convert::From<i32> for LoggingLevel {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for LoggingLevel {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for LoggingLevel {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for LoggingLevel {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for LoggingLevel {}
            impl LoggingLevel {
                #![allow(non_upper_case_globals)]
                pub const Verbose: Self = Self(0i32);
                pub const Information: Self = Self(1i32);
                pub const Warning: Self = Self(2i32);
                pub const Error: Self = Self(3i32);
                pub const Critical: Self = Self(4i32);
            }
            unsafe impl ::windows::Abi for LoggingLevel {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for LoggingLevel {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Foundation.Diagnostics.LoggingLevel;i4)",
                );
            }
            #[repr(transparent)]
            pub struct ILoggingChannel(::windows::Object);
            impl ::std::clone::Clone for ILoggingChannel {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingChannel {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingChannel {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingChannel {}
            impl ILoggingChannel {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<super::IClosable>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn name(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn enabled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn level(&self) -> ::windows::Result<LoggingLevel> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingLevel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<LoggingLevel>(result__)
                    }
                }
                pub fn log_message<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    event_string: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_string.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_message_with_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    event_string: T0__,
                    level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            event_string.into().abi(),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn log_value_pair<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value1: T0__,
                    value2: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            value1.into().abi(),
                            value2,
                        )
                        .ok()
                    }
                }
                pub fn log_value_pair_with_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value1: T0__,
                    value2: i32,
                    level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value1.into().abi(),
                            value2,
                            level,
                        )
                        .ok()
                    }
                }
                pub fn logging_enabled<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::TypedEventHandler<ILoggingChannel, ::windows::Object>,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = self;
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_logging_enabled<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    &self,
                    token: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            token.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingChannel {
                type Vtable = ILoggingChannel_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3919905603,
                    4567,
                    20225,
                    [181, 202, 207, 73, 82, 120, 192, 168],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingChannel_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut LoggingLevel,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    event_string: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    event_string: ::windows::RawPtr,
                    level: LoggingLevel,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value1: ::windows::RawPtr,
                    value2: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value1: ::windows::RawPtr,
                    value2: i32,
                    level: LoggingLevel,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingChannel {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{e9a50343-11d7-4f01-b5ca-cf495278c0a8}")
                };
            }
            impl ::std::convert::From<ILoggingChannel> for ::windows::Object {
                fn from(value: ILoggingChannel) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingChannel> for ::windows::Object {
                fn from(value: &ILoggingChannel) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingChannel {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a ILoggingChannel {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ILoggingChannel> for super::IClosable {
                fn from(value: ILoggingChannel) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILoggingChannel> for super::IClosable {
                fn from(value: &ILoggingChannel) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for ILoggingChannel {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for &'a ILoggingChannel {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct ILogFileGeneratedEventArgs(::windows::Object);
            impl ::std::clone::Clone for ILogFileGeneratedEventArgs {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILogFileGeneratedEventArgs {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILogFileGeneratedEventArgs {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILogFileGeneratedEventArgs {}
            impl ILogFileGeneratedEventArgs {
                pub fn file(&self) -> ::windows::Result<super::super::storage::StorageFile> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: storage :: StorageFile as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::storage::StorageFile>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for ILogFileGeneratedEventArgs {
                type Vtable = ILogFileGeneratedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    647927663,
                    3384,
                    19482,
                    [181, 63, 179, 149, 216, 129, 223, 132],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILogFileGeneratedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILogFileGeneratedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{269e976f-0d38-4c1a-b53f-b395d881df84}")
                };
            }
            impl ::std::convert::From<ILogFileGeneratedEventArgs> for ::windows::Object {
                fn from(value: ILogFileGeneratedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILogFileGeneratedEventArgs> for ::windows::Object {
                fn from(value: &ILogFileGeneratedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for ILogFileGeneratedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a ILogFileGeneratedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct LogFileGeneratedEventArgs(::windows::Object);
            impl LogFileGeneratedEventArgs {
                pub fn file(&self) -> ::windows::Result<super::super::storage::StorageFile> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: storage :: StorageFile as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::storage::StorageFile>(result__)
                    }
                }
            }
            impl ::std::clone::Clone for LogFileGeneratedEventArgs {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for LogFileGeneratedEventArgs {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for LogFileGeneratedEventArgs {}
            impl ::std::fmt::Debug for LogFileGeneratedEventArgs {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for LogFileGeneratedEventArgs {
                const NAME: &'static str =
                    "Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs";
            }
            unsafe impl ::windows::Interface for LogFileGeneratedEventArgs {
                type Vtable = ILogFileGeneratedEventArgs_abi;
                const IID: ::windows::Guid =
                    <ILogFileGeneratedEventArgs as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for LogFileGeneratedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs;{269e976f-0d38-4c1a-b53f-b395d881df84})" ) ;
            }
            impl ::std::convert::From<LogFileGeneratedEventArgs> for ::windows::Object {
                fn from(value: LogFileGeneratedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&LogFileGeneratedEventArgs> for ::windows::Object {
                fn from(value: &LogFileGeneratedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for LogFileGeneratedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a LogFileGeneratedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LogFileGeneratedEventArgs> for ILogFileGeneratedEventArgs {
                fn from(value: LogFileGeneratedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&LogFileGeneratedEventArgs> for ILogFileGeneratedEventArgs {
                fn from(value: &LogFileGeneratedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILogFileGeneratedEventArgs>>
                for LogFileGeneratedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ILogFileGeneratedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILogFileGeneratedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILogFileGeneratedEventArgs>>
                for &'a LogFileGeneratedEventArgs
            {
                fn into(self) -> ::windows::Param<'a, ILogFileGeneratedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILogFileGeneratedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for LogFileGeneratedEventArgs {}
            unsafe impl ::std::marker::Sync for LogFileGeneratedEventArgs {}
            #[repr(transparent)]
            pub struct IFileLoggingSession(::windows::Object);
            impl ::std::clone::Clone for IFileLoggingSession {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IFileLoggingSession {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IFileLoggingSession {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IFileLoggingSession {}
            impl IFileLoggingSession {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<super::IClosable>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn name(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn add_logging_channel<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    logging_channel: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            logging_channel.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_logging_channel_with_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    logging_channel: T0__,
                    max_level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            logging_channel.into().abi(),
                            max_level,
                        )
                        .ok()
                    }
                }
                pub fn remove_logging_channel<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    logging_channel: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            logging_channel.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn close_and_save_to_file_async(
                    &self,
                ) -> ::windows::Result<super::IAsyncOperation<super::super::storage::StorageFile>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::IAsyncOperation<
                            super::super::storage::StorageFile,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::IAsyncOperation<
                            super::super::storage::StorageFile,
                        >>(result__)
                    }
                }
                pub fn log_file_generated<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::TypedEventHandler<
                                IFileLoggingSession,
                                LogFileGeneratedEventArgs,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = self;
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_log_file_generated<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    &self,
                    token: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            token.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for IFileLoggingSession {
                type Vtable = IFileLoggingSession_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    617038358,
                    65234,
                    16460,
                    [137, 95, 31, 150, 153, 203, 2, 247],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFileLoggingSession_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    logging_channel: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    logging_channel: ::windows::RawPtr,
                    max_level: LoggingLevel,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    logging_channel: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IFileLoggingSession {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{24c74216-fed2-404c-895f-1f9699cb02f7}")
                };
            }
            impl ::std::convert::From<IFileLoggingSession> for ::windows::Object {
                fn from(value: IFileLoggingSession) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFileLoggingSession> for ::windows::Object {
                fn from(value: &IFileLoggingSession) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IFileLoggingSession {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IFileLoggingSession {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IFileLoggingSession> for super::IClosable {
                fn from(value: IFileLoggingSession) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFileLoggingSession> for super::IClosable {
                fn from(value: &IFileLoggingSession) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for IFileLoggingSession {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for &'a IFileLoggingSession {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IFileLoggingSessionFactory(::windows::Object);
            impl ::std::clone::Clone for IFileLoggingSessionFactory {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IFileLoggingSessionFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IFileLoggingSessionFactory {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IFileLoggingSessionFactory {}
            impl IFileLoggingSessionFactory {
                pub fn create<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                ) -> ::windows::Result<FileLoggingSession> {
                    let this = self;
                    unsafe {
                        let mut result__: <FileLoggingSession as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<FileLoggingSession>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IFileLoggingSessionFactory {
                type Vtable = IFileLoggingSessionFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4003499470,
                    33863,
                    19882,
                    [145, 51, 18, 235, 70, 246, 151, 212],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFileLoggingSessionFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IFileLoggingSessionFactory {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{eea08dce-8447-4daa-9133-12eb46f697d4}")
                };
            }
            impl ::std::convert::From<IFileLoggingSessionFactory> for ::windows::Object {
                fn from(value: IFileLoggingSessionFactory) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFileLoggingSessionFactory> for ::windows::Object {
                fn from(value: &IFileLoggingSessionFactory) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IFileLoggingSessionFactory
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IFileLoggingSessionFactory
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct FileLoggingSession(::windows::Object);
            impl FileLoggingSession {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<super::IClosable>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn name(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn add_logging_channel<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    logging_channel: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            logging_channel.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_logging_channel_with_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    logging_channel: T0__,
                    max_level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            logging_channel.into().abi(),
                            max_level,
                        )
                        .ok()
                    }
                }
                pub fn remove_logging_channel<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    logging_channel: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            logging_channel.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn close_and_save_to_file_async(
                    &self,
                ) -> ::windows::Result<super::IAsyncOperation<super::super::storage::StorageFile>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::IAsyncOperation<
                            super::super::storage::StorageFile,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::IAsyncOperation<
                            super::super::storage::StorageFile,
                        >>(result__)
                    }
                }
                pub fn log_file_generated<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::TypedEventHandler<
                                IFileLoggingSession,
                                LogFileGeneratedEventArgs,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = self;
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_log_file_generated<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    &self,
                    token: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            token.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn create<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    name: T0__,
                ) -> ::windows::Result<FileLoggingSession> {
                    Self::IFileLoggingSessionFactory(|this| unsafe {
                        let mut result__: <FileLoggingSession as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<FileLoggingSession>(result__)
                    })
                }
                #[allow(non_snake_case)]
                fn IFileLoggingSessionFactory<
                    R,
                    F: FnOnce(&IFileLoggingSessionFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        FileLoggingSession,
                        IFileLoggingSessionFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for FileLoggingSession {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for FileLoggingSession {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for FileLoggingSession {}
            impl ::std::fmt::Debug for FileLoggingSession {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for FileLoggingSession {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.FileLoggingSession";
            }
            unsafe impl ::windows::Interface for FileLoggingSession {
                type Vtable = IFileLoggingSession_abi;
                const IID: ::windows::Guid = <IFileLoggingSession as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for FileLoggingSession {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Diagnostics.FileLoggingSession;{24c74216-fed2-404c-895f-1f9699cb02f7})" ) ;
            }
            impl ::std::convert::From<FileLoggingSession> for ::windows::Object {
                fn from(value: FileLoggingSession) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&FileLoggingSession> for ::windows::Object {
                fn from(value: &FileLoggingSession) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for FileLoggingSession {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a FileLoggingSession {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<FileLoggingSession> for super::IClosable {
                fn from(value: FileLoggingSession) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileLoggingSession> for super::IClosable {
                fn from(value: &FileLoggingSession) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for FileLoggingSession {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for &'a FileLoggingSession {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<FileLoggingSession> for IFileLoggingSession {
                fn from(value: FileLoggingSession) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&FileLoggingSession> for IFileLoggingSession {
                fn from(value: &FileLoggingSession) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IFileLoggingSession>> for FileLoggingSession {
                fn into(self) -> ::windows::Param<'a, IFileLoggingSession> {
                    ::windows::Param::Owned(::std::convert::Into::<IFileLoggingSession>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IFileLoggingSession>>
                for &'a FileLoggingSession
            {
                fn into(self) -> ::windows::Param<'a, IFileLoggingSession> {
                    ::windows::Param::Owned(::std::convert::Into::<IFileLoggingSession>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for FileLoggingSession {}
            unsafe impl ::std::marker::Sync for FileLoggingSession {}
            #[repr(transparent)]
            pub struct IErrorReportingSettings(::windows::Object);
            impl ::std::clone::Clone for IErrorReportingSettings {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IErrorReportingSettings {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IErrorReportingSettings {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IErrorReportingSettings {}
            impl IErrorReportingSettings {
                pub fn set_error_options(&self, value: ErrorOptions) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn get_error_options(&self) -> ::windows::Result<ErrorOptions> {
                    let this = self;
                    unsafe {
                        let mut result__: <ErrorOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ErrorOptions>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IErrorReportingSettings {
                type Vtable = IErrorReportingSettings_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    372676498,
                    45118,
                    19361,
                    [139, 184, 210, 143, 74, 180, 210, 192],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IErrorReportingSettings_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ErrorOptions,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ErrorOptions,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IErrorReportingSettings {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{16369792-b03e-4ba1-8bb8-d28f4ab4d2c0}")
                };
            }
            impl ::std::convert::From<IErrorReportingSettings> for ::windows::Object {
                fn from(value: IErrorReportingSettings) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IErrorReportingSettings> for ::windows::Object {
                fn from(value: &IErrorReportingSettings) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IErrorReportingSettings {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IErrorReportingSettings
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct ILoggingActivity(::windows::Object);
            impl ::std::clone::Clone for ILoggingActivity {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingActivity {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingActivity {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingActivity {}
            impl ILoggingActivity {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<super::IClosable>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn name(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn id(&self) -> ::windows::Result<::windows::Guid> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::Guid>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingActivity {
                type Vtable = ILoggingActivity_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3154323777,
                    46950,
                    19637,
                    [152, 72, 151, 172, 107, 166, 214, 12],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingActivity_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingActivity {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{bc032941-b766-4cb5-9848-97ac6ba6d60c}")
                };
            }
            impl ::std::convert::From<ILoggingActivity> for ::windows::Object {
                fn from(value: ILoggingActivity) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingActivity> for ::windows::Object {
                fn from(value: &ILoggingActivity) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingActivity {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a ILoggingActivity {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ILoggingActivity> for super::IClosable {
                fn from(value: ILoggingActivity) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILoggingActivity> for super::IClosable {
                fn from(value: &ILoggingActivity) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for ILoggingActivity {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for &'a ILoggingActivity {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct LoggingFieldFormat(pub i32);
            impl ::std::convert::From<i32> for LoggingFieldFormat {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for LoggingFieldFormat {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for LoggingFieldFormat {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for LoggingFieldFormat {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for LoggingFieldFormat {}
            impl LoggingFieldFormat {
                #![allow(non_upper_case_globals)]
                pub const Default: Self = Self(0i32);
                pub const Hidden: Self = Self(1i32);
                pub const String: Self = Self(2i32);
                pub const Boolean: Self = Self(3i32);
                pub const Hexadecimal: Self = Self(4i32);
                pub const ProcessId: Self = Self(5i32);
                pub const ThreadId: Self = Self(6i32);
                pub const Port: Self = Self(7i32);
                pub const Ipv4Address: Self = Self(8i32);
                pub const Ipv6Address: Self = Self(9i32);
                pub const SocketAddress: Self = Self(10i32);
                pub const Xml: Self = Self(11i32);
                pub const Json: Self = Self(12i32);
                pub const Win32Error: Self = Self(13i32);
                pub const NTStatus: Self = Self(14i32);
                pub const HResult: Self = Self(15i32);
                pub const FileTime: Self = Self(16i32);
                pub const Signed: Self = Self(17i32);
                pub const Unsigned: Self = Self(18i32);
            }
            unsafe impl ::windows::Abi for LoggingFieldFormat {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for LoggingFieldFormat {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Foundation.Diagnostics.LoggingFieldFormat;i4)",
                );
            }
            #[repr(transparent)]
            pub struct ILoggingFields(::windows::Object);
            impl ::std::clone::Clone for ILoggingFields {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingFields {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingFields {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingFields {}
            impl ILoggingFields {
                pub fn clear(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn begin_struct<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn begin_struct_with_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn end_struct(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn add_empty<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_empty_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_empty_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint8<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u8,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_uint8_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u8,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint8_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u8,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint8_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u8 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_uint8_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u8 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint8_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u8 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_int16<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i16,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_int16_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i16,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_int16_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_int16_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i16 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).22)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_int16_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i16 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).23)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_int16_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i16 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).24)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint16<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u16,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).25)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_uint16_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u16,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).26)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint16_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).27)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint16_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u16 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).28)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_uint16_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u16 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).29)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint16_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u16 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).30)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_int32<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).31)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_int32_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i32,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).32)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_int32_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).33)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_int32_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i32 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).34)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_int32_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i32 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).35)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_int32_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i32 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).36)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint32<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).37)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_uint32_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u32,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).38)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint32_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).39)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint32_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u32 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).40)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_uint32_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u32 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).41)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint32_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u32 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).42)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_int64<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i64,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).43)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_int64_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i64,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).44)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_int64_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).45)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_int64_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i64 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).46)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_int64_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i64 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).47)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_int64_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i64 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).48)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint64<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u64,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).49)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_uint64_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u64,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).50)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint64_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).51)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint64_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u64 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).52)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_uint64_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u64 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).53)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint64_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u64 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).54)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_single<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: f32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).55)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_single_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: f32,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).56)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_single_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: f32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).57)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_single_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<f32 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).58)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_single_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<f32 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).59)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_single_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<f32 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).60)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_double<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: f64,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).61)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_double_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: f64,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).62)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_double_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: f64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).63)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_double_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<f64 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).64)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_double_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<f64 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).65)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_double_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<f64 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).66)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_char16<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u16,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).67)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_char16_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u16,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).68)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_char16_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).69)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_char16_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u16 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).70)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_char16_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u16 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).71)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_char16_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u16 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).72)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_boolean<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: bool,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).73)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_boolean_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: bool,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).74)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_boolean_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: bool,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).75)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_boolean_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<bool as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).76)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_boolean_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<bool as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).77)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_boolean_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<bool as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).78)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_string<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).79)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_string_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).80)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_string_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).81)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_string_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<::windows::HString as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).82)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_string_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<::windows::HString as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).83)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_string_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<::windows::HString as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).84)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_guid<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).85)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_guid_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).86)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_guid_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).87)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_guid_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<::windows::Guid as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).88)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_guid_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<::windows::Guid as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).89)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_guid_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<::windows::Guid as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).90)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_date_time<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::DateTime>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).91)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_date_time_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::DateTime>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).92)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_date_time_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::DateTime>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).93)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_date_time_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::DateTime as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).94)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_date_time_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::DateTime as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).95)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_date_time_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::DateTime as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).96)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_time_span<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::TimeSpan>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).97)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_time_span_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::TimeSpan>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).98)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_time_span_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::TimeSpan>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).99)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_time_span_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::TimeSpan as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).100)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_time_span_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::TimeSpan as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).101)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_time_span_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::TimeSpan as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).102)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_point<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Point>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).103)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_point_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Point>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).104)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_point_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Point>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).105)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_point_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Point as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).106)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_point_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Point as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).107)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_point_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Point as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).108)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_size<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Size>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).109)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_size_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Size>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).110)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_size_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Size>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).111)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_size_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Size as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).112)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_size_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Size as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).113)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_size_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Size as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).114)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_rect<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Rect>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).115)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_rect_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Rect>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).116)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_rect_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Rect>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).117)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_rect_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Rect as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).118)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_rect_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Rect as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).119)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_rect_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Rect as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).120)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingFields {
                type Vtable = ILoggingFields_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3623270319,
                    30253,
                    17785,
                    [131, 189, 82, 194, 59, 195, 51, 188],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingFields_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u8,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u8,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u8,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u8,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u8,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u8,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: i16,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: i16,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: i16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const i16,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const i16,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const i16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u16,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u16,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u16,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u16,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: i32,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: i32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const i32,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const i32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u32,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u32,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: i64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: i64,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: i64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const i64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const i64,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const i64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u64,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u64,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: f32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: f32,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: f32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const f32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const f32,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const f32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: f64,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: f64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const f64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const f64,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const f64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u16,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u16,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: u16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u16,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u16,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const u16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: bool,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: bool,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const bool,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const bool,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const ::windows::RawPtr,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const ::windows::RawPtr,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: ::windows::Guid,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: ::windows::Guid,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const ::windows::Guid,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const ::windows::Guid,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::DateTime_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::DateTime_abi,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::DateTime_abi,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::DateTime_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::DateTime_abi,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::DateTime_abi,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::TimeSpan_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::TimeSpan_abi,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::TimeSpan_abi,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::TimeSpan_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::TimeSpan_abi,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::TimeSpan_abi,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::Point_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::Point_abi,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::Point_abi,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::Point_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::Point_abi,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::Point_abi,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::Size_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::Size_abi,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::Size_abi,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::Size_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::Size_abi,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::Size_abi,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::Rect_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::Rect_abi,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    value: super::Rect_abi,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::Rect_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::Rect_abi,
                    format: LoggingFieldFormat,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    array_size_value: u32,
                    value: *const super::Rect_abi,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingFields {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{d7f6b7af-762d-4579-83bd-52c23bc333bc}")
                };
            }
            impl ::std::convert::From<ILoggingFields> for ::windows::Object {
                fn from(value: ILoggingFields) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingFields> for ::windows::Object {
                fn from(value: &ILoggingFields) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingFields {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a ILoggingFields {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct LoggingFields(::windows::Object);
            impl LoggingFields {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                pub fn clear(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn begin_struct<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn begin_struct_with_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn end_struct(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn add_empty<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_empty_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_empty_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint8<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u8,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_uint8_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u8,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint8_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u8,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint8_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u8 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_uint8_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u8 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint8_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u8 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_int16<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i16,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_int16_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i16,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_int16_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_int16_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i16 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).22)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_int16_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i16 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).23)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_int16_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i16 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).24)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint16<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u16,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).25)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_uint16_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u16,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).26)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint16_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).27)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint16_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u16 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).28)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_uint16_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u16 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).29)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint16_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u16 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).30)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_int32<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).31)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_int32_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i32,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).32)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_int32_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).33)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_int32_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i32 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).34)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_int32_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i32 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).35)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_int32_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i32 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).36)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint32<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).37)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_uint32_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u32,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).38)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint32_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).39)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint32_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u32 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).40)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_uint32_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u32 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).41)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint32_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u32 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).42)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_int64<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i64,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).43)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_int64_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i64,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).44)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_int64_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: i64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).45)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_int64_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i64 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).46)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_int64_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i64 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).47)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_int64_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<i64 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).48)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint64<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u64,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).49)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_uint64_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u64,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).50)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint64_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).51)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_uint64_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u64 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).52)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_uint64_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u64 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).53)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_uint64_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u64 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).54)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_single<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: f32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).55)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_single_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: f32,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).56)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_single_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: f32,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).57)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_single_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<f32 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).58)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_single_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<f32 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).59)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_single_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<f32 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).60)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_double<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: f64,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).61)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_double_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: f64,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).62)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_double_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: f64,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).63)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_double_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<f64 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).64)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_double_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<f64 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).65)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_double_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<f64 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).66)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_char16<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u16,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).67)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_char16_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u16,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).68)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_char16_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: u16,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).69)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_char16_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u16 as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).70)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_char16_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u16 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).71)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_char16_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<u16 as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).72)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_boolean<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: bool,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).73)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                        )
                        .ok()
                    }
                }
                pub fn add_boolean_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: bool,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).74)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_boolean_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: bool,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).75)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value,
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_boolean_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<bool as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).76)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_boolean_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<bool as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).77)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_boolean_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<bool as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).78)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_string<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).79)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_string_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).80)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_string_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).81)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_string_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<::windows::HString as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).82)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_string_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<::windows::HString as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).83)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_string_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<::windows::HString as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).84)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_guid<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).85)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_guid_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).86)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_guid_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).87)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_guid_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<::windows::Guid as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).88)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_guid_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<::windows::Guid as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).89)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_guid_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<::windows::Guid as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).90)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_date_time<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::DateTime>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).91)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_date_time_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::DateTime>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).92)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_date_time_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::DateTime>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).93)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_date_time_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::DateTime as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).94)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_date_time_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::DateTime as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).95)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_date_time_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::DateTime as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).96)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_time_span<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::TimeSpan>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).97)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_time_span_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::TimeSpan>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).98)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_time_span_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::TimeSpan>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).99)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_time_span_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::TimeSpan as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).100)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_time_span_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::TimeSpan as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).101)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_time_span_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::TimeSpan as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).102)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_point<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Point>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).103)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_point_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Point>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).104)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_point_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Point>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).105)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_point_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Point as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).106)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_point_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Point as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).107)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_point_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Point as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).108)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_size<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Size>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).109)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_size_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Size>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).110)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_size_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Size>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).111)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_size_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Size as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).112)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_size_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Size as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).113)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_size_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Size as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).114)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_rect<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Rect>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).115)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_rect_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Rect>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).116)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_rect_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, super::Rect>>,
                >(
                    &self,
                    name: T0__,
                    value: T1__,
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).117)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.into().abi(),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                pub fn add_rect_array<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Rect as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).118)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn add_rect_array_with_format<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Rect as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).119)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                        )
                        .ok()
                    }
                }
                pub fn add_rect_array_with_format_and_tags<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                    value: &[<super::Rect as ::windows::RuntimeType>::DefaultType],
                    format: LoggingFieldFormat,
                    tags: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).120)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            value.len() as u32,
                            ::std::mem::transmute(value.as_ptr()),
                            format,
                            tags,
                        )
                        .ok()
                    }
                }
                #[allow(non_snake_case)]
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        LoggingFields,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for LoggingFields {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for LoggingFields {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for LoggingFields {}
            impl ::std::fmt::Debug for LoggingFields {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for LoggingFields {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.LoggingFields";
            }
            unsafe impl ::windows::Interface for LoggingFields {
                type Vtable = ILoggingFields_abi;
                const IID: ::windows::Guid = <ILoggingFields as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for LoggingFields {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Diagnostics.LoggingFields;{d7f6b7af-762d-4579-83bd-52c23bc333bc})" ) ;
            }
            impl ::std::convert::From<LoggingFields> for ::windows::Object {
                fn from(value: LoggingFields) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&LoggingFields> for ::windows::Object {
                fn from(value: &LoggingFields) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for LoggingFields {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a LoggingFields {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingFields> for ILoggingFields {
                fn from(value: LoggingFields) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&LoggingFields> for ILoggingFields {
                fn from(value: &LoggingFields) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingFields>> for LoggingFields {
                fn into(self) -> ::windows::Param<'a, ILoggingFields> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingFields>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingFields>> for &'a LoggingFields {
                fn into(self) -> ::windows::Param<'a, ILoggingFields> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingFields>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for LoggingFields {}
            unsafe impl ::std::marker::Sync for LoggingFields {}
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct LoggingOpcode(pub i32);
            impl ::std::convert::From<i32> for LoggingOpcode {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for LoggingOpcode {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for LoggingOpcode {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for LoggingOpcode {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for LoggingOpcode {}
            impl LoggingOpcode {
                #![allow(non_upper_case_globals)]
                pub const Info: Self = Self(0i32);
                pub const Start: Self = Self(1i32);
                pub const Stop: Self = Self(2i32);
                pub const Reply: Self = Self(6i32);
                pub const Resume: Self = Self(7i32);
                pub const Suspend: Self = Self(8i32);
                pub const Send: Self = Self(9i32);
            }
            unsafe impl ::windows::Abi for LoggingOpcode {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for LoggingOpcode {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Foundation.Diagnostics.LoggingOpcode;i4)",
                );
            }
            #[repr(transparent)]
            pub struct ILoggingOptions(::windows::Object);
            impl ::std::clone::Clone for ILoggingOptions {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingOptions {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingOptions {}
            impl ILoggingOptions {
                pub fn keywords(&self) -> ::windows::Result<i64> {
                    let this = self;
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn set_keywords(&self, value: i64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn tags(&self) -> ::windows::Result<i32> {
                    let this = self;
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
                pub fn set_tags(&self, value: i32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn task(&self) -> ::windows::Result<i16> {
                    let this = self;
                    unsafe {
                        let mut result__: <i16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i16>(result__)
                    }
                }
                pub fn set_task(&self, value: i16) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn opcode(&self) -> ::windows::Result<LoggingOpcode> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingOpcode as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<LoggingOpcode>(result__)
                    }
                }
                pub fn set_opcode(&self, value: LoggingOpcode) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn activity_id(&self) -> ::windows::Result<::windows::Guid> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::Guid>(result__)
                    }
                }
                pub fn set_activity_id<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn related_activity_id(&self) -> ::windows::Result<::windows::Guid> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::Guid>(result__)
                    }
                }
                pub fn set_related_activity_id<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingOptions {
                type Vtable = ILoggingOptions_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2428270672,
                    402,
                    20317,
                    [172, 38, 0, 106, 218, 202, 18, 216],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingOptions_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut i64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: i64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut i16,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: i16,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut LoggingOpcode,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: LoggingOpcode,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::Guid,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingOptions {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{90bc7850-0192-4f5d-ac26-006adaca12d8}")
                };
            }
            impl ::std::convert::From<ILoggingOptions> for ::windows::Object {
                fn from(value: ILoggingOptions) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingOptions> for ::windows::Object {
                fn from(value: &ILoggingOptions) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingOptions {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a ILoggingOptions {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct ILoggingOptionsFactory(::windows::Object);
            impl ::std::clone::Clone for ILoggingOptionsFactory {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingOptionsFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingOptionsFactory {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingOptionsFactory {}
            impl ILoggingOptionsFactory {
                pub fn create_with_keywords(
                    &self,
                    keywords: i64,
                ) -> ::windows::Result<LoggingOptions> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            keywords,
                            &mut result__,
                        )
                        .from_abi::<LoggingOptions>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingOptionsFactory {
                type Vtable = ILoggingOptionsFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3608397515,
                    39083,
                    17995,
                    [159, 34, 163, 38, 132, 120, 54, 138],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingOptionsFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    keywords: i64,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingOptionsFactory {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{d713c6cb-98ab-464b-9f22-a3268478368a}")
                };
            }
            impl ::std::convert::From<ILoggingOptionsFactory> for ::windows::Object {
                fn from(value: ILoggingOptionsFactory) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingOptionsFactory> for ::windows::Object {
                fn from(value: &ILoggingOptionsFactory) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingOptionsFactory {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a ILoggingOptionsFactory
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct LoggingOptions(::windows::Object);
            impl LoggingOptions {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                pub fn keywords(&self) -> ::windows::Result<i64> {
                    let this = self;
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn set_keywords(&self, value: i64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn tags(&self) -> ::windows::Result<i32> {
                    let this = self;
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
                pub fn set_tags(&self, value: i32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn task(&self) -> ::windows::Result<i16> {
                    let this = self;
                    unsafe {
                        let mut result__: <i16 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i16>(result__)
                    }
                }
                pub fn set_task(&self, value: i16) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn opcode(&self) -> ::windows::Result<LoggingOpcode> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingOpcode as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<LoggingOpcode>(result__)
                    }
                }
                pub fn set_opcode(&self, value: LoggingOpcode) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn activity_id(&self) -> ::windows::Result<::windows::Guid> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::Guid>(result__)
                    }
                }
                pub fn set_activity_id<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn related_activity_id(&self) -> ::windows::Result<::windows::Guid> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::Guid>(result__)
                    }
                }
                pub fn set_related_activity_id<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn create_with_keywords(keywords: i64) -> ::windows::Result<LoggingOptions> {
                    Self::ILoggingOptionsFactory(|this| unsafe {
                        let mut result__: <LoggingOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            keywords,
                            &mut result__,
                        )
                        .from_abi::<LoggingOptions>(result__)
                    })
                }
                #[allow(non_snake_case)]
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        LoggingOptions,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                #[allow(non_snake_case)]
                fn ILoggingOptionsFactory<
                    R,
                    F: FnOnce(&ILoggingOptionsFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        LoggingOptions,
                        ILoggingOptionsFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for LoggingOptions {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for LoggingOptions {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for LoggingOptions {}
            impl ::std::fmt::Debug for LoggingOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for LoggingOptions {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.LoggingOptions";
            }
            unsafe impl ::windows::Interface for LoggingOptions {
                type Vtable = ILoggingOptions_abi;
                const IID: ::windows::Guid = <ILoggingOptions as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for LoggingOptions {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Diagnostics.LoggingOptions;{90bc7850-0192-4f5d-ac26-006adaca12d8})" ) ;
            }
            impl ::std::convert::From<LoggingOptions> for ::windows::Object {
                fn from(value: LoggingOptions) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&LoggingOptions> for ::windows::Object {
                fn from(value: &LoggingOptions) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for LoggingOptions {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a LoggingOptions {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingOptions> for ILoggingOptions {
                fn from(value: LoggingOptions) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&LoggingOptions> for ILoggingOptions {
                fn from(value: &LoggingOptions) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingOptions>> for LoggingOptions {
                fn into(self) -> ::windows::Param<'a, ILoggingOptions> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingOptions>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingOptions>> for &'a LoggingOptions {
                fn into(self) -> ::windows::Param<'a, ILoggingOptions> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingOptions>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for LoggingOptions {}
            unsafe impl ::std::marker::Sync for LoggingOptions {}
            #[repr(transparent)]
            pub struct ILoggingActivityFactory(::windows::Object);
            impl ::std::clone::Clone for ILoggingActivityFactory {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingActivityFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingActivityFactory {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingActivityFactory {}
            impl ILoggingActivityFactory {
                pub fn create_logging_activity<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    activity_name: T0__,
                    logging_channel: T1__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            activity_name.into().abi(),
                            logging_channel.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn create_logging_activity_with_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    activity_name: T0__,
                    logging_channel: T1__,
                    level: LoggingLevel,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            activity_name.into().abi(),
                            logging_channel.into().abi(),
                            level,
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingActivityFactory {
                type Vtable = ILoggingActivityFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1798550659,
                    57610,
                    19544,
                    [151, 213, 16, 251, 69, 16, 116, 251],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingActivityFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    activity_name: ::windows::RawPtr,
                    logging_channel: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    activity_name: ::windows::RawPtr,
                    logging_channel: ::windows::RawPtr,
                    level: LoggingLevel,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingActivityFactory {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{6b33b483-e10a-4c58-97d5-10fb451074fb}")
                };
            }
            impl ::std::convert::From<ILoggingActivityFactory> for ::windows::Object {
                fn from(value: ILoggingActivityFactory) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingActivityFactory> for ::windows::Object {
                fn from(value: &ILoggingActivityFactory) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingActivityFactory {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a ILoggingActivityFactory
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct LoggingActivity(::windows::Object);
            impl LoggingActivity {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<super::IClosable>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn name(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn id(&self) -> ::windows::Result<::windows::Guid> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::Guid>(result__)
                    }
                }
                pub fn channel(&self) -> ::windows::Result<LoggingChannel> {
                    let this = &::windows::Interface::cast::<ILoggingActivity2>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingChannel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<LoggingChannel>(result__)
                    }
                }
                pub fn stop_activity<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    stop_event_name: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingActivity2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            stop_event_name.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn stop_activity_with_fields<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    stop_event_name: T0__,
                    fields: T1__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingActivity2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            stop_event_name.into().abi(),
                            fields.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn stop_activity_with_fields_and_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                    T2__: ::std::convert::Into<::windows::Param<'a, LoggingOptions>>,
                >(
                    &self,
                    stop_event_name: T0__,
                    fields: T1__,
                    options: T2__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingActivity2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            stop_event_name.into().abi(),
                            fields.into().abi(),
                            options.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn create_logging_activity<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    activity_name: T0__,
                    logging_channel: T1__,
                ) -> ::windows::Result<LoggingActivity> {
                    Self::ILoggingActivityFactory(|this| unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            activity_name.into().abi(),
                            logging_channel.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    })
                }
                pub fn create_logging_activity_with_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    activity_name: T0__,
                    logging_channel: T1__,
                    level: LoggingLevel,
                ) -> ::windows::Result<LoggingActivity> {
                    Self::ILoggingActivityFactory(|this| unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            activity_name.into().abi(),
                            logging_channel.into().abi(),
                            level,
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    })
                }
                pub fn is_enabled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn is_enabled_with_level(
                    &self,
                    level: LoggingLevel,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            level,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn is_enabled_with_level_and_keywords(
                    &self,
                    level: LoggingLevel,
                    keywords: i64,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            level,
                            keywords,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn log_event<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    event_name: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields_and_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields_and_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                    T3__: ::std::convert::Into<::windows::Param<'a, LoggingOptions>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                    options: T3__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            options.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn start_activity<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    start_event_name: T0__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields_and_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields_and_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                    T3__: ::std::convert::Into<::windows::Param<'a, LoggingOptions>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                    options: T3__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            options.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                #[allow(non_snake_case)]
                fn ILoggingActivityFactory<
                    R,
                    F: FnOnce(&ILoggingActivityFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        LoggingActivity,
                        ILoggingActivityFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for LoggingActivity {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for LoggingActivity {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for LoggingActivity {}
            impl ::std::fmt::Debug for LoggingActivity {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for LoggingActivity {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.LoggingActivity";
            }
            unsafe impl ::windows::Interface for LoggingActivity {
                type Vtable = ILoggingActivity_abi;
                const IID: ::windows::Guid = <ILoggingActivity as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for LoggingActivity {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Diagnostics.LoggingActivity;{bc032941-b766-4cb5-9848-97ac6ba6d60c})" ) ;
            }
            impl ::std::convert::From<LoggingActivity> for ::windows::Object {
                fn from(value: LoggingActivity) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&LoggingActivity> for ::windows::Object {
                fn from(value: &LoggingActivity) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for LoggingActivity {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a LoggingActivity {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingActivity> for super::IClosable {
                fn from(value: LoggingActivity) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LoggingActivity> for super::IClosable {
                fn from(value: &LoggingActivity) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for LoggingActivity {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for &'a LoggingActivity {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingActivity> for ILoggingActivity {
                fn from(value: LoggingActivity) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&LoggingActivity> for ILoggingActivity {
                fn from(value: &LoggingActivity) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingActivity>> for LoggingActivity {
                fn into(self) -> ::windows::Param<'a, ILoggingActivity> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingActivity>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingActivity>> for &'a LoggingActivity {
                fn into(self) -> ::windows::Param<'a, ILoggingActivity> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingActivity>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingActivity> for ILoggingActivity2 {
                fn from(value: LoggingActivity) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LoggingActivity> for ILoggingActivity2 {
                fn from(value: &LoggingActivity) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingActivity2>> for LoggingActivity {
                fn into(self) -> ::windows::Param<'a, ILoggingActivity2> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingActivity2>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingActivity2>> for &'a LoggingActivity {
                fn into(self) -> ::windows::Param<'a, ILoggingActivity2> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingActivity2>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingActivity> for ILoggingTarget {
                fn from(value: LoggingActivity) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LoggingActivity> for ILoggingTarget {
                fn from(value: &LoggingActivity) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingTarget>> for LoggingActivity {
                fn into(self) -> ::windows::Param<'a, ILoggingTarget> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingTarget>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingTarget>> for &'a LoggingActivity {
                fn into(self) -> ::windows::Param<'a, ILoggingTarget> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingTarget>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for LoggingActivity {}
            unsafe impl ::std::marker::Sync for LoggingActivity {}
            #[repr(transparent)]
            pub struct ILoggingTarget(::windows::Object);
            impl ::std::clone::Clone for ILoggingTarget {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingTarget {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingTarget {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingTarget {}
            impl ILoggingTarget {
                pub fn is_enabled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn is_enabled_with_level(
                    &self,
                    level: LoggingLevel,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            level,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn is_enabled_with_level_and_keywords(
                    &self,
                    level: LoggingLevel,
                    keywords: i64,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            level,
                            keywords,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn log_event<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    event_name: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields_and_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields_and_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                    T3__: ::std::convert::Into<::windows::Param<'a, LoggingOptions>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                    options: T3__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            options.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn start_activity<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    start_event_name: T0__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields_and_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields_and_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                    T3__: ::std::convert::Into<::windows::Param<'a, LoggingOptions>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                    options: T3__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            options.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingTarget {
                type Vtable = ILoggingTarget_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1710320693,
                    58248,
                    20006,
                    [177, 122, 245, 28, 211, 168, 57, 22],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingTarget_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    level: LoggingLevel,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    level: LoggingLevel,
                    keywords: i64,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    event_name: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    event_name: ::windows::RawPtr,
                    fields: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    event_name: ::windows::RawPtr,
                    fields: ::windows::RawPtr,
                    level: LoggingLevel,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    event_name: ::windows::RawPtr,
                    fields: ::windows::RawPtr,
                    level: LoggingLevel,
                    options: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    start_event_name: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    start_event_name: ::windows::RawPtr,
                    fields: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    start_event_name: ::windows::RawPtr,
                    fields: ::windows::RawPtr,
                    level: LoggingLevel,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    start_event_name: ::windows::RawPtr,
                    fields: ::windows::RawPtr,
                    level: LoggingLevel,
                    options: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingTarget {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{65f16c35-e388-4e26-b17a-f51cd3a83916}")
                };
            }
            impl ::std::convert::From<ILoggingTarget> for ::windows::Object {
                fn from(value: ILoggingTarget) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingTarget> for ::windows::Object {
                fn from(value: &ILoggingTarget) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingTarget {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a ILoggingTarget {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct ILoggingChannel2(::windows::Object);
            impl ::std::clone::Clone for ILoggingChannel2 {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingChannel2 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingChannel2 {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingChannel2 {}
            impl ILoggingChannel2 {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<super::IClosable>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn name(&self) -> ::windows::Result<::windows::HString> {
                    let this = &::windows::Interface::cast::<ILoggingChannel>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn enabled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingChannel>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn level(&self) -> ::windows::Result<LoggingLevel> {
                    let this = &::windows::Interface::cast::<ILoggingChannel>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingLevel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<LoggingLevel>(result__)
                    }
                }
                pub fn log_message<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    event_string: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingChannel>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_string.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_message_with_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    event_string: T0__,
                    level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingChannel>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            event_string.into().abi(),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn log_value_pair<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value1: T0__,
                    value2: i32,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingChannel>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            value1.into().abi(),
                            value2,
                        )
                        .ok()
                    }
                }
                pub fn log_value_pair_with_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value1: T0__,
                    value2: i32,
                    level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingChannel>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value1.into().abi(),
                            value2,
                            level,
                        )
                        .ok()
                    }
                }
                pub fn logging_enabled<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::TypedEventHandler<ILoggingChannel, ::windows::Object>,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = &::windows::Interface::cast::<ILoggingChannel>(self).unwrap();
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_logging_enabled<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    &self,
                    token: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingChannel>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            token.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn id(&self) -> ::windows::Result<::windows::Guid> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::Guid>(result__)
                    }
                }
                pub fn is_enabled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn is_enabled_with_level(
                    &self,
                    level: LoggingLevel,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            level,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn is_enabled_with_level_and_keywords(
                    &self,
                    level: LoggingLevel,
                    keywords: i64,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            level,
                            keywords,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn log_event<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    event_name: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields_and_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields_and_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                    T3__: ::std::convert::Into<::windows::Param<'a, LoggingOptions>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                    options: T3__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            options.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn start_activity<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    start_event_name: T0__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields_and_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields_and_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                    T3__: ::std::convert::Into<::windows::Param<'a, LoggingOptions>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                    options: T3__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            options.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingChannel2 {
                type Vtable = ILoggingChannel2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2672573683,
                    2988,
                    17829,
                    [158, 51, 186, 243, 243, 162, 70, 165],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingChannel2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingChannel2 {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{9f4c3cf3-0bac-45a5-9e33-baf3f3a246a5}")
                };
            }
            impl ::std::convert::From<ILoggingChannel2> for ::windows::Object {
                fn from(value: ILoggingChannel2) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingChannel2> for ::windows::Object {
                fn from(value: &ILoggingChannel2) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingChannel2 {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a ILoggingChannel2 {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ILoggingChannel2> for super::IClosable {
                fn from(value: ILoggingChannel2) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILoggingChannel2> for super::IClosable {
                fn from(value: &ILoggingChannel2) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for ILoggingChannel2 {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for &'a ILoggingChannel2 {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ILoggingChannel2> for ILoggingChannel {
                fn from(value: ILoggingChannel2) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILoggingChannel2> for ILoggingChannel {
                fn from(value: &ILoggingChannel2) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingChannel>> for ILoggingChannel2 {
                fn into(self) -> ::windows::Param<'a, ILoggingChannel> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingChannel>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingChannel>> for &'a ILoggingChannel2 {
                fn into(self) -> ::windows::Param<'a, ILoggingChannel> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingChannel>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ILoggingChannel2> for ILoggingTarget {
                fn from(value: ILoggingChannel2) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILoggingChannel2> for ILoggingTarget {
                fn from(value: &ILoggingChannel2) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingTarget>> for ILoggingChannel2 {
                fn into(self) -> ::windows::Param<'a, ILoggingTarget> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingTarget>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingTarget>> for &'a ILoggingChannel2 {
                fn into(self) -> ::windows::Param<'a, ILoggingTarget> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingTarget>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct ILoggingChannelFactory(::windows::Object);
            impl ::std::clone::Clone for ILoggingChannelFactory {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingChannelFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingChannelFactory {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingChannelFactory {}
            impl ILoggingChannelFactory {
                pub fn create<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                ) -> ::windows::Result<LoggingChannel> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingChannel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingChannel>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingChannelFactory {
                type Vtable = ILoggingChannelFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1323064220,
                    44928,
                    19099,
                    [176, 220, 57, 143, 154, 229, 32, 123],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingChannelFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingChannelFactory {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{4edc5b9c-af80-4a9b-b0dc-398f9ae5207b}")
                };
            }
            impl ::std::convert::From<ILoggingChannelFactory> for ::windows::Object {
                fn from(value: ILoggingChannelFactory) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingChannelFactory> for ::windows::Object {
                fn from(value: &ILoggingChannelFactory) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingChannelFactory {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a ILoggingChannelFactory
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct ILoggingChannelOptions(::windows::Object);
            impl ::std::clone::Clone for ILoggingChannelOptions {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingChannelOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingChannelOptions {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingChannelOptions {}
            impl ILoggingChannelOptions {
                pub fn group(&self) -> ::windows::Result<::windows::Guid> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::Guid>(result__)
                    }
                }
                pub fn set_group<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingChannelOptions {
                type Vtable = ILoggingChannelOptions_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3286779903,
                    3771,
                    19027,
                    [140, 84, 222, 194, 73, 38, 203, 44],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingChannelOptions_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::Guid,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingChannelOptions {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{c3e847ff-0ebb-4a53-8c54-dec24926cb2c}")
                };
            }
            impl ::std::convert::From<ILoggingChannelOptions> for ::windows::Object {
                fn from(value: ILoggingChannelOptions) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingChannelOptions> for ::windows::Object {
                fn from(value: &ILoggingChannelOptions) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingChannelOptions {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a ILoggingChannelOptions
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct ILoggingChannelOptionsFactory(::windows::Object);
            impl ::std::clone::Clone for ILoggingChannelOptionsFactory {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingChannelOptionsFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingChannelOptionsFactory {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingChannelOptionsFactory {}
            impl ILoggingChannelOptionsFactory {
                pub fn create<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    group: T0__,
                ) -> ::windows::Result<LoggingChannelOptions> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingChannelOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            group.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingChannelOptions>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingChannelOptionsFactory {
                type Vtable = ILoggingChannelOptionsFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2838581722,
                    32687,
                    16785,
                    [135, 85, 94, 134, 220, 101, 216, 150],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingChannelOptionsFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    group: ::windows::Guid,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingChannelOptionsFactory {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{a93151da-7faf-4191-8755-5e86dc65d896}")
                };
            }
            impl ::std::convert::From<ILoggingChannelOptionsFactory> for ::windows::Object {
                fn from(value: ILoggingChannelOptionsFactory) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingChannelOptionsFactory> for ::windows::Object {
                fn from(value: &ILoggingChannelOptionsFactory) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for ILoggingChannelOptionsFactory
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a ILoggingChannelOptionsFactory
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct LoggingChannelOptions(::windows::Object);
            impl LoggingChannelOptions {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                pub fn group(&self) -> ::windows::Result<::windows::Guid> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::Guid>(result__)
                    }
                }
                pub fn set_group<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn create<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    group: T0__,
                ) -> ::windows::Result<LoggingChannelOptions> {
                    Self::ILoggingChannelOptionsFactory(|this| unsafe {
                        let mut result__: <LoggingChannelOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            group.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingChannelOptions>(result__)
                    })
                }
                #[allow(non_snake_case)]
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        LoggingChannelOptions,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                #[allow(non_snake_case)]
                fn ILoggingChannelOptionsFactory<
                    R,
                    F: FnOnce(&ILoggingChannelOptionsFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        LoggingChannelOptions,
                        ILoggingChannelOptionsFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for LoggingChannelOptions {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for LoggingChannelOptions {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for LoggingChannelOptions {}
            impl ::std::fmt::Debug for LoggingChannelOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for LoggingChannelOptions {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.LoggingChannelOptions";
            }
            unsafe impl ::windows::Interface for LoggingChannelOptions {
                type Vtable = ILoggingChannelOptions_abi;
                const IID: ::windows::Guid = <ILoggingChannelOptions as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for LoggingChannelOptions {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Diagnostics.LoggingChannelOptions;{c3e847ff-0ebb-4a53-8c54-dec24926cb2c})" ) ;
            }
            impl ::std::convert::From<LoggingChannelOptions> for ::windows::Object {
                fn from(value: LoggingChannelOptions) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&LoggingChannelOptions> for ::windows::Object {
                fn from(value: &LoggingChannelOptions) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for LoggingChannelOptions {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a LoggingChannelOptions
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingChannelOptions> for ILoggingChannelOptions {
                fn from(value: LoggingChannelOptions) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&LoggingChannelOptions> for ILoggingChannelOptions {
                fn from(value: &LoggingChannelOptions) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingChannelOptions>>
                for LoggingChannelOptions
            {
                fn into(self) -> ::windows::Param<'a, ILoggingChannelOptions> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingChannelOptions>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingChannelOptions>>
                for &'a LoggingChannelOptions
            {
                fn into(self) -> ::windows::Param<'a, ILoggingChannelOptions> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingChannelOptions>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for LoggingChannelOptions {}
            unsafe impl ::std::marker::Sync for LoggingChannelOptions {}
            #[repr(transparent)]
            pub struct ILoggingChannelFactory2(::windows::Object);
            impl ::std::clone::Clone for ILoggingChannelFactory2 {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingChannelFactory2 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingChannelFactory2 {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingChannelFactory2 {}
            impl ILoggingChannelFactory2 {
                pub fn create_with_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingChannelOptions>>,
                >(
                    &self,
                    name: T0__,
                    options: T1__,
                ) -> ::windows::Result<LoggingChannel> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingChannel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            options.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingChannel>(result__)
                    }
                }
                pub fn create_with_options_and_id<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingChannelOptions>>,
                    T2__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    &self,
                    name: T0__,
                    options: T1__,
                    id: T2__,
                ) -> ::windows::Result<LoggingChannel> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingChannel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            options.into().abi(),
                            id.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingChannel>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingChannelFactory2 {
                type Vtable = ILoggingChannelFactory2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1282340317,
                    15143,
                    19913,
                    [153, 240, 41, 156, 110, 70, 3, 161],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingChannelFactory2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    options: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    options: ::windows::RawPtr,
                    id: ::windows::Guid,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingChannelFactory2 {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{4c6ef5dd-3b27-4dc9-99f0-299c6e4603a1}")
                };
            }
            impl ::std::convert::From<ILoggingChannelFactory2> for ::windows::Object {
                fn from(value: ILoggingChannelFactory2) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingChannelFactory2> for ::windows::Object {
                fn from(value: &ILoggingChannelFactory2) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingChannelFactory2 {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a ILoggingChannelFactory2
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct LoggingChannel(::windows::Object);
            impl LoggingChannel {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<super::IClosable>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn name(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn enabled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn level(&self) -> ::windows::Result<LoggingLevel> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingLevel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<LoggingLevel>(result__)
                    }
                }
                pub fn log_message<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    event_string: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_string.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_message_with_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    event_string: T0__,
                    level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            event_string.into().abi(),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn log_value_pair<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value1: T0__,
                    value2: i32,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            value1.into().abi(),
                            value2,
                        )
                        .ok()
                    }
                }
                pub fn log_value_pair_with_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value1: T0__,
                    value2: i32,
                    level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value1.into().abi(),
                            value2,
                            level,
                        )
                        .ok()
                    }
                }
                pub fn logging_enabled<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::TypedEventHandler<ILoggingChannel, ::windows::Object>,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = self;
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_logging_enabled<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::EventRegistrationToken>>,
                >(
                    &self,
                    token: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            token.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn id(&self) -> ::windows::Result<::windows::Guid> {
                    let this = &::windows::Interface::cast::<ILoggingChannel2>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::Guid>(result__)
                    }
                }
                pub fn create<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    name: T0__,
                ) -> ::windows::Result<LoggingChannel> {
                    Self::ILoggingChannelFactory(|this| unsafe {
                        let mut result__: <LoggingChannel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingChannel>(result__)
                    })
                }
                pub fn create_with_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingChannelOptions>>,
                >(
                    name: T0__,
                    options: T1__,
                ) -> ::windows::Result<LoggingChannel> {
                    Self::ILoggingChannelFactory2(|this| unsafe {
                        let mut result__: <LoggingChannel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            options.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingChannel>(result__)
                    })
                }
                pub fn create_with_options_and_id<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingChannelOptions>>,
                    T2__: ::std::convert::Into<::windows::Param<'a, ::windows::Guid>>,
                >(
                    name: T0__,
                    options: T1__,
                    id: T2__,
                ) -> ::windows::Result<LoggingChannel> {
                    Self::ILoggingChannelFactory2(|this| unsafe {
                        let mut result__: <LoggingChannel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            options.into().abi(),
                            id.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingChannel>(result__)
                    })
                }
                pub fn is_enabled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn is_enabled_with_level(
                    &self,
                    level: LoggingLevel,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            level,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn is_enabled_with_level_and_keywords(
                    &self,
                    level: LoggingLevel,
                    keywords: i64,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            level,
                            keywords,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn log_event<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    event_name: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields_and_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields_and_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                    T3__: ::std::convert::Into<::windows::Param<'a, LoggingOptions>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                    options: T3__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            options.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn start_activity<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    start_event_name: T0__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields_and_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields_and_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                    T3__: ::std::convert::Into<::windows::Param<'a, LoggingOptions>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                    options: T3__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            options.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                #[allow(non_snake_case)]
                fn ILoggingChannelFactory<
                    R,
                    F: FnOnce(&ILoggingChannelFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        LoggingChannel,
                        ILoggingChannelFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                #[allow(non_snake_case)]
                fn ILoggingChannelFactory2<
                    R,
                    F: FnOnce(&ILoggingChannelFactory2) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        LoggingChannel,
                        ILoggingChannelFactory2,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for LoggingChannel {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for LoggingChannel {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for LoggingChannel {}
            impl ::std::fmt::Debug for LoggingChannel {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for LoggingChannel {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.LoggingChannel";
            }
            unsafe impl ::windows::Interface for LoggingChannel {
                type Vtable = ILoggingChannel_abi;
                const IID: ::windows::Guid = <ILoggingChannel as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for LoggingChannel {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Diagnostics.LoggingChannel;{e9a50343-11d7-4f01-b5ca-cf495278c0a8})" ) ;
            }
            impl ::std::convert::From<LoggingChannel> for ::windows::Object {
                fn from(value: LoggingChannel) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&LoggingChannel> for ::windows::Object {
                fn from(value: &LoggingChannel) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for LoggingChannel {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a LoggingChannel {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingChannel> for super::IClosable {
                fn from(value: LoggingChannel) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LoggingChannel> for super::IClosable {
                fn from(value: &LoggingChannel) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for LoggingChannel {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for &'a LoggingChannel {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingChannel> for ILoggingChannel {
                fn from(value: LoggingChannel) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&LoggingChannel> for ILoggingChannel {
                fn from(value: &LoggingChannel) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingChannel>> for LoggingChannel {
                fn into(self) -> ::windows::Param<'a, ILoggingChannel> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingChannel>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingChannel>> for &'a LoggingChannel {
                fn into(self) -> ::windows::Param<'a, ILoggingChannel> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingChannel>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingChannel> for ILoggingChannel2 {
                fn from(value: LoggingChannel) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LoggingChannel> for ILoggingChannel2 {
                fn from(value: &LoggingChannel) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingChannel2>> for LoggingChannel {
                fn into(self) -> ::windows::Param<'a, ILoggingChannel2> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingChannel2>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingChannel2>> for &'a LoggingChannel {
                fn into(self) -> ::windows::Param<'a, ILoggingChannel2> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingChannel2>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingChannel> for ILoggingTarget {
                fn from(value: LoggingChannel) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LoggingChannel> for ILoggingTarget {
                fn from(value: &LoggingChannel) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingTarget>> for LoggingChannel {
                fn into(self) -> ::windows::Param<'a, ILoggingTarget> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingTarget>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingTarget>> for &'a LoggingChannel {
                fn into(self) -> ::windows::Param<'a, ILoggingTarget> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingTarget>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for LoggingChannel {}
            unsafe impl ::std::marker::Sync for LoggingChannel {}
            #[repr(transparent)]
            pub struct ILoggingActivity2(::windows::Object);
            impl ::std::clone::Clone for ILoggingActivity2 {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingActivity2 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingActivity2 {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingActivity2 {}
            impl ILoggingActivity2 {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<super::IClosable>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn name(&self) -> ::windows::Result<::windows::HString> {
                    let this = &::windows::Interface::cast::<ILoggingActivity>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn id(&self) -> ::windows::Result<::windows::Guid> {
                    let this = &::windows::Interface::cast::<ILoggingActivity>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::Guid as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::Guid>(result__)
                    }
                }
                pub fn channel(&self) -> ::windows::Result<LoggingChannel> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingChannel as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<LoggingChannel>(result__)
                    }
                }
                pub fn stop_activity<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    stop_event_name: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            stop_event_name.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn stop_activity_with_fields<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    stop_event_name: T0__,
                    fields: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            stop_event_name.into().abi(),
                            fields.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn stop_activity_with_fields_and_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                    T2__: ::std::convert::Into<::windows::Param<'a, LoggingOptions>>,
                >(
                    &self,
                    stop_event_name: T0__,
                    fields: T1__,
                    options: T2__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            stop_event_name.into().abi(),
                            fields.into().abi(),
                            options.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn is_enabled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn is_enabled_with_level(
                    &self,
                    level: LoggingLevel,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            level,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn is_enabled_with_level_and_keywords(
                    &self,
                    level: LoggingLevel,
                    keywords: i64,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            level,
                            keywords,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn log_event<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    event_name: T0__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields_and_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                            level,
                        )
                        .ok()
                    }
                }
                pub fn log_event_with_fields_and_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                    T3__: ::std::convert::Into<::windows::Param<'a, LoggingOptions>>,
                >(
                    &self,
                    event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                    options: T3__,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            options.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn start_activity<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    start_event_name: T0__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields_and_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
                pub fn start_activity_with_fields_and_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                    T1__: ::std::convert::Into<::windows::Param<'a, LoggingFields>>,
                    T3__: ::std::convert::Into<::windows::Param<'a, LoggingOptions>>,
                >(
                    &self,
                    start_event_name: T0__,
                    fields: T1__,
                    level: LoggingLevel,
                    options: T3__,
                ) -> ::windows::Result<LoggingActivity> {
                    let this = &::windows::Interface::cast::<ILoggingTarget>(self).unwrap();
                    unsafe {
                        let mut result__: <LoggingActivity as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            start_event_name.into().abi(),
                            fields.into().abi(),
                            level,
                            options.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingActivity>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingActivity2 {
                type Vtable = ILoggingActivity2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    650287112,
                    25378,
                    17770,
                    [175, 130, 128, 200, 100, 47, 23, 139],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingActivity2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    stop_event_name: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    stop_event_name: ::windows::RawPtr,
                    fields: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    stop_event_name: ::windows::RawPtr,
                    fields: ::windows::RawPtr,
                    options: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingActivity2 {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{26c29808-6322-456a-af82-80c8642f178b}")
                };
            }
            impl ::std::convert::From<ILoggingActivity2> for ::windows::Object {
                fn from(value: ILoggingActivity2) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingActivity2> for ::windows::Object {
                fn from(value: &ILoggingActivity2) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingActivity2 {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a ILoggingActivity2 {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ILoggingActivity2> for super::IClosable {
                fn from(value: ILoggingActivity2) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILoggingActivity2> for super::IClosable {
                fn from(value: &ILoggingActivity2) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for ILoggingActivity2 {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for &'a ILoggingActivity2 {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ILoggingActivity2> for ILoggingActivity {
                fn from(value: ILoggingActivity2) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILoggingActivity2> for ILoggingActivity {
                fn from(value: &ILoggingActivity2) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingActivity>> for ILoggingActivity2 {
                fn into(self) -> ::windows::Param<'a, ILoggingActivity> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingActivity>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingActivity>> for &'a ILoggingActivity2 {
                fn into(self) -> ::windows::Param<'a, ILoggingActivity> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingActivity>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ILoggingActivity2> for ILoggingTarget {
                fn from(value: ILoggingActivity2) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILoggingActivity2> for ILoggingTarget {
                fn from(value: &ILoggingActivity2) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingTarget>> for ILoggingActivity2 {
                fn into(self) -> ::windows::Param<'a, ILoggingTarget> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingTarget>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingTarget>> for &'a ILoggingActivity2 {
                fn into(self) -> ::windows::Param<'a, ILoggingTarget> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingTarget>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct ILoggingSession(::windows::Object);
            impl ::std::clone::Clone for ILoggingSession {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingSession {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingSession {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingSession {}
            impl ILoggingSession {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<super::IClosable>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn name(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn save_to_file_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::storage::IStorageFolder>,
                    >,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    folder: T0__,
                    file_name: T1__,
                ) -> ::windows::Result<super::IAsyncOperation<super::super::storage::StorageFile>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::IAsyncOperation<
                            super::super::storage::StorageFile,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            folder.into().abi(),
                            file_name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::IAsyncOperation<
                            super::super::storage::StorageFile,
                        >>(result__)
                    }
                }
                pub fn add_logging_channel<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    logging_channel: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            logging_channel.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_logging_channel_with_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    logging_channel: T0__,
                    max_level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            logging_channel.into().abi(),
                            max_level,
                        )
                        .ok()
                    }
                }
                pub fn remove_logging_channel<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    logging_channel: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            logging_channel.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingSession {
                type Vtable = ILoggingSession_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1646392070,
                    37760,
                    19159,
                    [186, 245, 65, 234, 147, 16, 215, 104],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingSession_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    folder: ::windows::RawPtr,
                    file_name: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    logging_channel: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    logging_channel: ::windows::RawPtr,
                    max_level: LoggingLevel,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    logging_channel: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingSession {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{6221f306-9380-4ad7-baf5-41ea9310d768}")
                };
            }
            impl ::std::convert::From<ILoggingSession> for ::windows::Object {
                fn from(value: ILoggingSession) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingSession> for ::windows::Object {
                fn from(value: &ILoggingSession) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingSession {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a ILoggingSession {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ILoggingSession> for super::IClosable {
                fn from(value: ILoggingSession) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILoggingSession> for super::IClosable {
                fn from(value: &ILoggingSession) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for ILoggingSession {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for &'a ILoggingSession {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct LoggingSession(::windows::Object);
            impl LoggingSession {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<super::IClosable>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn name(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn save_to_file_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::storage::IStorageFolder>,
                    >,
                    T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    folder: T0__,
                    file_name: T1__,
                ) -> ::windows::Result<super::IAsyncOperation<super::super::storage::StorageFile>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::IAsyncOperation<
                            super::super::storage::StorageFile,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            folder.into().abi(),
                            file_name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::IAsyncOperation<
                            super::super::storage::StorageFile,
                        >>(result__)
                    }
                }
                pub fn add_logging_channel<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    logging_channel: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            logging_channel.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn add_logging_channel_with_level<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    logging_channel: T0__,
                    max_level: LoggingLevel,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            logging_channel.into().abi(),
                            max_level,
                        )
                        .ok()
                    }
                }
                pub fn remove_logging_channel<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ILoggingChannel>>,
                >(
                    &self,
                    logging_channel: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            logging_channel.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn create<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    name: T0__,
                ) -> ::windows::Result<LoggingSession> {
                    Self::ILoggingSessionFactory(|this| unsafe {
                        let mut result__: <LoggingSession as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingSession>(result__)
                    })
                }
                #[allow(non_snake_case)]
                fn ILoggingSessionFactory<
                    R,
                    F: FnOnce(&ILoggingSessionFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        LoggingSession,
                        ILoggingSessionFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for LoggingSession {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for LoggingSession {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for LoggingSession {}
            impl ::std::fmt::Debug for LoggingSession {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for LoggingSession {
                const NAME: &'static str = "Windows.Foundation.Diagnostics.LoggingSession";
            }
            unsafe impl ::windows::Interface for LoggingSession {
                type Vtable = ILoggingSession_abi;
                const IID: ::windows::Guid = <ILoggingSession as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for LoggingSession {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Diagnostics.LoggingSession;{6221f306-9380-4ad7-baf5-41ea9310d768})" ) ;
            }
            impl ::std::convert::From<LoggingSession> for ::windows::Object {
                fn from(value: LoggingSession) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&LoggingSession> for ::windows::Object {
                fn from(value: &LoggingSession) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for LoggingSession {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a LoggingSession {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingSession> for super::IClosable {
                fn from(value: LoggingSession) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LoggingSession> for super::IClosable {
                fn from(value: &LoggingSession) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for LoggingSession {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::IClosable>> for &'a LoggingSession {
                fn into(self) -> ::windows::Param<'a, super::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<super::IClosable>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LoggingSession> for ILoggingSession {
                fn from(value: LoggingSession) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&LoggingSession> for ILoggingSession {
                fn from(value: &LoggingSession) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingSession>> for LoggingSession {
                fn into(self) -> ::windows::Param<'a, ILoggingSession> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingSession>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ILoggingSession>> for &'a LoggingSession {
                fn into(self) -> ::windows::Param<'a, ILoggingSession> {
                    ::windows::Param::Owned(::std::convert::Into::<ILoggingSession>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for LoggingSession {}
            unsafe impl ::std::marker::Sync for LoggingSession {}
            #[repr(transparent)]
            pub struct ILoggingSessionFactory(::windows::Object);
            impl ::std::clone::Clone for ILoggingSessionFactory {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for ILoggingSessionFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for ILoggingSessionFactory {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ILoggingSessionFactory {}
            impl ILoggingSessionFactory {
                pub fn create<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    name: T0__,
                ) -> ::windows::Result<LoggingSession> {
                    let this = self;
                    unsafe {
                        let mut result__: <LoggingSession as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            name.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<LoggingSession>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for ILoggingSessionFactory {
                type Vtable = ILoggingSessionFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1318289125,
                    22781,
                    17888,
                    [140, 47, 161, 50, 239, 249, 92, 30],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILoggingSessionFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for ILoggingSessionFactory {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{4e937ee5-58fd-45e0-8c2f-a132eff95c1e}")
                };
            }
            impl ::std::convert::From<ILoggingSessionFactory> for ::windows::Object {
                fn from(value: ILoggingSessionFactory) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILoggingSessionFactory> for ::windows::Object {
                fn from(value: &ILoggingSessionFactory) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ILoggingSessionFactory {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a ILoggingSessionFactory
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct RuntimeBrokerErrorSettings(::windows::Object);
            impl RuntimeBrokerErrorSettings {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                pub fn set_error_options(&self, value: ErrorOptions) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn get_error_options(&self) -> ::windows::Result<ErrorOptions> {
                    let this = self;
                    unsafe {
                        let mut result__: <ErrorOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ErrorOptions>(result__)
                    }
                }
                #[allow(non_snake_case)]
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        RuntimeBrokerErrorSettings,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for RuntimeBrokerErrorSettings {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for RuntimeBrokerErrorSettings {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for RuntimeBrokerErrorSettings {}
            impl ::std::fmt::Debug for RuntimeBrokerErrorSettings {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for RuntimeBrokerErrorSettings {
                const NAME: &'static str =
                    "Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings";
            }
            unsafe impl ::windows::Interface for RuntimeBrokerErrorSettings {
                type Vtable = IErrorReportingSettings_abi;
                const IID: ::windows::Guid = <IErrorReportingSettings as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for RuntimeBrokerErrorSettings {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings;{16369792-b03e-4ba1-8bb8-d28f4ab4d2c0})" ) ;
            }
            impl ::std::convert::From<RuntimeBrokerErrorSettings> for ::windows::Object {
                fn from(value: RuntimeBrokerErrorSettings) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&RuntimeBrokerErrorSettings> for ::windows::Object {
                fn from(value: &RuntimeBrokerErrorSettings) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for RuntimeBrokerErrorSettings
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a RuntimeBrokerErrorSettings
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<RuntimeBrokerErrorSettings> for IErrorReportingSettings {
                fn from(value: RuntimeBrokerErrorSettings) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&RuntimeBrokerErrorSettings> for IErrorReportingSettings {
                fn from(value: &RuntimeBrokerErrorSettings) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IErrorReportingSettings>>
                for RuntimeBrokerErrorSettings
            {
                fn into(self) -> ::windows::Param<'a, IErrorReportingSettings> {
                    ::windows::Param::Owned(::std::convert::Into::<IErrorReportingSettings>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IErrorReportingSettings>>
                for &'a RuntimeBrokerErrorSettings
            {
                fn into(self) -> ::windows::Param<'a, IErrorReportingSettings> {
                    ::windows::Param::Owned(::std::convert::Into::<IErrorReportingSettings>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for RuntimeBrokerErrorSettings {}
            unsafe impl ::std::marker::Sync for RuntimeBrokerErrorSettings {}
        }
        #[allow(unused_variables)]
        #[allow(non_upper_case_globals)]
        pub mod numerics {
            #[repr(C)]
            #[allow(non_snake_case)]
            pub struct Matrix3x2 {
                pub m11: f32,
                pub m12: f32,
                pub m21: f32,
                pub m22: f32,
                pub m31: f32,
                pub m32: f32,
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct Matrix3x2_abi(f32, f32, f32, f32, f32, f32);
            unsafe impl ::windows::Abi for Matrix3x2 {
                type Abi = Matrix3x2_abi;
            }
            impl ::std::default::Default for Matrix3x2 {
                fn default() -> Self {
                    Self {
                        m11: 0.0,
                        m12: 0.0,
                        m21: 0.0,
                        m22: 0.0,
                        m31: 0.0,
                        m32: 0.0,
                    }
                }
            }
            impl ::std::fmt::Debug for Matrix3x2 {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("Matrix3x2")
                        .field("m11", &format_args!("{:?}", self.m11))
                        .field("m12", &format_args!("{:?}", self.m12))
                        .field("m21", &format_args!("{:?}", self.m21))
                        .field("m22", &format_args!("{:?}", self.m22))
                        .field("m31", &format_args!("{:?}", self.m31))
                        .field("m32", &format_args!("{:?}", self.m32))
                        .finish()
                }
            }
            impl ::std::clone::Clone for Matrix3x2 {
                fn clone(&self) -> Self {
                    Self {
                        m11: self.m11,
                        m12: self.m12,
                        m21: self.m21,
                        m22: self.m22,
                        m31: self.m31,
                        m32: self.m32,
                    }
                }
            }
            impl ::std::cmp::PartialEq for Matrix3x2 {
                fn eq(&self, other: &Self) -> bool {
                    self.m11 == other.m11
                        && self.m12 == other.m12
                        && self.m21 == other.m21
                        && self.m22 == other.m22
                        && self.m31 == other.m31
                        && self.m32 == other.m32
                }
            }
            impl ::std::cmp::Eq for Matrix3x2 {}
            unsafe impl ::windows::RuntimeType for Matrix3x2 {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"struct(Windows.Foundation.Numerics.Matrix3x2;f4;f4;f4;f4;f4;f4)",
                );
            }
            #[repr(C)]
            #[allow(non_snake_case)]
            pub struct Matrix4x4 {
                pub m11: f32,
                pub m12: f32,
                pub m13: f32,
                pub m14: f32,
                pub m21: f32,
                pub m22: f32,
                pub m23: f32,
                pub m24: f32,
                pub m31: f32,
                pub m32: f32,
                pub m33: f32,
                pub m34: f32,
                pub m41: f32,
                pub m42: f32,
                pub m43: f32,
                pub m44: f32,
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct Matrix4x4_abi(
                f32,
                f32,
                f32,
                f32,
                f32,
                f32,
                f32,
                f32,
                f32,
                f32,
                f32,
                f32,
                f32,
                f32,
                f32,
                f32,
            );
            unsafe impl ::windows::Abi for Matrix4x4 {
                type Abi = Matrix4x4_abi;
            }
            impl ::std::default::Default for Matrix4x4 {
                fn default() -> Self {
                    Self {
                        m11: 0.0,
                        m12: 0.0,
                        m13: 0.0,
                        m14: 0.0,
                        m21: 0.0,
                        m22: 0.0,
                        m23: 0.0,
                        m24: 0.0,
                        m31: 0.0,
                        m32: 0.0,
                        m33: 0.0,
                        m34: 0.0,
                        m41: 0.0,
                        m42: 0.0,
                        m43: 0.0,
                        m44: 0.0,
                    }
                }
            }
            impl ::std::fmt::Debug for Matrix4x4 {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("Matrix4x4")
                        .field("m11", &format_args!("{:?}", self.m11))
                        .field("m12", &format_args!("{:?}", self.m12))
                        .field("m13", &format_args!("{:?}", self.m13))
                        .field("m14", &format_args!("{:?}", self.m14))
                        .field("m21", &format_args!("{:?}", self.m21))
                        .field("m22", &format_args!("{:?}", self.m22))
                        .field("m23", &format_args!("{:?}", self.m23))
                        .field("m24", &format_args!("{:?}", self.m24))
                        .field("m31", &format_args!("{:?}", self.m31))
                        .field("m32", &format_args!("{:?}", self.m32))
                        .field("m33", &format_args!("{:?}", self.m33))
                        .field("m34", &format_args!("{:?}", self.m34))
                        .field("m41", &format_args!("{:?}", self.m41))
                        .field("m42", &format_args!("{:?}", self.m42))
                        .field("m43", &format_args!("{:?}", self.m43))
                        .field("m44", &format_args!("{:?}", self.m44))
                        .finish()
                }
            }
            impl ::std::clone::Clone for Matrix4x4 {
                fn clone(&self) -> Self {
                    Self {
                        m11: self.m11,
                        m12: self.m12,
                        m13: self.m13,
                        m14: self.m14,
                        m21: self.m21,
                        m22: self.m22,
                        m23: self.m23,
                        m24: self.m24,
                        m31: self.m31,
                        m32: self.m32,
                        m33: self.m33,
                        m34: self.m34,
                        m41: self.m41,
                        m42: self.m42,
                        m43: self.m43,
                        m44: self.m44,
                    }
                }
            }
            impl ::std::cmp::PartialEq for Matrix4x4 {
                fn eq(&self, other: &Self) -> bool {
                    self.m11 == other.m11
                        && self.m12 == other.m12
                        && self.m13 == other.m13
                        && self.m14 == other.m14
                        && self.m21 == other.m21
                        && self.m22 == other.m22
                        && self.m23 == other.m23
                        && self.m24 == other.m24
                        && self.m31 == other.m31
                        && self.m32 == other.m32
                        && self.m33 == other.m33
                        && self.m34 == other.m34
                        && self.m41 == other.m41
                        && self.m42 == other.m42
                        && self.m43 == other.m43
                        && self.m44 == other.m44
                }
            }
            impl ::std::cmp::Eq for Matrix4x4 {}
            unsafe impl ::windows::RuntimeType for Matrix4x4 {
                type DefaultType = Self;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"struct(Windows.Foundation.Numerics.Matrix4x4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4)" ) ;
            }
            #[repr(C)]
            #[allow(non_snake_case)]
            pub struct Vector3 {
                pub x: f32,
                pub y: f32,
                pub z: f32,
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct Vector3_abi(f32, f32, f32);
            unsafe impl ::windows::Abi for Vector3 {
                type Abi = Vector3_abi;
            }
            impl ::std::default::Default for Vector3 {
                fn default() -> Self {
                    Self {
                        x: 0.0,
                        y: 0.0,
                        z: 0.0,
                    }
                }
            }
            impl ::std::fmt::Debug for Vector3 {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("Vector3")
                        .field("x", &format_args!("{:?}", self.x))
                        .field("y", &format_args!("{:?}", self.y))
                        .field("z", &format_args!("{:?}", self.z))
                        .finish()
                }
            }
            impl ::std::clone::Clone for Vector3 {
                fn clone(&self) -> Self {
                    Self {
                        x: self.x,
                        y: self.y,
                        z: self.z,
                    }
                }
            }
            impl ::std::cmp::PartialEq for Vector3 {
                fn eq(&self, other: &Self) -> bool {
                    self.x == other.x && self.y == other.y && self.z == other.z
                }
            }
            impl ::std::cmp::Eq for Vector3 {}
            unsafe impl ::windows::RuntimeType for Vector3 {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"struct(Windows.Foundation.Numerics.Vector3;f4;f4;f4)",
                );
            }
            #[repr(C)]
            #[allow(non_snake_case)]
            pub struct Plane {
                pub normal: Vector3,
                pub d: f32,
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct Plane_abi(Vector3_abi, f32);
            unsafe impl ::windows::Abi for Plane {
                type Abi = Plane_abi;
            }
            impl ::std::default::Default for Plane {
                fn default() -> Self {
                    Self {
                        normal: ::std::default::Default::default(),
                        d: 0.0,
                    }
                }
            }
            impl ::std::fmt::Debug for Plane {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("Plane")
                        .field("normal", &format_args!("{:?}", self.normal))
                        .field("d", &format_args!("{:?}", self.d))
                        .finish()
                }
            }
            impl ::std::clone::Clone for Plane {
                fn clone(&self) -> Self {
                    Self {
                        normal: <Vector3 as std::clone::Clone>::clone(&self.normal),
                        d: self.d,
                    }
                }
            }
            impl ::std::cmp::PartialEq for Plane {
                fn eq(&self, other: &Self) -> bool {
                    self.normal == other.normal && self.d == other.d
                }
            }
            impl ::std::cmp::Eq for Plane {}
            unsafe impl ::windows::RuntimeType for Plane {
                type DefaultType = Self;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"struct(Windows.Foundation.Numerics.Plane;struct(Windows.Foundation.Numerics.Vector3;f4;f4;f4);f4)" ) ;
            }
            #[repr(C)]
            #[allow(non_snake_case)]
            pub struct Quaternion {
                pub x: f32,
                pub y: f32,
                pub z: f32,
                pub w: f32,
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct Quaternion_abi(f32, f32, f32, f32);
            unsafe impl ::windows::Abi for Quaternion {
                type Abi = Quaternion_abi;
            }
            impl ::std::default::Default for Quaternion {
                fn default() -> Self {
                    Self {
                        x: 0.0,
                        y: 0.0,
                        z: 0.0,
                        w: 0.0,
                    }
                }
            }
            impl ::std::fmt::Debug for Quaternion {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("Quaternion")
                        .field("x", &format_args!("{:?}", self.x))
                        .field("y", &format_args!("{:?}", self.y))
                        .field("z", &format_args!("{:?}", self.z))
                        .field("w", &format_args!("{:?}", self.w))
                        .finish()
                }
            }
            impl ::std::clone::Clone for Quaternion {
                fn clone(&self) -> Self {
                    Self {
                        x: self.x,
                        y: self.y,
                        z: self.z,
                        w: self.w,
                    }
                }
            }
            impl ::std::cmp::PartialEq for Quaternion {
                fn eq(&self, other: &Self) -> bool {
                    self.x == other.x && self.y == other.y && self.z == other.z && self.w == other.w
                }
            }
            impl ::std::cmp::Eq for Quaternion {}
            unsafe impl ::windows::RuntimeType for Quaternion {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"struct(Windows.Foundation.Numerics.Quaternion;f4;f4;f4;f4)",
                );
            }
            #[repr(C)]
            #[allow(non_snake_case)]
            pub struct Rational {
                pub numerator: u32,
                pub denominator: u32,
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct Rational_abi(u32, u32);
            unsafe impl ::windows::Abi for Rational {
                type Abi = Rational_abi;
            }
            impl ::std::default::Default for Rational {
                fn default() -> Self {
                    Self {
                        numerator: 0,
                        denominator: 0,
                    }
                }
            }
            impl ::std::fmt::Debug for Rational {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("Rational")
                        .field("numerator", &format_args!("{:?}", self.numerator))
                        .field("denominator", &format_args!("{:?}", self.denominator))
                        .finish()
                }
            }
            impl ::std::clone::Clone for Rational {
                fn clone(&self) -> Self {
                    Self {
                        numerator: self.numerator,
                        denominator: self.denominator,
                    }
                }
            }
            impl ::std::cmp::PartialEq for Rational {
                fn eq(&self, other: &Self) -> bool {
                    self.numerator == other.numerator && self.denominator == other.denominator
                }
            }
            impl ::std::cmp::Eq for Rational {}
            unsafe impl ::windows::RuntimeType for Rational {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"struct(Windows.Foundation.Numerics.Rational;u4;u4)",
                );
            }
            #[repr(C)]
            #[allow(non_snake_case)]
            pub struct Vector2 {
                pub x: f32,
                pub y: f32,
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct Vector2_abi(f32, f32);
            unsafe impl ::windows::Abi for Vector2 {
                type Abi = Vector2_abi;
            }
            impl ::std::default::Default for Vector2 {
                fn default() -> Self {
                    Self { x: 0.0, y: 0.0 }
                }
            }
            impl ::std::fmt::Debug for Vector2 {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("Vector2")
                        .field("x", &format_args!("{:?}", self.x))
                        .field("y", &format_args!("{:?}", self.y))
                        .finish()
                }
            }
            impl ::std::clone::Clone for Vector2 {
                fn clone(&self) -> Self {
                    Self {
                        x: self.x,
                        y: self.y,
                    }
                }
            }
            impl ::std::cmp::PartialEq for Vector2 {
                fn eq(&self, other: &Self) -> bool {
                    self.x == other.x && self.y == other.y
                }
            }
            impl ::std::cmp::Eq for Vector2 {}
            unsafe impl ::windows::RuntimeType for Vector2 {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"struct(Windows.Foundation.Numerics.Vector2;f4;f4)",
                );
            }
            #[repr(C)]
            #[allow(non_snake_case)]
            pub struct Vector4 {
                pub x: f32,
                pub y: f32,
                pub z: f32,
                pub w: f32,
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct Vector4_abi(f32, f32, f32, f32);
            unsafe impl ::windows::Abi for Vector4 {
                type Abi = Vector4_abi;
            }
            impl ::std::default::Default for Vector4 {
                fn default() -> Self {
                    Self {
                        x: 0.0,
                        y: 0.0,
                        z: 0.0,
                        w: 0.0,
                    }
                }
            }
            impl ::std::fmt::Debug for Vector4 {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("Vector4")
                        .field("x", &format_args!("{:?}", self.x))
                        .field("y", &format_args!("{:?}", self.y))
                        .field("z", &format_args!("{:?}", self.z))
                        .field("w", &format_args!("{:?}", self.w))
                        .finish()
                }
            }
            impl ::std::clone::Clone for Vector4 {
                fn clone(&self) -> Self {
                    Self {
                        x: self.x,
                        y: self.y,
                        z: self.z,
                        w: self.w,
                    }
                }
            }
            impl ::std::cmp::PartialEq for Vector4 {
                fn eq(&self, other: &Self) -> bool {
                    self.x == other.x && self.y == other.y && self.z == other.z && self.w == other.w
                }
            }
            impl ::std::cmp::Eq for Vector4 {}
            unsafe impl ::windows::RuntimeType for Vector4 {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"struct(Windows.Foundation.Numerics.Vector4;f4;f4;f4;f4)",
                );
            }
        }
    }
    #[allow(unused_variables)]
    #[allow(non_upper_case_globals)]
    pub mod storage {
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct FileAccessMode(pub i32);
        impl ::std::convert::From<i32> for FileAccessMode {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for FileAccessMode {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for FileAccessMode {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for FileAccessMode {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for FileAccessMode {}
        impl FileAccessMode {
            #![allow(non_upper_case_globals)]
            pub const Read: Self = Self(0i32);
            pub const ReadWrite: Self = Self(1i32);
        }
        unsafe impl ::windows::Abi for FileAccessMode {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for FileAccessMode {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"enum(Windows.Storage.FileAccessMode;i4)");
        }
        #[repr(transparent)]
        pub struct IStorageStreamTransaction(::windows::Object);
        impl ::std::clone::Clone for IStorageStreamTransaction {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageStreamTransaction {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageStreamTransaction {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageStreamTransaction {}
        impl IStorageStreamTransaction {
            pub fn close(&self) -> ::windows::Result<()> {
                let this =
                    &::windows::Interface::cast::<super::foundation::IClosable>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
            pub fn stream(&self) -> ::windows::Result<streams::IRandomAccessStream> {
                let this = self;
                unsafe {
                    let mut result__: <streams::IRandomAccessStream as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<streams::IRandomAccessStream>(result__)
                }
            }
            pub fn commit_async(&self) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageStreamTransaction {
            type Vtable = IStorageStreamTransaction_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                4135383907,
                42301,
                19860,
                [174, 44, 103, 35, 45, 147, 172, 221],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageStreamTransaction_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageStreamTransaction {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{f67cf363-a53d-4d94-ae2c-67232d93acdd}") };
        }
        impl ::std::convert::From<IStorageStreamTransaction> for ::windows::Object {
            fn from(value: IStorageStreamTransaction) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageStreamTransaction> for ::windows::Object {
            fn from(value: &IStorageStreamTransaction) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IStorageStreamTransaction
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IStorageStreamTransaction
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageStreamTransaction> for super::foundation::IClosable {
            fn from(value: IStorageStreamTransaction) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageStreamTransaction> for super::foundation::IClosable {
            fn from(value: &IStorageStreamTransaction) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, super::foundation::IClosable>>
            for IStorageStreamTransaction
        {
            fn into(self) -> ::windows::Param<'a, super::foundation::IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, super::foundation::IClosable>>
            for &'a IStorageStreamTransaction
        {
            fn into(self) -> ::windows::Param<'a, super::foundation::IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct StorageStreamTransaction(::windows::Object);
        impl StorageStreamTransaction {
            pub fn close(&self) -> ::windows::Result<()> {
                let this =
                    &::windows::Interface::cast::<super::foundation::IClosable>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
            pub fn stream(&self) -> ::windows::Result<streams::IRandomAccessStream> {
                let this = self;
                unsafe {
                    let mut result__: <streams::IRandomAccessStream as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<streams::IRandomAccessStream>(result__)
                }
            }
            pub fn commit_async(&self) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
        }
        impl ::std::clone::Clone for StorageStreamTransaction {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for StorageStreamTransaction {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for StorageStreamTransaction {}
        impl ::std::fmt::Debug for StorageStreamTransaction {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for StorageStreamTransaction {
            const NAME: &'static str = "Windows.Storage.StorageStreamTransaction";
        }
        unsafe impl ::windows::Interface for StorageStreamTransaction {
            type Vtable = IStorageStreamTransaction_abi;
            const IID: ::windows::Guid = <IStorageStreamTransaction as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for StorageStreamTransaction {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.StorageStreamTransaction;{f67cf363-a53d-4d94-ae2c-67232d93acdd})" ) ;
        }
        impl ::std::convert::From<StorageStreamTransaction> for ::windows::Object {
            fn from(value: StorageStreamTransaction) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&StorageStreamTransaction> for ::windows::Object {
            fn from(value: &StorageStreamTransaction) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for StorageStreamTransaction
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a StorageStreamTransaction
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageStreamTransaction> for super::foundation::IClosable {
            fn from(value: StorageStreamTransaction) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageStreamTransaction> for super::foundation::IClosable {
            fn from(value: &StorageStreamTransaction) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, super::foundation::IClosable>>
            for StorageStreamTransaction
        {
            fn into(self) -> ::windows::Param<'a, super::foundation::IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, super::foundation::IClosable>>
            for &'a StorageStreamTransaction
        {
            fn into(self) -> ::windows::Param<'a, super::foundation::IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageStreamTransaction> for IStorageStreamTransaction {
            fn from(value: StorageStreamTransaction) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageStreamTransaction> for IStorageStreamTransaction {
            fn from(value: &StorageStreamTransaction) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageStreamTransaction>>
            for StorageStreamTransaction
        {
            fn into(self) -> ::windows::Param<'a, IStorageStreamTransaction> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageStreamTransaction>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageStreamTransaction>>
            for &'a StorageStreamTransaction
        {
            fn into(self) -> ::windows::Param<'a, IStorageStreamTransaction> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageStreamTransaction>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct CreationCollisionOption(pub i32);
        impl ::std::convert::From<i32> for CreationCollisionOption {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for CreationCollisionOption {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for CreationCollisionOption {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for CreationCollisionOption {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for CreationCollisionOption {}
        impl CreationCollisionOption {
            #![allow(non_upper_case_globals)]
            pub const GenerateUniqueName: Self = Self(0i32);
            pub const ReplaceExisting: Self = Self(1i32);
            pub const FailIfExists: Self = Self(2i32);
            pub const OpenIfExists: Self = Self(3i32);
        }
        unsafe impl ::windows::Abi for CreationCollisionOption {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for CreationCollisionOption {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"enum(Windows.Storage.CreationCollisionOption;i4)",
            );
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct NameCollisionOption(pub i32);
        impl ::std::convert::From<i32> for NameCollisionOption {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for NameCollisionOption {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for NameCollisionOption {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for NameCollisionOption {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for NameCollisionOption {}
        impl NameCollisionOption {
            #![allow(non_upper_case_globals)]
            pub const GenerateUniqueName: Self = Self(0i32);
            pub const ReplaceExisting: Self = Self(1i32);
            pub const FailIfExists: Self = Self(2i32);
        }
        unsafe impl ::windows::Abi for NameCollisionOption {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for NameCollisionOption {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"enum(Windows.Storage.NameCollisionOption;i4)");
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct StorageDeleteOption(pub i32);
        impl ::std::convert::From<i32> for StorageDeleteOption {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for StorageDeleteOption {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for StorageDeleteOption {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for StorageDeleteOption {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for StorageDeleteOption {}
        impl StorageDeleteOption {
            #![allow(non_upper_case_globals)]
            pub const Default: Self = Self(0i32);
            pub const PermanentDelete: Self = Self(1i32);
        }
        unsafe impl ::windows::Abi for StorageDeleteOption {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for StorageDeleteOption {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"enum(Windows.Storage.StorageDeleteOption;i4)");
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct FileAttributes(pub u32);
        impl ::std::convert::From<u32> for FileAttributes {
            fn from(value: u32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for FileAttributes {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for FileAttributes {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for FileAttributes {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for FileAttributes {}
        impl FileAttributes {
            #![allow(non_upper_case_globals)]
            pub const Normal: Self = Self(0u32);
            pub const ReadOnly: Self = Self(1u32);
            pub const Directory: Self = Self(16u32);
            pub const Archive: Self = Self(32u32);
            pub const Temporary: Self = Self(256u32);
            pub const LocallyIncomplete: Self = Self(512u32);
        }
        unsafe impl ::windows::Abi for FileAttributes {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for FileAttributes {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"enum(Windows.Storage.FileAttributes;u4)");
        }
        impl ::std::ops::BitOr for FileAttributes {
            type Output = Self;
            fn bitor(self, rhs: Self) -> Self {
                Self(self.0 | rhs.0)
            }
        }
        impl ::std::ops::BitAnd for FileAttributes {
            type Output = Self;
            fn bitand(self, rhs: Self) -> Self {
                Self(self.0 & rhs.0)
            }
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct StorageItemTypes(pub u32);
        impl ::std::convert::From<u32> for StorageItemTypes {
            fn from(value: u32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for StorageItemTypes {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for StorageItemTypes {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for StorageItemTypes {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for StorageItemTypes {}
        impl StorageItemTypes {
            #![allow(non_upper_case_globals)]
            pub const None: Self = Self(0u32);
            pub const File: Self = Self(1u32);
            pub const Folder: Self = Self(2u32);
        }
        unsafe impl ::windows::Abi for StorageItemTypes {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for StorageItemTypes {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"enum(Windows.Storage.StorageItemTypes;u4)");
        }
        impl ::std::ops::BitOr for StorageItemTypes {
            type Output = Self;
            fn bitor(self, rhs: Self) -> Self {
                Self(self.0 | rhs.0)
            }
        }
        impl ::std::ops::BitAnd for StorageItemTypes {
            type Output = Self;
            fn bitand(self, rhs: Self) -> Self {
                Self(self.0 & rhs.0)
            }
        }
        #[repr(transparent)]
        pub struct IStorageItem(::windows::Object);
        impl ::std::clone::Clone for IStorageItem {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageItem {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageItem {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageItem {}
        impl IStorageItem {
            pub fn rename_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn rename_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
                option: NameCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn delete_async_overload_default_options(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn delete_async(
                &self,
                option: StorageDeleteOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn get_basic_properties_async(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::BasicProperties>,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    >>(result__)
                }
            }
            pub fn name(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn path(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn attributes(&self) -> ::windows::Result<FileAttributes> {
                let this = self;
                unsafe {
                    let mut result__: <FileAttributes as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<FileAttributes>(result__)
                }
            }
            pub fn date_created(&self) -> ::windows::Result<super::foundation::DateTime> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::DateTime as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::DateTime>(result__)
                }
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        r#type,
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageItem {
            type Vtable = IStorageItem_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1107798422,
                51759,
                17143,
                [189, 232, 139, 16, 69, 122, 127, 48],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageItem_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                desired_name: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                desired_name: ::windows::RawPtr,
                option: NameCollisionOption,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                option: StorageDeleteOption,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut FileAttributes,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut super::foundation::DateTime_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                r#type: StorageItemTypes,
                result__: *mut bool,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageItem {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{4207a996-ca2f-42f7-bde8-8b10457a7f30}") };
        }
        impl ::std::convert::From<IStorageItem> for ::windows::Object {
            fn from(value: IStorageItem) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageItem> for ::windows::Object {
            fn from(value: &IStorageItem) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageItem {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IStorageItem {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFolder2(::windows::Object);
        impl ::std::clone::Clone for IStorageFolder2 {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageFolder2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageFolder2 {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageFolder2 {}
        impl IStorageFolder2 {
            pub fn try_get_item_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<IStorageItem>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < IStorageItem > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<IStorageItem>>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageFolder2 {
            type Vtable = IStorageFolder2_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                3894929593,
                2265,
                19086,
                [160, 172, 254, 94, 211, 203, 187, 211],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageFolder2_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                name: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageFolder2 {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{e827e8b9-08d9-4a8e-a0ac-fe5ed3cbbbd3}") };
        }
        impl ::std::convert::From<IStorageFolder2> for ::windows::Object {
            fn from(value: IStorageFolder2) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageFolder2> for ::windows::Object {
            fn from(value: &IStorageFolder2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageFolder2 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IStorageFolder2 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct StorageLibraryChangeType(pub i32);
        impl ::std::convert::From<i32> for StorageLibraryChangeType {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for StorageLibraryChangeType {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for StorageLibraryChangeType {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for StorageLibraryChangeType {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for StorageLibraryChangeType {}
        impl StorageLibraryChangeType {
            #![allow(non_upper_case_globals)]
            pub const Created: Self = Self(0i32);
            pub const Deleted: Self = Self(1i32);
            pub const MovedOrRenamed: Self = Self(2i32);
            pub const ContentsChanged: Self = Self(3i32);
            pub const MovedOutOfLibrary: Self = Self(4i32);
            pub const MovedIntoLibrary: Self = Self(5i32);
            pub const ContentsReplaced: Self = Self(6i32);
            pub const IndexingStatusChanged: Self = Self(7i32);
            pub const EncryptionChanged: Self = Self(8i32);
            pub const ChangeTrackingLost: Self = Self(9i32);
        }
        unsafe impl ::windows::Abi for StorageLibraryChangeType {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for StorageLibraryChangeType {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"enum(Windows.Storage.StorageLibraryChangeType;i4)",
            );
        }
        #[repr(transparent)]
        pub struct IStorageLibraryChange(::windows::Object);
        impl ::std::clone::Clone for IStorageLibraryChange {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageLibraryChange {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageLibraryChange {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageLibraryChange {}
        impl IStorageLibraryChange {
            pub fn change_type(&self) -> ::windows::Result<StorageLibraryChangeType> {
                let this = self;
                unsafe {
                    let mut result__: <StorageLibraryChangeType as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<StorageLibraryChangeType>(result__)
                }
            }
            pub fn path(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn previous_path(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        r#type,
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn get_storage_item_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<IStorageItem>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < IStorageItem > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<IStorageItem>>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageLibraryChange {
            type Vtable = IStorageLibraryChange_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                9964323,
                11234,
                18697,
                [170, 72, 21, 159, 82, 3, 165, 30],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageLibraryChange_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut StorageLibraryChangeType,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                r#type: StorageItemTypes,
                result__: *mut bool,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageLibraryChange {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{00980b23-2be2-4909-aa48-159f5203a51e}") };
        }
        impl ::std::convert::From<IStorageLibraryChange> for ::windows::Object {
            fn from(value: IStorageLibraryChange) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageLibraryChange> for ::windows::Object {
            fn from(value: &IStorageLibraryChange) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageLibraryChange {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IStorageLibraryChange
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct StorageLibraryChange(::windows::Object);
        impl StorageLibraryChange {
            pub fn change_type(&self) -> ::windows::Result<StorageLibraryChangeType> {
                let this = self;
                unsafe {
                    let mut result__: <StorageLibraryChangeType as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<StorageLibraryChangeType>(result__)
                }
            }
            pub fn path(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn previous_path(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        r#type,
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn get_storage_item_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<IStorageItem>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < IStorageItem > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<IStorageItem>>(result__)
                }
            }
        }
        impl ::std::clone::Clone for StorageLibraryChange {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for StorageLibraryChange {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for StorageLibraryChange {}
        impl ::std::fmt::Debug for StorageLibraryChange {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for StorageLibraryChange {
            const NAME: &'static str = "Windows.Storage.StorageLibraryChange";
        }
        unsafe impl ::windows::Interface for StorageLibraryChange {
            type Vtable = IStorageLibraryChange_abi;
            const IID: ::windows::Guid = <IStorageLibraryChange as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for StorageLibraryChange {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"rc(Windows.Storage.StorageLibraryChange;{00980b23-2be2-4909-aa48-159f5203a51e})",
            );
        }
        impl ::std::convert::From<StorageLibraryChange> for ::windows::Object {
            fn from(value: StorageLibraryChange) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&StorageLibraryChange> for ::windows::Object {
            fn from(value: &StorageLibraryChange) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for StorageLibraryChange {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a StorageLibraryChange
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageLibraryChange> for IStorageLibraryChange {
            fn from(value: StorageLibraryChange) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageLibraryChange> for IStorageLibraryChange {
            fn from(value: &StorageLibraryChange) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageLibraryChange>>
            for StorageLibraryChange
        {
            fn into(self) -> ::windows::Param<'a, IStorageLibraryChange> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageLibraryChange>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageLibraryChange>>
            for &'a StorageLibraryChange
        {
            fn into(self) -> ::windows::Param<'a, IStorageLibraryChange> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageLibraryChange>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        unsafe impl ::std::marker::Send for StorageLibraryChange {}
        unsafe impl ::std::marker::Sync for StorageLibraryChange {}
        #[repr(transparent)]
        pub struct IStorageLibraryChangeReader(::windows::Object);
        impl ::std::clone::Clone for IStorageLibraryChangeReader {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageLibraryChangeReader {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageLibraryChangeReader {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageLibraryChangeReader {}
        impl IStorageLibraryChangeReader {
            pub fn read_batch_async(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageLibraryChange>,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageLibraryChange>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<
                            super::foundation::collections::IVectorView<StorageLibraryChange>,
                        >>(result__)
                }
            }
            pub fn accept_changes_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageLibraryChangeReader {
            type Vtable = IStorageLibraryChangeReader_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                4060462211,
                64674,
                16889,
                [137, 84, 238, 46, 153, 30, 185, 111],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageLibraryChangeReader_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageLibraryChangeReader {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{f205bc83-fca2-41f9-8954-ee2e991eb96f}") };
        }
        impl ::std::convert::From<IStorageLibraryChangeReader> for ::windows::Object {
            fn from(value: IStorageLibraryChangeReader) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageLibraryChangeReader> for ::windows::Object {
            fn from(value: &IStorageLibraryChangeReader) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IStorageLibraryChangeReader
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IStorageLibraryChangeReader
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct StorageLibraryChangeReader(::windows::Object);
        impl StorageLibraryChangeReader {
            pub fn read_batch_async(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageLibraryChange>,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageLibraryChange>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<
                            super::foundation::collections::IVectorView<StorageLibraryChange>,
                        >>(result__)
                }
            }
            pub fn accept_changes_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
        }
        impl ::std::clone::Clone for StorageLibraryChangeReader {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for StorageLibraryChangeReader {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for StorageLibraryChangeReader {}
        impl ::std::fmt::Debug for StorageLibraryChangeReader {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for StorageLibraryChangeReader {
            const NAME: &'static str = "Windows.Storage.StorageLibraryChangeReader";
        }
        unsafe impl ::windows::Interface for StorageLibraryChangeReader {
            type Vtable = IStorageLibraryChangeReader_abi;
            const IID: ::windows::Guid = <IStorageLibraryChangeReader as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for StorageLibraryChangeReader {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.StorageLibraryChangeReader;{f205bc83-fca2-41f9-8954-ee2e991eb96f})" ) ;
        }
        impl ::std::convert::From<StorageLibraryChangeReader> for ::windows::Object {
            fn from(value: StorageLibraryChangeReader) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&StorageLibraryChangeReader> for ::windows::Object {
            fn from(value: &StorageLibraryChangeReader) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for StorageLibraryChangeReader
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a StorageLibraryChangeReader
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageLibraryChangeReader> for IStorageLibraryChangeReader {
            fn from(value: StorageLibraryChangeReader) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageLibraryChangeReader> for IStorageLibraryChangeReader {
            fn from(value: &StorageLibraryChangeReader) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageLibraryChangeReader>>
            for StorageLibraryChangeReader
        {
            fn into(self) -> ::windows::Param<'a, IStorageLibraryChangeReader> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageLibraryChangeReader>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageLibraryChangeReader>>
            for &'a StorageLibraryChangeReader
        {
            fn into(self) -> ::windows::Param<'a, IStorageLibraryChangeReader> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageLibraryChangeReader>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        unsafe impl ::std::marker::Send for StorageLibraryChangeReader {}
        unsafe impl ::std::marker::Sync for StorageLibraryChangeReader {}
        #[repr(transparent)]
        pub struct IStorageLibraryChangeTracker(::windows::Object);
        impl ::std::clone::Clone for IStorageLibraryChangeTracker {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageLibraryChangeTracker {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageLibraryChangeTracker {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageLibraryChangeTracker {}
        impl IStorageLibraryChangeTracker {
            pub fn get_change_reader(&self) -> ::windows::Result<StorageLibraryChangeReader> {
                let this = self;
                unsafe {
                    let mut result__: <StorageLibraryChangeReader as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<StorageLibraryChangeReader>(result__)
                }
            }
            pub fn enable(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this)).ok() }
            }
            pub fn reset(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this)).ok() }
            }
        }
        unsafe impl ::windows::Interface for IStorageLibraryChangeTracker {
            type Vtable = IStorageLibraryChangeTracker_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2652205846,
                24691,
                17654,
                [150, 129, 116, 146, 209, 40, 108, 144],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageLibraryChangeTracker_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageLibraryChangeTracker {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{9e157316-6073-44f6-9681-7492d1286c90}") };
        }
        impl ::std::convert::From<IStorageLibraryChangeTracker> for ::windows::Object {
            fn from(value: IStorageLibraryChangeTracker) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageLibraryChangeTracker> for ::windows::Object {
            fn from(value: &IStorageLibraryChangeTracker) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IStorageLibraryChangeTracker
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IStorageLibraryChangeTracker
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct StorageLibraryChangeTracker(::windows::Object);
        impl StorageLibraryChangeTracker {
            pub fn get_change_reader(&self) -> ::windows::Result<StorageLibraryChangeReader> {
                let this = self;
                unsafe {
                    let mut result__: <StorageLibraryChangeReader as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<StorageLibraryChangeReader>(result__)
                }
            }
            pub fn enable(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this)).ok() }
            }
            pub fn reset(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this)).ok() }
            }
        }
        impl ::std::clone::Clone for StorageLibraryChangeTracker {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for StorageLibraryChangeTracker {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for StorageLibraryChangeTracker {}
        impl ::std::fmt::Debug for StorageLibraryChangeTracker {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for StorageLibraryChangeTracker {
            const NAME: &'static str = "Windows.Storage.StorageLibraryChangeTracker";
        }
        unsafe impl ::windows::Interface for StorageLibraryChangeTracker {
            type Vtable = IStorageLibraryChangeTracker_abi;
            const IID: ::windows::Guid =
                <IStorageLibraryChangeTracker as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for StorageLibraryChangeTracker {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.StorageLibraryChangeTracker;{9e157316-6073-44f6-9681-7492d1286c90})" ) ;
        }
        impl ::std::convert::From<StorageLibraryChangeTracker> for ::windows::Object {
            fn from(value: StorageLibraryChangeTracker) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&StorageLibraryChangeTracker> for ::windows::Object {
            fn from(value: &StorageLibraryChangeTracker) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for StorageLibraryChangeTracker
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a StorageLibraryChangeTracker
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageLibraryChangeTracker> for IStorageLibraryChangeTracker {
            fn from(value: StorageLibraryChangeTracker) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageLibraryChangeTracker> for IStorageLibraryChangeTracker {
            fn from(value: &StorageLibraryChangeTracker) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageLibraryChangeTracker>>
            for StorageLibraryChangeTracker
        {
            fn into(self) -> ::windows::Param<'a, IStorageLibraryChangeTracker> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageLibraryChangeTracker>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageLibraryChangeTracker>>
            for &'a StorageLibraryChangeTracker
        {
            fn into(self) -> ::windows::Param<'a, IStorageLibraryChangeTracker> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageLibraryChangeTracker>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        unsafe impl ::std::marker::Send for StorageLibraryChangeTracker {}
        unsafe impl ::std::marker::Sync for StorageLibraryChangeTracker {}
        #[repr(transparent)]
        pub struct IStorageFolder3(::windows::Object);
        impl ::std::clone::Clone for IStorageFolder3 {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageFolder3 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageFolder3 {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageFolder3 {}
        impl IStorageFolder3 {
            pub fn try_get_change_tracker(&self) -> ::windows::Result<StorageLibraryChangeTracker> {
                let this = self;
                unsafe {
                    let mut result__: <StorageLibraryChangeTracker as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<StorageLibraryChangeTracker>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageFolder3 {
            type Vtable = IStorageFolder3_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2673965209,
                48609,
                16676,
                [174, 179, 176, 106, 217, 111, 152, 212],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageFolder3_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageFolder3 {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{9f617899-bde1-4124-aeb3-b06ad96f98d4}") };
        }
        impl ::std::convert::From<IStorageFolder3> for ::windows::Object {
            fn from(value: IStorageFolder3) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageFolder3> for ::windows::Object {
            fn from(value: &IStorageFolder3) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageFolder3 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IStorageFolder3 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFolderStatics(::windows::Object);
        impl ::std::clone::Clone for IStorageFolderStatics {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageFolderStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageFolderStatics {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageFolderStatics {}
        impl IStorageFolderStatics {
            pub fn get_folder_from_path_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                path: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        path.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageFolderStatics {
            type Vtable = IStorageFolderStatics_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                150153215,
                34261,
                18617,
                [174, 233, 40, 81, 30, 51, 159, 159],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageFolderStatics_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                path: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageFolderStatics {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{08f327ff-85d5-48b9-aee9-28511e339f9f}") };
        }
        impl ::std::convert::From<IStorageFolderStatics> for ::windows::Object {
            fn from(value: IStorageFolderStatics) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageFolderStatics> for ::windows::Object {
            fn from(value: &IStorageFolderStatics) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageFolderStatics {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IStorageFolderStatics
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFolderStatics2(::windows::Object);
        impl ::std::clone::Clone for IStorageFolderStatics2 {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageFolderStatics2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageFolderStatics2 {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageFolderStatics2 {}
        impl IStorageFolderStatics2 {
            pub fn get_folder_from_path_for_user_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, super::system::User>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                user: T0__,
                path: T1__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        user.into().abi(),
                        path.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageFolderStatics2 {
            type Vtable = IStorageFolderStatics2_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                3026546115,
                29138,
                18045,
                [139, 41, 55, 31, 15, 98, 191, 111],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageFolderStatics2_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                user: ::windows::RawPtr,
                path: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageFolderStatics2 {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{b4656dc3-71d2-467d-8b29-371f0f62bf6f}") };
        }
        impl ::std::convert::From<IStorageFolderStatics2> for ::windows::Object {
            fn from(value: IStorageFolderStatics2) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageFolderStatics2> for ::windows::Object {
            fn from(value: &IStorageFolderStatics2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageFolderStatics2 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IStorageFolderStatics2
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStorageItem2(::windows::Object);
        impl ::std::clone::Clone for IStorageItem2 {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageItem2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageItem2 {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageItem2 {}
        impl IStorageItem2 {
            pub fn rename_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn rename_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
                option: NameCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn delete_async_overload_default_options(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn delete_async(
                &self,
                option: StorageDeleteOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn get_basic_properties_async(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::BasicProperties>,
            > {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    >>(result__)
                }
            }
            pub fn name(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn path(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn attributes(&self) -> ::windows::Result<FileAttributes> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <FileAttributes as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<FileAttributes>(result__)
                }
            }
            pub fn date_created(&self) -> ::windows::Result<super::foundation::DateTime> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::DateTime as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::DateTime>(result__)
                }
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        r#type,
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn get_parent_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                }
            }
            pub fn is_equal<'a, T0__: ::std::convert::Into<::windows::Param<'a, IStorageItem>>>(
                &self,
                item: T0__,
            ) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        item.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageItem2 {
            type Vtable = IStorageItem2_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1408837330,
                2108,
                17027,
                [180, 91, 129, 192, 7, 35, 126, 68],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageItem2_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                item: ::windows::RawPtr,
                result__: *mut bool,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageItem2 {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{53f926d2-083c-4283-b45b-81c007237e44}") };
        }
        impl ::std::convert::From<IStorageItem2> for ::windows::Object {
            fn from(value: IStorageItem2) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageItem2> for ::windows::Object {
            fn from(value: &IStorageItem2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageItem2 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IStorageItem2 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageItem2> for IStorageItem {
            fn from(value: IStorageItem2) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageItem2> for IStorageItem {
            fn from(value: &IStorageItem2) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem>> for IStorageItem2 {
            fn into(self) -> ::windows::Param<'a, IStorageItem> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem>> for &'a IStorageItem2 {
            fn into(self) -> ::windows::Param<'a, IStorageItem> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStorageItemProperties(::windows::Object);
        impl ::std::clone::Clone for IStorageItemProperties {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageItemProperties {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageItemProperties {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageItemProperties {}
        impl IStorageItemProperties {
            pub fn get_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        mode,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn display_name(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn display_type(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn folder_relative_id(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn properties(
                &self,
            ) -> ::windows::Result<file_properties::StorageItemContentProperties> {
                let this = self;
                unsafe {
                    let mut result__ : < file_properties :: StorageItemContentProperties as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<file_properties::StorageItemContentProperties>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageItemProperties {
            type Vtable = IStorageItemProperties_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2254849144,
                32809,
                18174,
                [167, 137, 28, 47, 62, 47, 251, 92],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageItemProperties_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                mode: file_properties::ThumbnailMode,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageItemProperties {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{86664478-8029-46fe-a789-1c2f3e2ffb5c}") };
        }
        impl ::std::convert::From<IStorageItemProperties> for ::windows::Object {
            fn from(value: IStorageItemProperties) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageItemProperties> for ::windows::Object {
            fn from(value: &IStorageItemProperties) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageItemProperties {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IStorageItemProperties
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStorageItemProperties2(::windows::Object);
        impl ::std::clone::Clone for IStorageItemProperties2 {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageItemProperties2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageItemProperties2 {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageItemProperties2 {}
        impl IStorageItemProperties2 {
            pub fn get_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        mode,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn display_name(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn display_type(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn folder_relative_id(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn properties(
                &self,
            ) -> ::windows::Result<file_properties::StorageItemContentProperties> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__ : < file_properties :: StorageItemContentProperties as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<file_properties::StorageItemContentProperties>(result__)
                }
            }
            pub fn get_scaled_image_as_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        mode,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_scaled_image_as_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_scaled_image_as_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageItemProperties2 {
            type Vtable = IStorageItemProperties2_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2391189841,
                1209,
                19410,
                [146, 157, 254, 243, 247, 22, 33, 208],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageItemProperties2_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                mode: file_properties::ThumbnailMode,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageItemProperties2 {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{8e86a951-04b9-4bd2-929d-fef3f71621d0}") };
        }
        impl ::std::convert::From<IStorageItemProperties2> for ::windows::Object {
            fn from(value: IStorageItemProperties2) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageItemProperties2> for ::windows::Object {
            fn from(value: &IStorageItemProperties2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageItemProperties2 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IStorageItemProperties2
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageItemProperties2> for IStorageItemProperties {
            fn from(value: IStorageItemProperties2) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageItemProperties2> for IStorageItemProperties {
            fn from(value: &IStorageItemProperties2) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemProperties>>
            for IStorageItemProperties2
        {
            fn into(self) -> ::windows::Param<'a, IStorageItemProperties> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemProperties>>
            for &'a IStorageItemProperties2
        {
            fn into(self) -> ::windows::Param<'a, IStorageItemProperties> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStorageProvider(::windows::Object);
        impl ::std::clone::Clone for IStorageProvider {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageProvider {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageProvider {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageProvider {}
        impl IStorageProvider {
            pub fn id(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn display_name(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageProvider {
            type Vtable = IStorageProvider_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                3875925716,
                54392,
                18390,
                [186, 70, 26, 142, 190, 17, 74, 32],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageProvider_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageProvider {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{e705eed4-d478-47d6-ba46-1a8ebe114a20}") };
        }
        impl ::std::convert::From<IStorageProvider> for ::windows::Object {
            fn from(value: IStorageProvider) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageProvider> for ::windows::Object {
            fn from(value: &IStorageProvider) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageProvider {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IStorageProvider {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStorageProvider2(::windows::Object);
        impl ::std::clone::Clone for IStorageProvider2 {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageProvider2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageProvider2 {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageProvider2 {}
        impl IStorageProvider2 {
            pub fn id(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageProvider>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn display_name(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageProvider>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn is_property_supported_for_partial_file_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                property_canonical_name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<bool>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < bool > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        property_canonical_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<bool>>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageProvider2 {
            type Vtable = IStorageProvider2_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                17635607,
                13316,
                16715,
                [159, 215, 205, 68, 71, 46, 170, 57],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageProvider2_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                property_canonical_name: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageProvider2 {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{010d1917-3404-414b-9fd7-cd44472eaa39}") };
        }
        impl ::std::convert::From<IStorageProvider2> for ::windows::Object {
            fn from(value: IStorageProvider2) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageProvider2> for ::windows::Object {
            fn from(value: &IStorageProvider2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageProvider2 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IStorageProvider2 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageProvider2> for IStorageProvider {
            fn from(value: IStorageProvider2) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageProvider2> for IStorageProvider {
            fn from(value: &IStorageProvider2) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageProvider>> for IStorageProvider2 {
            fn into(self) -> ::windows::Param<'a, IStorageProvider> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageProvider>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageProvider>> for &'a IStorageProvider2 {
            fn into(self) -> ::windows::Param<'a, IStorageProvider> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageProvider>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct StorageProvider(::windows::Object);
        impl StorageProvider {
            pub fn id(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn display_name(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn is_property_supported_for_partial_file_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                property_canonical_name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<bool>> {
                let this = &::windows::Interface::cast::<IStorageProvider2>(self).unwrap();
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < bool > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        property_canonical_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<bool>>(result__)
                }
            }
        }
        impl ::std::clone::Clone for StorageProvider {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for StorageProvider {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for StorageProvider {}
        impl ::std::fmt::Debug for StorageProvider {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for StorageProvider {
            const NAME: &'static str = "Windows.Storage.StorageProvider";
        }
        unsafe impl ::windows::Interface for StorageProvider {
            type Vtable = IStorageProvider_abi;
            const IID: ::windows::Guid = <IStorageProvider as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for StorageProvider {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"rc(Windows.Storage.StorageProvider;{e705eed4-d478-47d6-ba46-1a8ebe114a20})",
            );
        }
        impl ::std::convert::From<StorageProvider> for ::windows::Object {
            fn from(value: StorageProvider) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&StorageProvider> for ::windows::Object {
            fn from(value: &StorageProvider) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for StorageProvider {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a StorageProvider {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageProvider> for IStorageProvider {
            fn from(value: StorageProvider) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageProvider> for IStorageProvider {
            fn from(value: &StorageProvider) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageProvider>> for StorageProvider {
            fn into(self) -> ::windows::Param<'a, IStorageProvider> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageProvider>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageProvider>> for &'a StorageProvider {
            fn into(self) -> ::windows::Param<'a, IStorageProvider> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageProvider>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageProvider> for IStorageProvider2 {
            fn from(value: StorageProvider) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageProvider> for IStorageProvider2 {
            fn from(value: &StorageProvider) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageProvider2>> for StorageProvider {
            fn into(self) -> ::windows::Param<'a, IStorageProvider2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageProvider2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageProvider2>> for &'a StorageProvider {
            fn into(self) -> ::windows::Param<'a, IStorageProvider2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageProvider2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStorageItemPropertiesWithProvider(::windows::Object);
        impl ::std::clone::Clone for IStorageItemPropertiesWithProvider {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageItemPropertiesWithProvider {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageItemPropertiesWithProvider {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageItemPropertiesWithProvider {}
        impl IStorageItemPropertiesWithProvider {
            pub fn get_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        mode,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn display_name(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn display_type(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn folder_relative_id(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn properties(
                &self,
            ) -> ::windows::Result<file_properties::StorageItemContentProperties> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__ : < file_properties :: StorageItemContentProperties as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<file_properties::StorageItemContentProperties>(result__)
                }
            }
            pub fn provider(&self) -> ::windows::Result<StorageProvider> {
                let this = self;
                unsafe {
                    let mut result__: <StorageProvider as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<StorageProvider>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageItemPropertiesWithProvider {
            type Vtable = IStorageItemPropertiesWithProvider_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2249978779,
                25448,
                19950,
                [180, 14, 116, 104, 74, 92, 231, 20],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageItemPropertiesWithProvider_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageItemPropertiesWithProvider {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{861bf39b-6368-4dee-b40e-74684a5ce714}") };
        }
        impl ::std::convert::From<IStorageItemPropertiesWithProvider> for ::windows::Object {
            fn from(value: IStorageItemPropertiesWithProvider) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageItemPropertiesWithProvider> for ::windows::Object {
            fn from(value: &IStorageItemPropertiesWithProvider) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IStorageItemPropertiesWithProvider
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IStorageItemPropertiesWithProvider
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageItemPropertiesWithProvider> for IStorageItemProperties {
            fn from(value: IStorageItemPropertiesWithProvider) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageItemPropertiesWithProvider> for IStorageItemProperties {
            fn from(value: &IStorageItemPropertiesWithProvider) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemProperties>>
            for IStorageItemPropertiesWithProvider
        {
            fn into(self) -> ::windows::Param<'a, IStorageItemProperties> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemProperties>>
            for &'a IStorageItemPropertiesWithProvider
        {
            fn into(self) -> ::windows::Param<'a, IStorageItemProperties> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct StorageFolder(::windows::Object);
        impl StorageFolder {
            pub fn create_file_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn create_file_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
                options: CreationCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn create_folder_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                }
            }
            pub fn create_folder_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
                options: CreationCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                }
            }
            pub fn get_file_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn get_folder_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                }
            }
            pub fn get_item_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<IStorageItem>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < IStorageItem > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<IStorageItem>>(result__)
                }
            }
            pub fn get_files_async_overload_default_options_start_and_count(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFile>,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFile>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFile>,
                    >>(result__)
                }
            }
            pub fn get_folders_async_overload_default_options_start_and_count(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFolder>,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFolder>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFolder>,
                    >>(result__)
                }
            }
            pub fn get_items_async_overload_default_start_and_count(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<IStorageItem>,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<IStorageItem>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<IStorageItem>,
                    >>(result__)
                }
            }
            pub fn try_get_item_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<IStorageItem>> {
                let this = &::windows::Interface::cast::<IStorageFolder2>(self).unwrap();
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < IStorageItem > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<IStorageItem>>(result__)
                }
            }
            pub fn try_get_change_tracker(&self) -> ::windows::Result<StorageLibraryChangeTracker> {
                let this = &::windows::Interface::cast::<IStorageFolder3>(self).unwrap();
                unsafe {
                    let mut result__: <StorageLibraryChangeTracker as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<StorageLibraryChangeTracker>(result__)
                }
            }
            pub fn get_folder_from_path_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                path: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                Self::IStorageFolderStatics(|this| unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        path.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                })
            }
            pub fn get_folder_from_path_for_user_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, super::system::User>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                user: T0__,
                path: T1__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                Self::IStorageFolderStatics2(|this| unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        user.into().abi(),
                        path.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                })
            }
            pub fn rename_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn rename_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
                option: NameCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn delete_async_overload_default_options(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn delete_async(
                &self,
                option: StorageDeleteOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn get_basic_properties_async(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::BasicProperties>,
            > {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    >>(result__)
                }
            }
            pub fn name(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn path(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn attributes(&self) -> ::windows::Result<FileAttributes> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <FileAttributes as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<FileAttributes>(result__)
                }
            }
            pub fn date_created(&self) -> ::windows::Result<super::foundation::DateTime> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::DateTime as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::DateTime>(result__)
                }
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        r#type,
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn get_parent_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = &::windows::Interface::cast::<IStorageItem2>(self).unwrap();
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                }
            }
            pub fn is_equal<'a, T0__: ::std::convert::Into<::windows::Param<'a, IStorageItem>>>(
                &self,
                item: T0__,
            ) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IStorageItem2>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        item.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn get_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        mode,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn display_name(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn display_type(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn folder_relative_id(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn properties(
                &self,
            ) -> ::windows::Result<file_properties::StorageItemContentProperties> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__ : < file_properties :: StorageItemContentProperties as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<file_properties::StorageItemContentProperties>(result__)
                }
            }
            pub fn get_scaled_image_as_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties2>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        mode,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_scaled_image_as_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties2>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_scaled_image_as_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties2>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn provider(&self) -> ::windows::Result<StorageProvider> {
                let this = &::windows::Interface::cast::<IStorageItemPropertiesWithProvider>(self)
                    .unwrap();
                unsafe {
                    let mut result__: <StorageProvider as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<StorageProvider>(result__)
                }
            }
            pub fn get_indexed_state_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<search::IndexedState>>
            {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < search :: IndexedState > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<search::IndexedState>>(
                            result__,
                        )
                }
            }
            pub fn create_file_query_overload_default(
                &self,
            ) -> ::windows::Result<search::StorageFileQueryResult> {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <search::StorageFileQueryResult as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<search::StorageFileQueryResult>(result__)
                }
            }
            pub fn create_file_query(
                &self,
                query: search::CommonFileQuery,
            ) -> ::windows::Result<search::StorageFileQueryResult> {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <search::StorageFileQueryResult as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        query,
                        &mut result__,
                    )
                    .from_abi::<search::StorageFileQueryResult>(result__)
                }
            }
            pub fn create_file_query_with_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, search::QueryOptions>>,
            >(
                &self,
                query_options: T0__,
            ) -> ::windows::Result<search::StorageFileQueryResult> {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <search::StorageFileQueryResult as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        query_options.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<search::StorageFileQueryResult>(result__)
                }
            }
            pub fn create_folder_query_overload_default(
                &self,
            ) -> ::windows::Result<search::StorageFolderQueryResult> {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <search::StorageFolderQueryResult as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<search::StorageFolderQueryResult>(result__)
                }
            }
            pub fn create_folder_query(
                &self,
                query: search::CommonFolderQuery,
            ) -> ::windows::Result<search::StorageFolderQueryResult> {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <search::StorageFolderQueryResult as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        query,
                        &mut result__,
                    )
                    .from_abi::<search::StorageFolderQueryResult>(result__)
                }
            }
            pub fn create_folder_query_with_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, search::QueryOptions>>,
            >(
                &self,
                query_options: T0__,
            ) -> ::windows::Result<search::StorageFolderQueryResult> {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <search::StorageFolderQueryResult as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        query_options.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<search::StorageFolderQueryResult>(result__)
                }
            }
            pub fn create_item_query(&self) -> ::windows::Result<search::StorageItemQueryResult> {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <search::StorageItemQueryResult as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<search::StorageItemQueryResult>(result__)
                }
            }
            pub fn create_item_query_with_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, search::QueryOptions>>,
            >(
                &self,
                query_options: T0__,
            ) -> ::windows::Result<search::StorageItemQueryResult> {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <search::StorageItemQueryResult as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        query_options.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<search::StorageItemQueryResult>(result__)
                }
            }
            pub fn get_files_async(
                &self,
                query: search::CommonFileQuery,
                start_index: u32,
                max_items_to_retrieve: u32,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFile>,
                >,
            > {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFile>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        query,
                        start_index,
                        max_items_to_retrieve,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFile>,
                    >>(result__)
                }
            }
            pub fn get_files_async_overload_default_start_and_count(
                &self,
                query: search::CommonFileQuery,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFile>,
                >,
            > {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFile>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        query,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFile>,
                    >>(result__)
                }
            }
            pub fn get_folders_async(
                &self,
                query: search::CommonFolderQuery,
                start_index: u32,
                max_items_to_retrieve: u32,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFolder>,
                >,
            > {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFolder>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        query,
                        start_index,
                        max_items_to_retrieve,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFolder>,
                    >>(result__)
                }
            }
            pub fn get_folders_async_overload_default_start_and_count(
                &self,
                query: search::CommonFolderQuery,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFolder>,
                >,
            > {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFolder>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        query,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFolder>,
                    >>(result__)
                }
            }
            pub fn get_items_async(
                &self,
                start_index: u32,
                max_items_to_retrieve: u32,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<IStorageItem>,
                >,
            > {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<IStorageItem>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        start_index,
                        max_items_to_retrieve,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<IStorageItem>,
                    >>(result__)
                }
            }
            pub fn are_query_options_supported<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, search::QueryOptions>>,
            >(
                &self,
                query_options: T0__,
            ) -> ::windows::Result<bool> {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        query_options.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn is_common_folder_query_supported(
                &self,
                query: search::CommonFolderQuery,
            ) -> ::windows::Result<bool> {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).21)(
                        ::windows::Abi::abi(this),
                        query,
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn is_common_file_query_supported(
                &self,
                query: search::CommonFileQuery,
            ) -> ::windows::Result<bool> {
                let this =
                    &::windows::Interface::cast::<search::IStorageFolderQueryOperations>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).22)(
                        ::windows::Abi::abi(this),
                        query,
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            #[allow(non_snake_case)]
            fn IStorageFolderStatics<
                R,
                F: FnOnce(&IStorageFolderStatics) -> ::windows::Result<R>,
            >(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<StorageFolder, IStorageFolderStatics> =
                    ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
            #[allow(non_snake_case)]
            fn IStorageFolderStatics2<
                R,
                F: FnOnce(&IStorageFolderStatics2) -> ::windows::Result<R>,
            >(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<StorageFolder, IStorageFolderStatics2> =
                    ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::std::clone::Clone for StorageFolder {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for StorageFolder {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for StorageFolder {}
        impl ::std::fmt::Debug for StorageFolder {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for StorageFolder {
            const NAME: &'static str = "Windows.Storage.StorageFolder";
        }
        unsafe impl ::windows::Interface for StorageFolder {
            type Vtable = IStorageFolder_abi;
            const IID: ::windows::Guid = <IStorageFolder as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for StorageFolder {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"rc(Windows.Storage.StorageFolder;{72d1cb78-b3ef-4f75-a80b-6fd9dae2944b})",
            );
        }
        impl ::std::convert::From<StorageFolder> for ::windows::Object {
            fn from(value: StorageFolder) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&StorageFolder> for ::windows::Object {
            fn from(value: &StorageFolder) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for StorageFolder {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a StorageFolder {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageFolder {
            fn from(value: StorageFolder) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageFolder {
            fn from(value: &StorageFolder) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFolder>> for StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageFolder> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageFolder>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFolder>> for &'a StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageFolder> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageFolder>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageFolder2 {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageFolder2 {
            fn from(value: &StorageFolder) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFolder2>> for StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageFolder2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageFolder2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFolder2>> for &'a StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageFolder2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageFolder2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageFolder3 {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageFolder3 {
            fn from(value: &StorageFolder) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFolder3>> for StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageFolder3> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageFolder3>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFolder3>> for &'a StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageFolder3> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageFolder3>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageItem {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageItem {
            fn from(value: &StorageFolder) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem>> for StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageItem> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem>> for &'a StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageItem> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageItem2 {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageItem2 {
            fn from(value: &StorageFolder) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem2>> for StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageItem2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem2>> for &'a StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageItem2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageItemProperties {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageItemProperties {
            fn from(value: &StorageFolder) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemProperties>> for StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageItemProperties> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemProperties>> for &'a StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageItemProperties> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageItemProperties2 {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageItemProperties2 {
            fn from(value: &StorageFolder) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemProperties2>> for StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageItemProperties2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItemProperties2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemProperties2>> for &'a StorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageItemProperties2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItemProperties2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFolder> for IStorageItemPropertiesWithProvider {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for IStorageItemPropertiesWithProvider {
            fn from(value: &StorageFolder) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemPropertiesWithProvider>>
            for StorageFolder
        {
            fn into(self) -> ::windows::Param<'a, IStorageItemPropertiesWithProvider> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<IStorageItemPropertiesWithProvider>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemPropertiesWithProvider>>
            for &'a StorageFolder
        {
            fn into(self) -> ::windows::Param<'a, IStorageItemPropertiesWithProvider> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<IStorageItemPropertiesWithProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<StorageFolder> for search::IStorageFolderQueryOperations {
            fn from(value: StorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFolder> for search::IStorageFolderQueryOperations {
            fn from(value: &StorageFolder) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, search::IStorageFolderQueryOperations>>
            for StorageFolder
        {
            fn into(self) -> ::windows::Param<'a, search::IStorageFolderQueryOperations> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<search::IStorageFolderQueryOperations>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, search::IStorageFolderQueryOperations>>
            for &'a StorageFolder
        {
            fn into(self) -> ::windows::Param<'a, search::IStorageFolderQueryOperations> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<search::IStorageFolderQueryOperations>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        #[repr(transparent)]
        pub struct IStorageFolder(::windows::Object);
        impl ::std::clone::Clone for IStorageFolder {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageFolder {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageFolder {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageFolder {}
        impl IStorageFolder {
            pub fn create_file_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn create_file_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
                options: CreationCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn create_folder_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                }
            }
            pub fn create_folder_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
                options: CreationCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                }
            }
            pub fn get_file_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn get_folder_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                }
            }
            pub fn get_item_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<IStorageItem>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < IStorageItem > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<IStorageItem>>(result__)
                }
            }
            pub fn get_files_async_overload_default_options_start_and_count(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFile>,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFile>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFile>,
                    >>(result__)
                }
            }
            pub fn get_folders_async_overload_default_options_start_and_count(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<StorageFolder>,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFolder>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<StorageFolder>,
                    >>(result__)
                }
            }
            pub fn get_items_async_overload_default_start_and_count(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<IStorageItem>,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<IStorageItem>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<IStorageItem>,
                    >>(result__)
                }
            }
            pub fn rename_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn rename_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
                option: NameCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn delete_async_overload_default_options(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn delete_async(
                &self,
                option: StorageDeleteOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn get_basic_properties_async(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::BasicProperties>,
            > {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    >>(result__)
                }
            }
            pub fn name(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn path(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn attributes(&self) -> ::windows::Result<FileAttributes> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <FileAttributes as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<FileAttributes>(result__)
                }
            }
            pub fn date_created(&self) -> ::windows::Result<super::foundation::DateTime> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::DateTime as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::DateTime>(result__)
                }
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        r#type,
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageFolder {
            type Vtable = IStorageFolder_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1926351736,
                46063,
                20341,
                [168, 11, 111, 217, 218, 226, 148, 75],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageFolder_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                desired_name: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                desired_name: ::windows::RawPtr,
                options: CreationCollisionOption,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                desired_name: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                desired_name: ::windows::RawPtr,
                options: CreationCollisionOption,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                name: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                name: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                name: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageFolder {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{72d1cb78-b3ef-4f75-a80b-6fd9dae2944b}") };
        }
        impl ::std::convert::From<IStorageFolder> for ::windows::Object {
            fn from(value: IStorageFolder) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageFolder> for ::windows::Object {
            fn from(value: &IStorageFolder) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageFolder {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IStorageFolder {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageFolder> for IStorageItem {
            fn from(value: IStorageFolder) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageFolder> for IStorageItem {
            fn from(value: &IStorageFolder) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem>> for IStorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageItem> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem>> for &'a IStorageFolder {
            fn into(self) -> ::windows::Param<'a, IStorageItem> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFile(::windows::Object);
        impl ::std::clone::Clone for IStorageFile {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageFile {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageFile {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageFile {}
        impl IStorageFile {
            pub fn file_type(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn content_type(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn open_async(
                &self,
                access_mode: FileAccessMode,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStream>>
            {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        streams::IRandomAccessStream,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        access_mode,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        streams::IRandomAccessStream,
                    >>(result__)
                }
            }
            pub fn open_transacted_write_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageStreamTransaction>>
            {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageStreamTransaction > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<StorageStreamTransaction>>(
                            result__,
                        )
                }
            }
            pub fn copy_overload_default_name_and_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFolder>>,
            >(
                &self,
                destination_folder: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        destination_folder.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn copy_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        destination_folder.into().abi(),
                        desired_new_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn copy_overload<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
                option: NameCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        destination_folder.into().abi(),
                        desired_new_name.into().abi(),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn copy_and_replace_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFile>>,
            >(
                &self,
                file_to_replace: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        file_to_replace.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn move_overload_default_name_and_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFolder>>,
            >(
                &self,
                destination_folder: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        destination_folder.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn move_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        destination_folder.into().abi(),
                        desired_new_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn move_overload<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
                option: NameCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        destination_folder.into().abi(),
                        desired_new_name.into().abi(),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn move_and_replace_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFile>>,
            >(
                &self,
                file_to_replace: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        file_to_replace.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn rename_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn rename_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
                option: NameCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn delete_async_overload_default_options(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn delete_async(
                &self,
                option: StorageDeleteOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn get_basic_properties_async(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::BasicProperties>,
            > {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    >>(result__)
                }
            }
            pub fn name(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn path(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn attributes(&self) -> ::windows::Result<FileAttributes> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <FileAttributes as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<FileAttributes>(result__)
                }
            }
            pub fn date_created(&self) -> ::windows::Result<super::foundation::DateTime> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::DateTime as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::DateTime>(result__)
                }
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        r#type,
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn open_sequential_read_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<streams::IInputStream>>
            {
                let this =
                    &::windows::Interface::cast::<streams::IInputStreamReference>(self).unwrap();
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < streams :: IInputStream > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<streams::IInputStream>>(
                            result__,
                        )
                }
            }
            pub fn open_read_async(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<streams::IRandomAccessStreamWithContentType>,
            > {
                let this =
                    &::windows::Interface::cast::<streams::IRandomAccessStreamReference>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        streams::IRandomAccessStreamWithContentType,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<
                            streams::IRandomAccessStreamWithContentType,
                        >>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageFile {
            type Vtable = IStorageFile_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                4198457734,
                16916,
                17036,
                [166, 76, 20, 201, 172, 115, 21, 234],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageFile_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                access_mode: FileAccessMode,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                destination_folder: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                destination_folder: ::windows::RawPtr,
                desired_new_name: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                destination_folder: ::windows::RawPtr,
                desired_new_name: ::windows::RawPtr,
                option: NameCollisionOption,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                file_to_replace: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                destination_folder: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                destination_folder: ::windows::RawPtr,
                desired_new_name: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                destination_folder: ::windows::RawPtr,
                desired_new_name: ::windows::RawPtr,
                option: NameCollisionOption,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                file_to_replace: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageFile {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{fa3f6186-4214-428c-a64c-14c9ac7315ea}") };
        }
        impl ::std::convert::From<IStorageFile> for ::windows::Object {
            fn from(value: IStorageFile) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageFile> for ::windows::Object {
            fn from(value: &IStorageFile) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageFile {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IStorageFile {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageFile> for IStorageItem {
            fn from(value: IStorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageFile> for IStorageItem {
            fn from(value: &IStorageFile) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem>> for IStorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageItem> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem>> for &'a IStorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageItem> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<IStorageFile> for streams::IInputStreamReference {
            fn from(value: IStorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageFile> for streams::IInputStreamReference {
            fn from(value: &IStorageFile) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, streams::IInputStreamReference>>
            for IStorageFile
        {
            fn into(self) -> ::windows::Param<'a, streams::IInputStreamReference> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<streams::IInputStreamReference>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, streams::IInputStreamReference>>
            for &'a IStorageFile
        {
            fn into(self) -> ::windows::Param<'a, streams::IInputStreamReference> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<streams::IInputStreamReference>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<IStorageFile> for streams::IRandomAccessStreamReference {
            fn from(value: IStorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&IStorageFile> for streams::IRandomAccessStreamReference {
            fn from(value: &IStorageFile) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, streams::IRandomAccessStreamReference>>
            for IStorageFile
        {
            fn into(self) -> ::windows::Param<'a, streams::IRandomAccessStreamReference> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<streams::IRandomAccessStreamReference>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, streams::IRandomAccessStreamReference>>
            for &'a IStorageFile
        {
            fn into(self) -> ::windows::Param<'a, streams::IRandomAccessStreamReference> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<streams::IRandomAccessStreamReference>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct StorageOpenOptions(pub u32);
        impl ::std::convert::From<u32> for StorageOpenOptions {
            fn from(value: u32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for StorageOpenOptions {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for StorageOpenOptions {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for StorageOpenOptions {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for StorageOpenOptions {}
        impl StorageOpenOptions {
            #![allow(non_upper_case_globals)]
            pub const None: Self = Self(0u32);
            pub const AllowOnlyReaders: Self = Self(1u32);
            pub const AllowReadersAndWriters: Self = Self(2u32);
        }
        unsafe impl ::windows::Abi for StorageOpenOptions {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for StorageOpenOptions {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"enum(Windows.Storage.StorageOpenOptions;u4)");
        }
        impl ::std::ops::BitOr for StorageOpenOptions {
            type Output = Self;
            fn bitor(self, rhs: Self) -> Self {
                Self(self.0 | rhs.0)
            }
        }
        impl ::std::ops::BitAnd for StorageOpenOptions {
            type Output = Self;
            fn bitand(self, rhs: Self) -> Self {
                Self(self.0 & rhs.0)
            }
        }
        #[repr(transparent)]
        pub struct IStorageFile2(::windows::Object);
        impl ::std::clone::Clone for IStorageFile2 {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageFile2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageFile2 {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageFile2 {}
        impl IStorageFile2 {
            pub fn open_with_options_async(
                &self,
                access_mode: FileAccessMode,
                options: StorageOpenOptions,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStream>>
            {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        streams::IRandomAccessStream,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        access_mode,
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        streams::IRandomAccessStream,
                    >>(result__)
                }
            }
            pub fn open_transacted_write_with_options_async(
                &self,
                options: StorageOpenOptions,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageStreamTransaction>>
            {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageStreamTransaction > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        StorageStreamTransaction,
                    >>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageFile2 {
            type Vtable = IStorageFile2_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2504936399,
                2679,
                17147,
                [183, 119, 194, 237, 88, 165, 46, 68],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageFile2_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                access_mode: FileAccessMode,
                options: StorageOpenOptions,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                options: StorageOpenOptions,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageFile2 {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{954e4bcf-0a77-42fb-b777-c2ed58a52e44}") };
        }
        impl ::std::convert::From<IStorageFile2> for ::windows::Object {
            fn from(value: IStorageFile2) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageFile2> for ::windows::Object {
            fn from(value: &IStorageFile2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageFile2 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IStorageFile2 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFilePropertiesWithAvailability(::windows::Object);
        impl ::std::clone::Clone for IStorageFilePropertiesWithAvailability {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageFilePropertiesWithAvailability {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageFilePropertiesWithAvailability {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageFilePropertiesWithAvailability {}
        impl IStorageFilePropertiesWithAvailability {
            pub fn is_available(&self) -> ::windows::Result<bool> {
                let this = self;
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<bool>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageFilePropertiesWithAvailability {
            type Vtable = IStorageFilePropertiesWithAvailability_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2949365403,
                22571,
                16691,
                [150, 72, 228, 76, 164, 110, 228, 145],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageFilePropertiesWithAvailability_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut bool,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageFilePropertiesWithAvailability {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{afcbbe9b-582b-4133-9648-e44ca46ee491}") };
        }
        impl ::std::convert::From<IStorageFilePropertiesWithAvailability> for ::windows::Object {
            fn from(value: IStorageFilePropertiesWithAvailability) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageFilePropertiesWithAvailability> for ::windows::Object {
            fn from(value: &IStorageFilePropertiesWithAvailability) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IStorageFilePropertiesWithAvailability
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IStorageFilePropertiesWithAvailability
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct StreamedFileFailureMode(pub i32);
        impl ::std::convert::From<i32> for StreamedFileFailureMode {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for StreamedFileFailureMode {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for StreamedFileFailureMode {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for StreamedFileFailureMode {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for StreamedFileFailureMode {}
        impl StreamedFileFailureMode {
            #![allow(non_upper_case_globals)]
            pub const Failed: Self = Self(0i32);
            pub const CurrentlyUnavailable: Self = Self(1i32);
            pub const Incomplete: Self = Self(2i32);
        }
        unsafe impl ::windows::Abi for StreamedFileFailureMode {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for StreamedFileFailureMode {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"enum(Windows.Storage.StreamedFileFailureMode;i4)",
            );
        }
        #[repr(transparent)]
        pub struct IStreamedFileDataRequest(::windows::Object);
        impl ::std::clone::Clone for IStreamedFileDataRequest {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStreamedFileDataRequest {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStreamedFileDataRequest {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStreamedFileDataRequest {}
        impl IStreamedFileDataRequest {
            pub fn fail_and_close(
                &self,
                failure_mode: StreamedFileFailureMode,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), failure_mode)
                        .ok()
                }
            }
        }
        unsafe impl ::windows::Interface for IStreamedFileDataRequest {
            type Vtable = IStreamedFileDataRequest_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                376700110,
                55997,
                19792,
                [190, 238, 24, 11, 138, 129, 145, 182],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStreamedFileDataRequest_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                failure_mode: StreamedFileFailureMode,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStreamedFileDataRequest {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{1673fcce-dabd-4d50-beee-180b8a8191b6}") };
        }
        impl ::std::convert::From<IStreamedFileDataRequest> for ::windows::Object {
            fn from(value: IStreamedFileDataRequest) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStreamedFileDataRequest> for ::windows::Object {
            fn from(value: &IStreamedFileDataRequest) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IStreamedFileDataRequest
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IStreamedFileDataRequest
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct StreamedFileDataRequest(::windows::Object);
        impl StreamedFileDataRequest {
            pub fn close(&self) -> ::windows::Result<()> {
                let this =
                    &::windows::Interface::cast::<super::foundation::IClosable>(self).unwrap();
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
            pub fn fail_and_close(
                &self,
                failure_mode: StreamedFileFailureMode,
            ) -> ::windows::Result<()> {
                let this = &::windows::Interface::cast::<IStreamedFileDataRequest>(self).unwrap();
                unsafe {
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), failure_mode)
                        .ok()
                }
            }
            pub fn write_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, streams::IBuffer>>,
            >(
                &self,
                buffer: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperationWithProgress<u32, u32>>
            {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperationWithProgress :: < u32 , u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        buffer.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperationWithProgress<u32, u32>>(result__)
                }
            }
            pub fn flush_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<bool>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < bool > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<bool>>(result__)
                }
            }
        }
        impl ::std::clone::Clone for StreamedFileDataRequest {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for StreamedFileDataRequest {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for StreamedFileDataRequest {}
        impl ::std::fmt::Debug for StreamedFileDataRequest {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for StreamedFileDataRequest {
            const NAME: &'static str = "Windows.Storage.StreamedFileDataRequest";
        }
        unsafe impl ::windows::Interface for StreamedFileDataRequest {
            type Vtable = streams::IOutputStream_abi;
            const IID: ::windows::Guid = <streams::IOutputStream as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for StreamedFileDataRequest {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.StreamedFileDataRequest;{905a0fe6-bc53-11df-8c49-001e4fc686da})" ) ;
        }
        impl ::std::convert::From<StreamedFileDataRequest> for ::windows::Object {
            fn from(value: StreamedFileDataRequest) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&StreamedFileDataRequest> for ::windows::Object {
            fn from(value: &StreamedFileDataRequest) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for StreamedFileDataRequest {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a StreamedFileDataRequest
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StreamedFileDataRequest> for super::foundation::IClosable {
            fn from(value: StreamedFileDataRequest) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StreamedFileDataRequest> for super::foundation::IClosable {
            fn from(value: &StreamedFileDataRequest) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, super::foundation::IClosable>>
            for StreamedFileDataRequest
        {
            fn into(self) -> ::windows::Param<'a, super::foundation::IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, super::foundation::IClosable>>
            for &'a StreamedFileDataRequest
        {
            fn into(self) -> ::windows::Param<'a, super::foundation::IClosable> {
                ::windows::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StreamedFileDataRequest> for IStreamedFileDataRequest {
            fn from(value: StreamedFileDataRequest) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StreamedFileDataRequest> for IStreamedFileDataRequest {
            fn from(value: &StreamedFileDataRequest) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStreamedFileDataRequest>>
            for StreamedFileDataRequest
        {
            fn into(self) -> ::windows::Param<'a, IStreamedFileDataRequest> {
                ::windows::Param::Owned(::std::convert::Into::<IStreamedFileDataRequest>::into(
                    self,
                ))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStreamedFileDataRequest>>
            for &'a StreamedFileDataRequest
        {
            fn into(self) -> ::windows::Param<'a, IStreamedFileDataRequest> {
                ::windows::Param::Owned(::std::convert::Into::<IStreamedFileDataRequest>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StreamedFileDataRequest> for streams::IOutputStream {
            fn from(value: StreamedFileDataRequest) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StreamedFileDataRequest> for streams::IOutputStream {
            fn from(value: &StreamedFileDataRequest) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, streams::IOutputStream>>
            for StreamedFileDataRequest
        {
            fn into(self) -> ::windows::Param<'a, streams::IOutputStream> {
                ::windows::Param::Owned(::std::convert::Into::<streams::IOutputStream>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, streams::IOutputStream>>
            for &'a StreamedFileDataRequest
        {
            fn into(self) -> ::windows::Param<'a, streams::IOutputStream> {
                ::windows::Param::Owned(::std::convert::Into::<streams::IOutputStream>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct StreamedFileDataRequestedHandler(::windows::IUnknown);
        impl ::std::clone::Clone for StreamedFileDataRequestedHandler {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for StreamedFileDataRequestedHandler {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for StreamedFileDataRequestedHandler {}
        impl ::std::fmt::Debug for StreamedFileDataRequestedHandler {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        unsafe impl ::windows::Interface for StreamedFileDataRequestedHandler {
            type Vtable = StreamedFileDataRequestedHandler_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                4277577764,
                12257,
                19719,
                [163, 91, 183, 124, 80, 181, 244, 204],
            );
        }
        unsafe impl ::windows::RuntimeType for StreamedFileDataRequestedHandler {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = {
                ::windows::ConstBuffer::from_slice(
                    b"delegate({fef6a824-2fe1-4d07-a35b-b77c50b5f4cc})",
                )
            };
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct StreamedFileDataRequestedHandler_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                stream: ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        impl StreamedFileDataRequestedHandler {
            pub fn invoke<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, StreamedFileDataRequest>>,
            >(
                &self,
                stream: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).3)(
                        ::windows::Abi::abi(this),
                        stream.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(&::std::option::Option<StreamedFileDataRequest>) -> ::windows::Result<()>
                    + 'static,
            >(
                invoke: F,
            ) -> Self {
                let com = StreamedFileDataRequestedHandler_box::<F> {
                    vtable: &StreamedFileDataRequestedHandler_box::<F>::VTABLE,
                    count: ::windows::RefCount::new(),
                    invoke,
                };
                unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
            }
        }
        #[repr(C)]
        struct StreamedFileDataRequestedHandler_box<
            F: FnMut(&::std::option::Option<StreamedFileDataRequest>) -> ::windows::Result<()>
                + 'static,
        > {
            vtable: *const StreamedFileDataRequestedHandler_abi,
            invoke: F,
            count: ::windows::RefCount,
        }
        #[allow(non_snake_case)]
        impl<
                F: FnMut(&::std::option::Option<StreamedFileDataRequest>) -> ::windows::Result<()>
                    + 'static,
            > StreamedFileDataRequestedHandler_box<F>
        {
            const VTABLE: StreamedFileDataRequestedHandler_abi =
                StreamedFileDataRequestedHandler_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
            unsafe extern "system" fn QueryInterface(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                *interface = if iid
                    == &<StreamedFileDataRequestedHandler as ::windows::Interface>::IID
                    || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                    || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                {
                    &mut (*this).vtable as *mut _ as _
                } else {
                    ::std::ptr::null_mut()
                };
                if (*interface).is_null() {
                    ::windows::ErrorCode::E_NOINTERFACE
                } else {
                    (*this).count.add_ref();
                    ::windows::ErrorCode::S_OK
                }
            }
            unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                (*this).count.add_ref()
            }
            unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                let remaining = (*this).count.release();
                if remaining == 0 {
                    Box::from_raw(this);
                }
                remaining
            }
            unsafe extern "system" fn Invoke(
                this: ::windows::RawPtr,
                stream: ::windows::RawPtr,
            ) -> ::windows::ErrorCode {
                let this = this as *mut ::windows::RawPtr as *mut Self;
                ((*this).invoke)(
                    &*(&stream as *const <StreamedFileDataRequest as ::windows::Abi>::Abi
                        as *const <StreamedFileDataRequest as ::windows::RuntimeType>::DefaultType),
                )
                .into()
            }
        }
        #[repr(transparent)]
        pub struct IStorageFileStatics(::windows::Object);
        impl ::std::clone::Clone for IStorageFileStatics {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageFileStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageFileStatics {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageFileStatics {}
        impl IStorageFileStatics {
            pub fn get_file_from_path_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                path: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        path.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn get_file_from_application_uri_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, super::foundation::Uri>>,
            >(
                &self,
                uri: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        uri.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn create_streamed_file_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                T1__: ::std::convert::Into<::windows::Param<'a, StreamedFileDataRequestedHandler>>,
                T2__: ::std::convert::Into<::windows::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                &self,
                display_name_with_extension: T0__,
                data_requested: T1__,
                thumbnail: T2__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        display_name_with_extension.into().abi(),
                        data_requested.into().abi(),
                        thumbnail.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn replace_with_streamed_file_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFile>>,
                T1__: ::std::convert::Into<::windows::Param<'a, StreamedFileDataRequestedHandler>>,
                T2__: ::std::convert::Into<::windows::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                &self,
                file_to_replace: T0__,
                data_requested: T1__,
                thumbnail: T2__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        file_to_replace.into().abi(),
                        data_requested.into().abi(),
                        thumbnail.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn create_streamed_file_from_uri_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                T1__: ::std::convert::Into<::windows::Param<'a, super::foundation::Uri>>,
                T2__: ::std::convert::Into<::windows::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                &self,
                display_name_with_extension: T0__,
                uri: T1__,
                thumbnail: T2__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        display_name_with_extension.into().abi(),
                        uri.into().abi(),
                        thumbnail.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn replace_with_streamed_file_from_uri_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFile>>,
                T1__: ::std::convert::Into<::windows::Param<'a, super::foundation::Uri>>,
                T2__: ::std::convert::Into<::windows::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                &self,
                file_to_replace: T0__,
                uri: T1__,
                thumbnail: T2__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        file_to_replace.into().abi(),
                        uri.into().abi(),
                        thumbnail.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageFileStatics {
            type Vtable = IStorageFileStatics_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1501873936,
                56050,
                17352,
                [139, 180, 164, 211, 234, 207, 208, 63],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageFileStatics_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                path: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                uri: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                display_name_with_extension: ::windows::RawPtr,
                data_requested: ::windows::RawPtr,
                thumbnail: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                file_to_replace: ::windows::RawPtr,
                data_requested: ::windows::RawPtr,
                thumbnail: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                display_name_with_extension: ::windows::RawPtr,
                uri: ::windows::RawPtr,
                thumbnail: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                file_to_replace: ::windows::RawPtr,
                uri: ::windows::RawPtr,
                thumbnail: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageFileStatics {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{5984c710-daf2-43c8-8bb4-a4d3eacfd03f}") };
        }
        impl ::std::convert::From<IStorageFileStatics> for ::windows::Object {
            fn from(value: IStorageFileStatics) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageFileStatics> for ::windows::Object {
            fn from(value: &IStorageFileStatics) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageFileStatics {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IStorageFileStatics {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct IStorageFileStatics2(::windows::Object);
        impl ::std::clone::Clone for IStorageFileStatics2 {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IStorageFileStatics2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IStorageFileStatics2 {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IStorageFileStatics2 {}
        impl IStorageFileStatics2 {
            pub fn get_file_from_path_for_user_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, super::system::User>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                user: T0__,
                path: T1__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        user.into().abi(),
                        path.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IStorageFileStatics2 {
            type Vtable = IStorageFileStatics2_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1551280001,
                8494,
                19193,
                [143, 4, 116, 12, 174, 16, 137, 116],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IStorageFileStatics2_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                user: ::windows::RawPtr,
                path: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IStorageFileStatics2 {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{5c76a781-212e-4af9-8f04-740cae108974}") };
        }
        impl ::std::convert::From<IStorageFileStatics2> for ::windows::Object {
            fn from(value: IStorageFileStatics2) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IStorageFileStatics2> for ::windows::Object {
            fn from(value: &IStorageFileStatics2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageFileStatics2 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IStorageFileStatics2
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct StorageFile(::windows::Object);
        impl StorageFile {
            pub fn file_type(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn content_type(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn open_async(
                &self,
                access_mode: FileAccessMode,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStream>>
            {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        streams::IRandomAccessStream,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        access_mode,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        streams::IRandomAccessStream,
                    >>(result__)
                }
            }
            pub fn open_transacted_write_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageStreamTransaction>>
            {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageStreamTransaction > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<StorageStreamTransaction>>(
                            result__,
                        )
                }
            }
            pub fn copy_overload_default_name_and_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFolder>>,
            >(
                &self,
                destination_folder: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        destination_folder.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn copy_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        destination_folder.into().abi(),
                        desired_new_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn copy_overload<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
                option: NameCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        destination_folder.into().abi(),
                        desired_new_name.into().abi(),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                }
            }
            pub fn copy_and_replace_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFile>>,
            >(
                &self,
                file_to_replace: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        file_to_replace.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn move_overload_default_name_and_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFolder>>,
            >(
                &self,
                destination_folder: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        destination_folder.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn move_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        destination_folder.into().abi(),
                        desired_new_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn move_overload<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFolder>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                destination_folder: T0__,
                desired_new_name: T1__,
                option: NameCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        destination_folder.into().abi(),
                        desired_new_name.into().abi(),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn move_and_replace_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFile>>,
            >(
                &self,
                file_to_replace: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        file_to_replace.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn open_with_options_async(
                &self,
                access_mode: FileAccessMode,
                options: StorageOpenOptions,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStream>>
            {
                let this = &::windows::Interface::cast::<IStorageFile2>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        streams::IRandomAccessStream,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        access_mode,
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        streams::IRandomAccessStream,
                    >>(result__)
                }
            }
            pub fn open_transacted_write_with_options_async(
                &self,
                options: StorageOpenOptions,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageStreamTransaction>>
            {
                let this = &::windows::Interface::cast::<IStorageFile2>(self).unwrap();
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageStreamTransaction > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        StorageStreamTransaction,
                    >>(result__)
                }
            }
            pub fn is_available(&self) -> ::windows::Result<bool> {
                let this =
                    &::windows::Interface::cast::<IStorageFilePropertiesWithAvailability>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<bool>(result__)
                }
            }
            pub fn get_file_from_path_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                path: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics(|this| unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        path.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                })
            }
            pub fn get_file_from_application_uri_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, super::foundation::Uri>>,
            >(
                uri: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics(|this| unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        uri.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                })
            }
            pub fn create_streamed_file_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                T1__: ::std::convert::Into<::windows::Param<'a, StreamedFileDataRequestedHandler>>,
                T2__: ::std::convert::Into<::windows::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                display_name_with_extension: T0__,
                data_requested: T1__,
                thumbnail: T2__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics(|this| unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        display_name_with_extension.into().abi(),
                        data_requested.into().abi(),
                        thumbnail.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                })
            }
            pub fn replace_with_streamed_file_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFile>>,
                T1__: ::std::convert::Into<::windows::Param<'a, StreamedFileDataRequestedHandler>>,
                T2__: ::std::convert::Into<::windows::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                file_to_replace: T0__,
                data_requested: T1__,
                thumbnail: T2__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics(|this| unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        file_to_replace.into().abi(),
                        data_requested.into().abi(),
                        thumbnail.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                })
            }
            pub fn create_streamed_file_from_uri_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                T1__: ::std::convert::Into<::windows::Param<'a, super::foundation::Uri>>,
                T2__: ::std::convert::Into<::windows::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                display_name_with_extension: T0__,
                uri: T1__,
                thumbnail: T2__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics(|this| unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        display_name_with_extension.into().abi(),
                        uri.into().abi(),
                        thumbnail.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                })
            }
            pub fn replace_with_streamed_file_from_uri_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, IStorageFile>>,
                T1__: ::std::convert::Into<::windows::Param<'a, super::foundation::Uri>>,
                T2__: ::std::convert::Into<::windows::Param<'a, streams::IRandomAccessStreamReference>>,
            >(
                file_to_replace: T0__,
                uri: T1__,
                thumbnail: T2__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics(|this| unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        file_to_replace.into().abi(),
                        uri.into().abi(),
                        thumbnail.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                })
            }
            pub fn get_file_from_path_for_user_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, super::system::User>>,
                T1__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                user: T0__,
                path: T1__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFile>> {
                Self::IStorageFileStatics2(|this| unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFile > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        user.into().abi(),
                        path.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
                })
            }
            pub fn rename_async_overload_default_options<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn rename_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                desired_name: T0__,
                option: NameCollisionOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        desired_name.into().abi(),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn delete_async_overload_default_options(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn delete_async(
                &self,
                option: StorageDeleteOption,
            ) -> ::windows::Result<super::foundation::IAsyncAction> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncAction as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        option,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncAction>(result__)
                }
            }
            pub fn get_basic_properties_async(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::BasicProperties>,
            > {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::BasicProperties,
                    >>(result__)
                }
            }
            pub fn name(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn path(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn attributes(&self) -> ::windows::Result<FileAttributes> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <FileAttributes as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<FileAttributes>(result__)
                }
            }
            pub fn date_created(&self) -> ::windows::Result<super::foundation::DateTime> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::DateTime as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::DateTime>(result__)
                }
            }
            pub fn is_of_type(&self, r#type: StorageItemTypes) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IStorageItem>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        r#type,
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn get_parent_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<StorageFolder>> {
                let this = &::windows::Interface::cast::<IStorageItem2>(self).unwrap();
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < StorageFolder > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
                }
            }
            pub fn is_equal<'a, T0__: ::std::convert::Into<::windows::Param<'a, IStorageItem>>>(
                &self,
                item: T0__,
            ) -> ::windows::Result<bool> {
                let this = &::windows::Interface::cast::<IStorageItem2>(self).unwrap();
                unsafe {
                    let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        item.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<bool>(result__)
                }
            }
            pub fn get_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        mode,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn display_name(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn display_type(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn folder_relative_id(&self) -> ::windows::Result<::windows::HString> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn properties(
                &self,
            ) -> ::windows::Result<file_properties::StorageItemContentProperties> {
                let this = &::windows::Interface::cast::<IStorageItemProperties>(self).unwrap();
                unsafe {
                    let mut result__ : < file_properties :: StorageItemContentProperties as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        &mut result__,
                    )
                    .from_abi::<file_properties::StorageItemContentProperties>(result__)
                }
            }
            pub fn get_scaled_image_as_thumbnail_async_overload_default_size_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties2>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(
                        ::windows::Abi::abi(this),
                        mode,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_scaled_image_as_thumbnail_async_overload_default_options(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties2>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn get_scaled_image_as_thumbnail_async(
                &self,
                mode: file_properties::ThumbnailMode,
                requested_size: u32,
                options: file_properties::ThumbnailOptions,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>,
            > {
                let this = &::windows::Interface::cast::<IStorageItemProperties2>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        mode,
                        requested_size,
                        options,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        file_properties::StorageItemThumbnail,
                    >>(result__)
                }
            }
            pub fn provider(&self) -> ::windows::Result<StorageProvider> {
                let this = &::windows::Interface::cast::<IStorageItemPropertiesWithProvider>(self)
                    .unwrap();
                unsafe {
                    let mut result__: <StorageProvider as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<StorageProvider>(result__)
                }
            }
            pub fn open_sequential_read_async(
                &self,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<streams::IInputStream>>
            {
                let this =
                    &::windows::Interface::cast::<streams::IInputStreamReference>(self).unwrap();
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < streams :: IInputStream > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<streams::IInputStream>>(
                            result__,
                        )
                }
            }
            pub fn open_read_async(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<streams::IRandomAccessStreamWithContentType>,
            > {
                let this =
                    &::windows::Interface::cast::<streams::IRandomAccessStreamReference>(self)
                        .unwrap();
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        streams::IRandomAccessStreamWithContentType,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<
                            streams::IRandomAccessStreamWithContentType,
                        >>(result__)
                }
            }
            #[allow(non_snake_case)]
            fn IStorageFileStatics<R, F: FnOnce(&IStorageFileStatics) -> ::windows::Result<R>>(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<StorageFile, IStorageFileStatics> =
                    ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
            #[allow(non_snake_case)]
            fn IStorageFileStatics2<R, F: FnOnce(&IStorageFileStatics2) -> ::windows::Result<R>>(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<StorageFile, IStorageFileStatics2> =
                    ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::std::clone::Clone for StorageFile {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for StorageFile {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for StorageFile {}
        impl ::std::fmt::Debug for StorageFile {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for StorageFile {
            const NAME: &'static str = "Windows.Storage.StorageFile";
        }
        unsafe impl ::windows::Interface for StorageFile {
            type Vtable = IStorageFile_abi;
            const IID: ::windows::Guid = <IStorageFile as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for StorageFile {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"rc(Windows.Storage.StorageFile;{fa3f6186-4214-428c-a64c-14c9ac7315ea})",
            );
        }
        impl ::std::convert::From<StorageFile> for ::windows::Object {
            fn from(value: StorageFile) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&StorageFile> for ::windows::Object {
            fn from(value: &StorageFile) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for StorageFile {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a StorageFile {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageFile {
            fn from(value: StorageFile) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageFile {
            fn from(value: &StorageFile) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFile>> for StorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageFile> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageFile>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFile>> for &'a StorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageFile> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageFile>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageFile2 {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageFile2 {
            fn from(value: &StorageFile) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFile2>> for StorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageFile2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageFile2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFile2>> for &'a StorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageFile2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageFile2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageFilePropertiesWithAvailability {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageFilePropertiesWithAvailability {
            fn from(value: &StorageFile) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFilePropertiesWithAvailability>>
            for StorageFile
        {
            fn into(self) -> ::windows::Param<'a, IStorageFilePropertiesWithAvailability> {
                ::windows::Param::Owned(::std::convert::Into::<
                    IStorageFilePropertiesWithAvailability,
                >::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFilePropertiesWithAvailability>>
            for &'a StorageFile
        {
            fn into(self) -> ::windows::Param<'a, IStorageFilePropertiesWithAvailability> {
                ::windows::Param::Owned(::std::convert::Into::<
                    IStorageFilePropertiesWithAvailability,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageItem {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageItem {
            fn from(value: &StorageFile) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem>> for StorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageItem> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem>> for &'a StorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageItem> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageItem2 {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageItem2 {
            fn from(value: &StorageFile) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem2>> for StorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageItem2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItem2>> for &'a StorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageItem2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItem2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageItemProperties {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageItemProperties {
            fn from(value: &StorageFile) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemProperties>> for StorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageItemProperties> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemProperties>> for &'a StorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageItemProperties> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageItemProperties2 {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageItemProperties2 {
            fn from(value: &StorageFile) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemProperties2>> for StorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageItemProperties2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItemProperties2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemProperties2>> for &'a StorageFile {
            fn into(self) -> ::windows::Param<'a, IStorageItemProperties2> {
                ::windows::Param::Owned(::std::convert::Into::<IStorageItemProperties2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<StorageFile> for IStorageItemPropertiesWithProvider {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for IStorageItemPropertiesWithProvider {
            fn from(value: &StorageFile) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemPropertiesWithProvider>>
            for StorageFile
        {
            fn into(self) -> ::windows::Param<'a, IStorageItemPropertiesWithProvider> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<IStorageItemPropertiesWithProvider>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemPropertiesWithProvider>>
            for &'a StorageFile
        {
            fn into(self) -> ::windows::Param<'a, IStorageItemPropertiesWithProvider> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<IStorageItemPropertiesWithProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<StorageFile> for streams::IInputStreamReference {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for streams::IInputStreamReference {
            fn from(value: &StorageFile) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, streams::IInputStreamReference>>
            for StorageFile
        {
            fn into(self) -> ::windows::Param<'a, streams::IInputStreamReference> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<streams::IInputStreamReference>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, streams::IInputStreamReference>>
            for &'a StorageFile
        {
            fn into(self) -> ::windows::Param<'a, streams::IInputStreamReference> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<streams::IInputStreamReference>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        impl ::std::convert::From<StorageFile> for streams::IRandomAccessStreamReference {
            fn from(value: StorageFile) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&StorageFile> for streams::IRandomAccessStreamReference {
            fn from(value: &StorageFile) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, streams::IRandomAccessStreamReference>>
            for StorageFile
        {
            fn into(self) -> ::windows::Param<'a, streams::IRandomAccessStreamReference> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<streams::IRandomAccessStreamReference>::into(self),
                )
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, streams::IRandomAccessStreamReference>>
            for &'a StorageFile
        {
            fn into(self) -> ::windows::Param<'a, streams::IRandomAccessStreamReference> {
                ::windows::Param::Owned(
                    ::std::convert::Into::<streams::IRandomAccessStreamReference>::into(
                        ::std::clone::Clone::clone(self),
                    ),
                )
            }
        }
        #[allow(unused_variables)]
        #[allow(non_upper_case_globals)]
        pub mod file_properties {
            #[repr(transparent)]
            pub struct IBasicProperties(::windows::Object);
            impl ::std::clone::Clone for IBasicProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IBasicProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IBasicProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IBasicProperties {}
            impl IBasicProperties {
                pub fn size(&self) -> ::windows::Result<u64> {
                    let this = self;
                    unsafe {
                        let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u64>(result__)
                    }
                }
                pub fn date_modified(
                    &self,
                ) -> ::windows::Result<super::super::foundation::DateTime> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: DateTime as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::DateTime>(result__)
                    }
                }
                pub fn item_date(&self) -> ::windows::Result<super::super::foundation::DateTime> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: DateTime as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::DateTime>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IBasicProperties {
                type Vtable = IBasicProperties_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3495777755,
                    30814,
                    19046,
                    [190, 2, 155, 238, 197, 138, 234, 129],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IBasicProperties_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut super::super::foundation::DateTime_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut super::super::foundation::DateTime_abi,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IBasicProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{d05d55db-785e-4a66-be02-9beec58aea81}")
                };
            }
            impl ::std::convert::From<IBasicProperties> for ::windows::Object {
                fn from(value: IBasicProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IBasicProperties> for ::windows::Object {
                fn from(value: &IBasicProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IBasicProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IBasicProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IStorageItemExtraProperties(::windows::Object);
            impl ::std::clone::Clone for IStorageItemExtraProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IStorageItemExtraProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IStorageItemExtraProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IStorageItemExtraProperties {}
            impl IStorageItemExtraProperties {
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::windows::HString,
                            ::windows::Object,
                        >,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            properties_to_retrieve.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        >>(result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::windows::HString,
                                    ::windows::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            properties_to_save.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IStorageItemExtraProperties {
                type Vtable = IStorageItemExtraProperties_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3309527474,
                    21709,
                    17195,
                    [189, 188, 75, 25, 196, 180, 112, 215],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStorageItemExtraProperties_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    properties_to_retrieve: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    properties_to_save: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IStorageItemExtraProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{c54361b2-54cd-432b-bdbc-4b19c4b470d7}")
                };
            }
            impl ::std::convert::From<IStorageItemExtraProperties> for ::windows::Object {
                fn from(value: IStorageItemExtraProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IStorageItemExtraProperties> for ::windows::Object {
                fn from(value: &IStorageItemExtraProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IStorageItemExtraProperties
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IStorageItemExtraProperties
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct BasicProperties(::windows::Object);
            impl BasicProperties {
                pub fn size(&self) -> ::windows::Result<u64> {
                    let this = self;
                    unsafe {
                        let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u64>(result__)
                    }
                }
                pub fn date_modified(
                    &self,
                ) -> ::windows::Result<super::super::foundation::DateTime> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: DateTime as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::DateTime>(result__)
                    }
                }
                pub fn item_date(&self) -> ::windows::Result<super::super::foundation::DateTime> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: DateTime as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::DateTime>(result__)
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::windows::HString,
                            ::windows::Object,
                        >,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            properties_to_retrieve.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        >>(result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::windows::HString,
                                    ::windows::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            properties_to_save.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
            }
            impl ::std::clone::Clone for BasicProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for BasicProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for BasicProperties {}
            impl ::std::fmt::Debug for BasicProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for BasicProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.BasicProperties";
            }
            unsafe impl ::windows::Interface for BasicProperties {
                type Vtable = IBasicProperties_abi;
                const IID: ::windows::Guid = <IBasicProperties as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for BasicProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.FileProperties.BasicProperties;{d05d55db-785e-4a66-be02-9beec58aea81})" ) ;
            }
            impl ::std::convert::From<BasicProperties> for ::windows::Object {
                fn from(value: BasicProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&BasicProperties> for ::windows::Object {
                fn from(value: &BasicProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for BasicProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a BasicProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<BasicProperties> for IBasicProperties {
                fn from(value: BasicProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&BasicProperties> for IBasicProperties {
                fn from(value: &BasicProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IBasicProperties>> for BasicProperties {
                fn into(self) -> ::windows::Param<'a, IBasicProperties> {
                    ::windows::Param::Owned(::std::convert::Into::<IBasicProperties>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IBasicProperties>> for &'a BasicProperties {
                fn into(self) -> ::windows::Param<'a, IBasicProperties> {
                    ::windows::Param::Owned(::std::convert::Into::<IBasicProperties>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<BasicProperties> for IStorageItemExtraProperties {
                fn from(value: BasicProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&BasicProperties> for IStorageItemExtraProperties {
                fn from(value: &BasicProperties) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for BasicProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for &'a BasicProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct ThumbnailType(pub i32);
            impl ::std::convert::From<i32> for ThumbnailType {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for ThumbnailType {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for ThumbnailType {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for ThumbnailType {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for ThumbnailType {}
            impl ThumbnailType {
                #![allow(non_upper_case_globals)]
                pub const Image: Self = Self(0i32);
                pub const Icon: Self = Self(1i32);
            }
            unsafe impl ::windows::Abi for ThumbnailType {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ThumbnailType {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.FileProperties.ThumbnailType;i4)",
                );
            }
            #[repr(transparent)]
            pub struct IThumbnailProperties(::windows::Object);
            impl ::std::clone::Clone for IThumbnailProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IThumbnailProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IThumbnailProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IThumbnailProperties {}
            impl IThumbnailProperties {
                pub fn original_width(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn original_height(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn returned_smaller_cached_size(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn r#type(&self) -> ::windows::Result<ThumbnailType> {
                    let this = self;
                    unsafe {
                        let mut result__: <ThumbnailType as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ThumbnailType>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IThumbnailProperties {
                type Vtable = IThumbnailProperties_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1765659695,
                    56295,
                    18869,
                    [179, 179, 40, 147, 172, 93, 52, 35],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IThumbnailProperties_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ThumbnailType,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IThumbnailProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{693dd42f-dbe7-49b5-b3b3-2893ac5d3423}")
                };
            }
            impl ::std::convert::From<IThumbnailProperties> for ::windows::Object {
                fn from(value: IThumbnailProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IThumbnailProperties> for ::windows::Object {
                fn from(value: &IThumbnailProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IThumbnailProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IThumbnailProperties
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct StorageItemThumbnail(::windows::Object);
            impl StorageItemThumbnail {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<super::super::foundation::IClosable>(self)
                            .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn original_width(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<IThumbnailProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn original_height(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<IThumbnailProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn returned_smaller_cached_size(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IThumbnailProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn r#type(&self) -> ::windows::Result<ThumbnailType> {
                    let this = &::windows::Interface::cast::<IThumbnailProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <ThumbnailType as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ThumbnailType>(result__)
                    }
                }
                pub fn content_type(&self) -> ::windows::Result<::windows::HString> {
                    let this =
                        &::windows::Interface::cast::<super::streams::IContentTypeProvider>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn read_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::streams::IBuffer>>,
                >(
                    &self,
                    buffer: T0__,
                    count: u32,
                    options: super::streams::InputStreamOptions,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperationWithProgress<
                        super::streams::IBuffer,
                        u32,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<super::streams::IInputStream>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperationWithProgress<
                            super::streams::IBuffer,
                            u32,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            buffer.into().abi(),
                            count,
                            options,
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperationWithProgress<
                            super::streams::IBuffer,
                            u32,
                        >>(result__)
                    }
                }
                pub fn write_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::streams::IBuffer>>,
                >(
                    &self,
                    buffer: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperationWithProgress<u32, u32>,
                > {
                    let this =
                        &::windows::Interface::cast::<super::streams::IOutputStream>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperationWithProgress<
                            u32,
                            u32,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , buffer . into ( ) . abi ( ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: IAsyncOperationWithProgress :: < u32 , u32 > > ( result__ )
                    }
                }
                pub fn flush_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<bool>>
                {
                    let this =
                        &::windows::Interface::cast::<super::streams::IOutputStream>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < bool > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<bool>>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u64> {
                    let this =
                        &::windows::Interface::cast::<super::streams::IRandomAccessStream>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u64>(result__)
                    }
                }
                pub fn set_size(&self, value: u64) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<super::streams::IRandomAccessStream>(self)
                            .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn get_input_stream_at(
                    &self,
                    position: u64,
                ) -> ::windows::Result<super::streams::IInputStream> {
                    let this =
                        &::windows::Interface::cast::<super::streams::IRandomAccessStream>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <super::streams::IInputStream as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            position,
                            &mut result__,
                        )
                        .from_abi::<super::streams::IInputStream>(result__)
                    }
                }
                pub fn get_output_stream_at(
                    &self,
                    position: u64,
                ) -> ::windows::Result<super::streams::IOutputStream> {
                    let this =
                        &::windows::Interface::cast::<super::streams::IRandomAccessStream>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <super::streams::IOutputStream as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            position,
                            &mut result__,
                        )
                        .from_abi::<super::streams::IOutputStream>(result__)
                    }
                }
                pub fn position(&self) -> ::windows::Result<u64> {
                    let this =
                        &::windows::Interface::cast::<super::streams::IRandomAccessStream>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u64>(result__)
                    }
                }
                pub fn seek(&self, position: u64) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<super::streams::IRandomAccessStream>(self)
                            .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(::windows::Abi::abi(this), position)
                            .ok()
                    }
                }
                pub fn clone_stream(
                    &self,
                ) -> ::windows::Result<super::streams::IRandomAccessStream> {
                    let this =
                        &::windows::Interface::cast::<super::streams::IRandomAccessStream>(self)
                            .unwrap();
                    unsafe {
                        let mut result__ : < super :: streams :: IRandomAccessStream as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::streams::IRandomAccessStream>(result__)
                    }
                }
                pub fn can_read(&self) -> ::windows::Result<bool> {
                    let this =
                        &::windows::Interface::cast::<super::streams::IRandomAccessStream>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn can_write(&self) -> ::windows::Result<bool> {
                    let this =
                        &::windows::Interface::cast::<super::streams::IRandomAccessStream>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
            }
            impl ::std::clone::Clone for StorageItemThumbnail {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for StorageItemThumbnail {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for StorageItemThumbnail {}
            impl ::std::fmt::Debug for StorageItemThumbnail {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for StorageItemThumbnail {
                const NAME: &'static str = "Windows.Storage.FileProperties.StorageItemThumbnail";
            }
            unsafe impl ::windows::Interface for StorageItemThumbnail {
                type Vtable = super::streams::IRandomAccessStreamWithContentType_abi;
                const IID : :: windows :: Guid = < super :: streams :: IRandomAccessStreamWithContentType as :: windows :: Interface > :: IID ;
            }
            unsafe impl ::windows::RuntimeType for StorageItemThumbnail {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.FileProperties.StorageItemThumbnail;{cc254827-4b3d-438f-9232-10c76bc7e038})" ) ;
            }
            impl ::std::convert::From<StorageItemThumbnail> for ::windows::Object {
                fn from(value: StorageItemThumbnail) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for ::windows::Object {
                fn from(value: &StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for StorageItemThumbnail {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for super::super::foundation::IClosable {
                fn from(value: StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for super::super::foundation::IClosable {
                fn from(value: &StorageItemThumbnail) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::super::foundation::IClosable>>
                for StorageItemThumbnail
            {
                fn into(self) -> ::windows::Param<'a, super::super::foundation::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::foundation::IClosable,
                    >::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::super::foundation::IClosable>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::windows::Param<'a, super::super::foundation::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::foundation::IClosable,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for IThumbnailProperties {
                fn from(value: StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for IThumbnailProperties {
                fn from(value: &StorageItemThumbnail) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IThumbnailProperties>> for StorageItemThumbnail {
                fn into(self) -> ::windows::Param<'a, IThumbnailProperties> {
                    ::windows::Param::Owned(::std::convert::Into::<IThumbnailProperties>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IThumbnailProperties>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::windows::Param<'a, IThumbnailProperties> {
                    ::windows::Param::Owned(::std::convert::Into::<IThumbnailProperties>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for super::streams::IContentTypeProvider {
                fn from(value: StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for super::streams::IContentTypeProvider {
                fn from(value: &StorageItemThumbnail) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::std::convert::Into<::windows::Param<'a, super::streams::IContentTypeProvider>>
                for StorageItemThumbnail
            {
                fn into(self) -> ::windows::Param<'a, super::streams::IContentTypeProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::streams::IContentTypeProvider,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<::windows::Param<'a, super::streams::IContentTypeProvider>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::windows::Param<'a, super::streams::IContentTypeProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::streams::IContentTypeProvider,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for super::streams::IInputStream {
                fn from(value: StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for super::streams::IInputStream {
                fn from(value: &StorageItemThumbnail) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::streams::IInputStream>>
                for StorageItemThumbnail
            {
                fn into(self) -> ::windows::Param<'a, super::streams::IInputStream> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<super::streams::IInputStream>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::streams::IInputStream>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::windows::Param<'a, super::streams::IInputStream> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<super::streams::IInputStream>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for super::streams::IOutputStream {
                fn from(value: StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for super::streams::IOutputStream {
                fn from(value: &StorageItemThumbnail) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::streams::IOutputStream>>
                for StorageItemThumbnail
            {
                fn into(self) -> ::windows::Param<'a, super::streams::IOutputStream> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<super::streams::IOutputStream>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::streams::IOutputStream>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::windows::Param<'a, super::streams::IOutputStream> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<super::streams::IOutputStream>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<StorageItemThumbnail> for super::streams::IRandomAccessStream {
                fn from(value: StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail> for super::streams::IRandomAccessStream {
                fn from(value: &StorageItemThumbnail) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::streams::IRandomAccessStream>>
                for StorageItemThumbnail
            {
                fn into(self) -> ::windows::Param<'a, super::streams::IRandomAccessStream> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::streams::IRandomAccessStream,
                    >::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::streams::IRandomAccessStream>>
                for &'a StorageItemThumbnail
            {
                fn into(self) -> ::windows::Param<'a, super::streams::IRandomAccessStream> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::streams::IRandomAccessStream,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<StorageItemThumbnail>
                for super::streams::IRandomAccessStreamWithContentType
            {
                fn from(value: StorageItemThumbnail) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageItemThumbnail>
                for super::streams::IRandomAccessStreamWithContentType
            {
                fn from(value: &StorageItemThumbnail) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, super::streams::IRandomAccessStreamWithContentType>,
                > for StorageItemThumbnail
            {
                fn into(
                    self,
                ) -> ::windows::Param<'a, super::streams::IRandomAccessStreamWithContentType>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::streams::IRandomAccessStreamWithContentType,
                    >::into(self))
                }
            }
            impl<'a>
                ::std::convert::Into<
                    ::windows::Param<'a, super::streams::IRandomAccessStreamWithContentType>,
                > for &'a StorageItemThumbnail
            {
                fn into(
                    self,
                ) -> ::windows::Param<'a, super::streams::IRandomAccessStreamWithContentType>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::streams::IRandomAccessStreamWithContentType,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct ThumbnailMode(pub i32);
            impl ::std::convert::From<i32> for ThumbnailMode {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for ThumbnailMode {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for ThumbnailMode {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for ThumbnailMode {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for ThumbnailMode {}
            impl ThumbnailMode {
                #![allow(non_upper_case_globals)]
                pub const PicturesView: Self = Self(0i32);
                pub const VideosView: Self = Self(1i32);
                pub const MusicView: Self = Self(2i32);
                pub const DocumentsView: Self = Self(3i32);
                pub const ListView: Self = Self(4i32);
                pub const SingleItem: Self = Self(5i32);
            }
            unsafe impl ::windows::Abi for ThumbnailMode {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ThumbnailMode {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.FileProperties.ThumbnailMode;i4)",
                );
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct ThumbnailOptions(pub u32);
            impl ::std::convert::From<u32> for ThumbnailOptions {
                fn from(value: u32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for ThumbnailOptions {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for ThumbnailOptions {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for ThumbnailOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for ThumbnailOptions {}
            impl ThumbnailOptions {
                #![allow(non_upper_case_globals)]
                pub const None: Self = Self(0u32);
                pub const ReturnOnlyIfCached: Self = Self(1u32);
                pub const ResizeThumbnail: Self = Self(2u32);
                pub const UseCurrentScale: Self = Self(4u32);
            }
            unsafe impl ::windows::Abi for ThumbnailOptions {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ThumbnailOptions {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.FileProperties.ThumbnailOptions;u4)",
                );
            }
            impl ::std::ops::BitOr for ThumbnailOptions {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self(self.0 | rhs.0)
                }
            }
            impl ::std::ops::BitAnd for ThumbnailOptions {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self(self.0 & rhs.0)
                }
            }
            #[repr(transparent)]
            pub struct IMusicProperties(::windows::Object);
            impl ::std::clone::Clone for IMusicProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IMusicProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IMusicProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IMusicProperties {}
            impl IMusicProperties {
                pub fn album(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_album<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn artist(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_artist<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn genre(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .10 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn track_number(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_track_number(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn title(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn rating(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_rating(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).16)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn duration(&self) -> ::windows::Result<super::super::foundation::TimeSpan> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: TimeSpan as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::TimeSpan>(result__)
                    }
                }
                pub fn bitrate(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn album_artist(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_album_artist<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn composers(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .21 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn conductors(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .22 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn subtitle(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).23)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_subtitle<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).24)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn producers(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .25 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn publisher(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).26)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_publisher<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).27)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn writers(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .28 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn year(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).29)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_year(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).30)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::windows::HString,
                            ::windows::Object,
                        >,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            properties_to_retrieve.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        >>(result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::windows::HString,
                                    ::windows::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            properties_to_save.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IMusicProperties {
                type Vtable = IMusicProperties_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3163204450,
                    26348,
                    16794,
                    [188, 93, 202, 101, 164, 203, 70, 218],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IMusicProperties_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut super::super::foundation::TimeSpan_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: u32,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IMusicProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{bc8aab62-66ec-419a-bc5d-ca65a4cb46da}")
                };
            }
            impl ::std::convert::From<IMusicProperties> for ::windows::Object {
                fn from(value: IMusicProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IMusicProperties> for ::windows::Object {
                fn from(value: &IMusicProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IMusicProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IMusicProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IMusicProperties> for IStorageItemExtraProperties {
                fn from(value: IMusicProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IMusicProperties> for IStorageItemExtraProperties {
                fn from(value: &IMusicProperties) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for IMusicProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for &'a IMusicProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(transparent)]
            pub struct MusicProperties(::windows::Object);
            impl MusicProperties {
                pub fn album(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_album<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn artist(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_artist<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn genre(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .10 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn track_number(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_track_number(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn title(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn rating(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_rating(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).16)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn duration(&self) -> ::windows::Result<super::super::foundation::TimeSpan> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: TimeSpan as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::TimeSpan>(result__)
                    }
                }
                pub fn bitrate(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn album_artist(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_album_artist<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn composers(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .21 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn conductors(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .22 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn subtitle(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).23)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_subtitle<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).24)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn producers(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .25 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn publisher(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).26)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_publisher<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).27)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn writers(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .28 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn year(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).29)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_year(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).30)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::windows::HString,
                            ::windows::Object,
                        >,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            properties_to_retrieve.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        >>(result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::windows::HString,
                                    ::windows::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            properties_to_save.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
            }
            impl ::std::clone::Clone for MusicProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for MusicProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for MusicProperties {}
            impl ::std::fmt::Debug for MusicProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for MusicProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.MusicProperties";
            }
            unsafe impl ::windows::Interface for MusicProperties {
                type Vtable = IMusicProperties_abi;
                const IID: ::windows::Guid = <IMusicProperties as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for MusicProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.FileProperties.MusicProperties;{bc8aab62-66ec-419a-bc5d-ca65a4cb46da})" ) ;
            }
            impl ::std::convert::From<MusicProperties> for ::windows::Object {
                fn from(value: MusicProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&MusicProperties> for ::windows::Object {
                fn from(value: &MusicProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for MusicProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a MusicProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<MusicProperties> for IMusicProperties {
                fn from(value: MusicProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&MusicProperties> for IMusicProperties {
                fn from(value: &MusicProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IMusicProperties>> for MusicProperties {
                fn into(self) -> ::windows::Param<'a, IMusicProperties> {
                    ::windows::Param::Owned(::std::convert::Into::<IMusicProperties>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IMusicProperties>> for &'a MusicProperties {
                fn into(self) -> ::windows::Param<'a, IMusicProperties> {
                    ::windows::Param::Owned(::std::convert::Into::<IMusicProperties>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<MusicProperties> for IStorageItemExtraProperties {
                fn from(value: MusicProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&MusicProperties> for IStorageItemExtraProperties {
                fn from(value: &MusicProperties) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for MusicProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for &'a MusicProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct VideoOrientation(pub i32);
            impl ::std::convert::From<i32> for VideoOrientation {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for VideoOrientation {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for VideoOrientation {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for VideoOrientation {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for VideoOrientation {}
            impl VideoOrientation {
                #![allow(non_upper_case_globals)]
                pub const Normal: Self = Self(0i32);
                pub const Rotate90: Self = Self(90i32);
                pub const Rotate180: Self = Self(180i32);
                pub const Rotate270: Self = Self(270i32);
            }
            unsafe impl ::windows::Abi for VideoOrientation {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for VideoOrientation {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.FileProperties.VideoOrientation;i4)",
                );
            }
            #[repr(transparent)]
            pub struct IVideoProperties(::windows::Object);
            impl ::std::clone::Clone for IVideoProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IVideoProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IVideoProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IVideoProperties {}
            impl IVideoProperties {
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::windows::HString,
                            ::windows::Object,
                        >,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            properties_to_retrieve.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        >>(result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::windows::HString,
                                    ::windows::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            properties_to_save.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn rating(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_rating(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn keywords(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .8 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn width(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn height(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn duration(&self) -> ::windows::Result<super::super::foundation::TimeSpan> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: TimeSpan as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::TimeSpan>(result__)
                    }
                }
                pub fn latitude(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IReference<f64>> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IReference :: < f64 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IReference<f64>>(result__)
                    }
                }
                pub fn longitude(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IReference<f64>> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IReference :: < f64 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IReference<f64>>(result__)
                    }
                }
                pub fn title(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn subtitle(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_subtitle<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn producers(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .18 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn publisher(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_publisher<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn writers(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .21 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn year(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).22)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_year(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).23)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn bitrate(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).24)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn directors(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .25 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn orientation(&self) -> ::windows::Result<VideoOrientation> {
                    let this = self;
                    unsafe {
                        let mut result__: <VideoOrientation as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).26)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<VideoOrientation>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IVideoProperties {
                type Vtable = IVideoProperties_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1905976583,
                    26846,
                    19896,
                    [151, 222, 73, 153, 140, 5, 159, 47],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVideoProperties_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut super::super::foundation::TimeSpan_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut VideoOrientation,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IVideoProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{719ae507-68de-4db8-97de-49998c059f2f}")
                };
            }
            impl ::std::convert::From<IVideoProperties> for ::windows::Object {
                fn from(value: IVideoProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IVideoProperties> for ::windows::Object {
                fn from(value: &IVideoProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IVideoProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IVideoProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IVideoProperties> for IStorageItemExtraProperties {
                fn from(value: IVideoProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IVideoProperties> for IStorageItemExtraProperties {
                fn from(value: &IVideoProperties) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for IVideoProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for &'a IVideoProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(transparent)]
            pub struct VideoProperties(::windows::Object);
            impl VideoProperties {
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::windows::HString,
                            ::windows::Object,
                        >,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            properties_to_retrieve.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        >>(result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::windows::HString,
                                    ::windows::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            properties_to_save.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn rating(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_rating(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn keywords(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .8 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn width(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn height(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn duration(&self) -> ::windows::Result<super::super::foundation::TimeSpan> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: TimeSpan as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::TimeSpan>(result__)
                    }
                }
                pub fn latitude(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IReference<f64>> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IReference :: < f64 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IReference<f64>>(result__)
                    }
                }
                pub fn longitude(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IReference<f64>> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IReference :: < f64 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IReference<f64>>(result__)
                    }
                }
                pub fn title(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn subtitle(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_subtitle<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn producers(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .18 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn publisher(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_publisher<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn writers(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .21 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn year(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).22)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_year(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).23)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn bitrate(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).24)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn directors(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .25 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn orientation(&self) -> ::windows::Result<VideoOrientation> {
                    let this = self;
                    unsafe {
                        let mut result__: <VideoOrientation as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).26)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<VideoOrientation>(result__)
                    }
                }
            }
            impl ::std::clone::Clone for VideoProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for VideoProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for VideoProperties {}
            impl ::std::fmt::Debug for VideoProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for VideoProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.VideoProperties";
            }
            unsafe impl ::windows::Interface for VideoProperties {
                type Vtable = IVideoProperties_abi;
                const IID: ::windows::Guid = <IVideoProperties as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for VideoProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.FileProperties.VideoProperties;{719ae507-68de-4db8-97de-49998c059f2f})" ) ;
            }
            impl ::std::convert::From<VideoProperties> for ::windows::Object {
                fn from(value: VideoProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&VideoProperties> for ::windows::Object {
                fn from(value: &VideoProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for VideoProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a VideoProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<VideoProperties> for IStorageItemExtraProperties {
                fn from(value: VideoProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&VideoProperties> for IStorageItemExtraProperties {
                fn from(value: &VideoProperties) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for VideoProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for &'a VideoProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<VideoProperties> for IVideoProperties {
                fn from(value: VideoProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&VideoProperties> for IVideoProperties {
                fn from(value: &VideoProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IVideoProperties>> for VideoProperties {
                fn into(self) -> ::windows::Param<'a, IVideoProperties> {
                    ::windows::Param::Owned(::std::convert::Into::<IVideoProperties>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IVideoProperties>> for &'a VideoProperties {
                fn into(self) -> ::windows::Param<'a, IVideoProperties> {
                    ::windows::Param::Owned(::std::convert::Into::<IVideoProperties>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct PhotoOrientation(pub i32);
            impl ::std::convert::From<i32> for PhotoOrientation {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for PhotoOrientation {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for PhotoOrientation {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for PhotoOrientation {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for PhotoOrientation {}
            impl PhotoOrientation {
                #![allow(non_upper_case_globals)]
                pub const Unspecified: Self = Self(0i32);
                pub const Normal: Self = Self(1i32);
                pub const FlipHorizontal: Self = Self(2i32);
                pub const Rotate180: Self = Self(3i32);
                pub const FlipVertical: Self = Self(4i32);
                pub const Transpose: Self = Self(5i32);
                pub const Rotate270: Self = Self(6i32);
                pub const Transverse: Self = Self(7i32);
                pub const Rotate90: Self = Self(8i32);
            }
            unsafe impl ::windows::Abi for PhotoOrientation {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for PhotoOrientation {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.FileProperties.PhotoOrientation;i4)",
                );
            }
            #[repr(transparent)]
            pub struct IImageProperties(::windows::Object);
            impl ::std::clone::Clone for IImageProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IImageProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IImageProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IImageProperties {}
            impl IImageProperties {
                pub fn rating(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_rating(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn keywords(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .8 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn date_taken(&self) -> ::windows::Result<super::super::foundation::DateTime> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: DateTime as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::DateTime>(result__)
                    }
                }
                pub fn set_date_taken<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::super::foundation::DateTime>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn width(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn height(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn title(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn latitude(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IReference<f64>> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IReference :: < f64 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IReference<f64>>(result__)
                    }
                }
                pub fn longitude(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IReference<f64>> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IReference :: < f64 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IReference<f64>>(result__)
                    }
                }
                pub fn camera_manufacturer(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_camera_manufacturer<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn camera_model(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_camera_model<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn orientation(&self) -> ::windows::Result<PhotoOrientation> {
                    let this = self;
                    unsafe {
                        let mut result__: <PhotoOrientation as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<PhotoOrientation>(result__)
                    }
                }
                pub fn people_names(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVectorView<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVectorView<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .22 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVectorView :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::windows::HString,
                            ::windows::Object,
                        >,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            properties_to_retrieve.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        >>(result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::windows::HString,
                                    ::windows::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            properties_to_save.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IImageProperties {
                type Vtable = IImageProperties_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1379701796,
                    64767,
                    17013,
                    [175, 238, 236, 219, 154, 180, 121, 115],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IImageProperties_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut super::super::foundation::DateTime_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: super::super::foundation::DateTime_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut PhotoOrientation,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IImageProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{523c9424-fcff-4275-afee-ecdb9ab47973}")
                };
            }
            impl ::std::convert::From<IImageProperties> for ::windows::Object {
                fn from(value: IImageProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IImageProperties> for ::windows::Object {
                fn from(value: &IImageProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IImageProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IImageProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IImageProperties> for IStorageItemExtraProperties {
                fn from(value: IImageProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IImageProperties> for IStorageItemExtraProperties {
                fn from(value: &IImageProperties) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for IImageProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for &'a IImageProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(transparent)]
            pub struct ImageProperties(::windows::Object);
            impl ImageProperties {
                pub fn rating(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_rating(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn keywords(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .8 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn date_taken(&self) -> ::windows::Result<super::super::foundation::DateTime> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: DateTime as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::DateTime>(result__)
                    }
                }
                pub fn set_date_taken<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::super::foundation::DateTime>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn width(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn height(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn title(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn latitude(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IReference<f64>> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IReference :: < f64 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IReference<f64>>(result__)
                    }
                }
                pub fn longitude(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IReference<f64>> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IReference :: < f64 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IReference<f64>>(result__)
                    }
                }
                pub fn camera_manufacturer(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_camera_manufacturer<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn camera_model(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_camera_model<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn orientation(&self) -> ::windows::Result<PhotoOrientation> {
                    let this = self;
                    unsafe {
                        let mut result__: <PhotoOrientation as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<PhotoOrientation>(result__)
                    }
                }
                pub fn people_names(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVectorView<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVectorView<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .22 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVectorView :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::windows::HString,
                            ::windows::Object,
                        >,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            properties_to_retrieve.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        >>(result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::windows::HString,
                                    ::windows::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            properties_to_save.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
            }
            impl ::std::clone::Clone for ImageProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for ImageProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for ImageProperties {}
            impl ::std::fmt::Debug for ImageProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for ImageProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.ImageProperties";
            }
            unsafe impl ::windows::Interface for ImageProperties {
                type Vtable = IImageProperties_abi;
                const IID: ::windows::Guid = <IImageProperties as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for ImageProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.FileProperties.ImageProperties;{523c9424-fcff-4275-afee-ecdb9ab47973})" ) ;
            }
            impl ::std::convert::From<ImageProperties> for ::windows::Object {
                fn from(value: ImageProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ImageProperties> for ::windows::Object {
                fn from(value: &ImageProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for ImageProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a ImageProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ImageProperties> for IImageProperties {
                fn from(value: ImageProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ImageProperties> for IImageProperties {
                fn from(value: &ImageProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IImageProperties>> for ImageProperties {
                fn into(self) -> ::windows::Param<'a, IImageProperties> {
                    ::windows::Param::Owned(::std::convert::Into::<IImageProperties>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IImageProperties>> for &'a ImageProperties {
                fn into(self) -> ::windows::Param<'a, IImageProperties> {
                    ::windows::Param::Owned(::std::convert::Into::<IImageProperties>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ImageProperties> for IStorageItemExtraProperties {
                fn from(value: ImageProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ImageProperties> for IStorageItemExtraProperties {
                fn from(value: &ImageProperties) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for ImageProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for &'a ImageProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(transparent)]
            pub struct IDocumentProperties(::windows::Object);
            impl ::std::clone::Clone for IDocumentProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IDocumentProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IDocumentProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IDocumentProperties {}
            impl IDocumentProperties {
                pub fn author(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn title(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn keywords(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .9 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn comment(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_comment<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::windows::HString,
                            ::windows::Object,
                        >,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            properties_to_retrieve.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        >>(result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::windows::HString,
                                    ::windows::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            properties_to_save.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IDocumentProperties {
                type Vtable = IDocumentProperties_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2125142460,
                    6177,
                    18723,
                    [180, 169, 10, 234, 64, 77, 0, 112],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDocumentProperties_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IDocumentProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{7eab19bc-1821-4923-b4a9-0aea404d0070}")
                };
            }
            impl ::std::convert::From<IDocumentProperties> for ::windows::Object {
                fn from(value: IDocumentProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IDocumentProperties> for ::windows::Object {
                fn from(value: &IDocumentProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IDocumentProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IDocumentProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IDocumentProperties> for IStorageItemExtraProperties {
                fn from(value: IDocumentProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IDocumentProperties> for IStorageItemExtraProperties {
                fn from(value: &IDocumentProperties) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for IDocumentProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for &'a IDocumentProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(transparent)]
            pub struct DocumentProperties(::windows::Object);
            impl DocumentProperties {
                pub fn author(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn title(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_title<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn keywords(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .9 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn comment(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_comment<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::windows::HString,
                            ::windows::Object,
                        >,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            properties_to_retrieve.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        >>(result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::windows::HString,
                                    ::windows::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            properties_to_save.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
            }
            impl ::std::clone::Clone for DocumentProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for DocumentProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for DocumentProperties {}
            impl ::std::fmt::Debug for DocumentProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for DocumentProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.DocumentProperties";
            }
            unsafe impl ::windows::Interface for DocumentProperties {
                type Vtable = IDocumentProperties_abi;
                const IID: ::windows::Guid = <IDocumentProperties as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for DocumentProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.FileProperties.DocumentProperties;{7eab19bc-1821-4923-b4a9-0aea404d0070})" ) ;
            }
            impl ::std::convert::From<DocumentProperties> for ::windows::Object {
                fn from(value: DocumentProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DocumentProperties> for ::windows::Object {
                fn from(value: &DocumentProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for DocumentProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a DocumentProperties {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DocumentProperties> for IDocumentProperties {
                fn from(value: DocumentProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DocumentProperties> for IDocumentProperties {
                fn from(value: &DocumentProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IDocumentProperties>> for DocumentProperties {
                fn into(self) -> ::windows::Param<'a, IDocumentProperties> {
                    ::windows::Param::Owned(::std::convert::Into::<IDocumentProperties>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IDocumentProperties>>
                for &'a DocumentProperties
            {
                fn into(self) -> ::windows::Param<'a, IDocumentProperties> {
                    ::windows::Param::Owned(::std::convert::Into::<IDocumentProperties>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DocumentProperties> for IStorageItemExtraProperties {
                fn from(value: DocumentProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DocumentProperties> for IStorageItemExtraProperties {
                fn from(value: &DocumentProperties) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for DocumentProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for &'a DocumentProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(transparent)]
            pub struct IStorageItemContentProperties(::windows::Object);
            impl ::std::clone::Clone for IStorageItemContentProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IStorageItemContentProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IStorageItemContentProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IStorageItemContentProperties {}
            impl IStorageItemContentProperties {
                pub fn get_music_properties_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<MusicProperties>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            MusicProperties,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<MusicProperties>>(
                            result__,
                        )
                    }
                }
                pub fn get_video_properties_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<VideoProperties>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            VideoProperties,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<VideoProperties>>(
                            result__,
                        )
                    }
                }
                pub fn get_image_properties_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<ImageProperties>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            ImageProperties,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<ImageProperties>>(
                            result__,
                        )
                    }
                }
                pub fn get_document_properties_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<DocumentProperties>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            DocumentProperties,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<DocumentProperties>>(
                            result__,
                        )
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::windows::HString,
                            ::windows::Object,
                        >,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            properties_to_retrieve.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        >>(result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::windows::HString,
                                    ::windows::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            properties_to_save.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IStorageItemContentProperties {
                type Vtable = IStorageItemContentProperties_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    86592429,
                    48184,
                    18623,
                    [133, 215, 119, 14, 14, 42, 224, 186],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStorageItemContentProperties_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IStorageItemContentProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{05294bad-bc38-48bf-85d7-770e0e2ae0ba}")
                };
            }
            impl ::std::convert::From<IStorageItemContentProperties> for ::windows::Object {
                fn from(value: IStorageItemContentProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IStorageItemContentProperties> for ::windows::Object {
                fn from(value: &IStorageItemContentProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IStorageItemContentProperties
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IStorageItemContentProperties
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IStorageItemContentProperties> for IStorageItemExtraProperties {
                fn from(value: IStorageItemContentProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IStorageItemContentProperties> for IStorageItemExtraProperties {
                fn from(value: &IStorageItemContentProperties) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for IStorageItemContentProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for &'a IStorageItemContentProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(transparent)]
            pub struct StorageItemContentProperties(::windows::Object);
            impl StorageItemContentProperties {
                pub fn get_music_properties_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<MusicProperties>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            MusicProperties,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<MusicProperties>>(
                            result__,
                        )
                    }
                }
                pub fn get_video_properties_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<VideoProperties>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            VideoProperties,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<VideoProperties>>(
                            result__,
                        )
                    }
                }
                pub fn get_image_properties_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<ImageProperties>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            ImageProperties,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<ImageProperties>>(
                            result__,
                        )
                    }
                }
                pub fn get_document_properties_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<DocumentProperties>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            DocumentProperties,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<DocumentProperties>>(
                            result__,
                        )
                    }
                }
                pub fn retrieve_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    properties_to_retrieve: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IMap<
                            ::windows::HString,
                            ::windows::Object,
                        >,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            properties_to_retrieve.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IMap<
                                ::windows::HString,
                                ::windows::Object,
                            >,
                        >>(result__)
                    }
                }
                pub fn save_properties_async<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<
                                super::super::foundation::collections::IKeyValuePair<
                                    ::windows::HString,
                                    ::windows::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    properties_to_save: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            properties_to_save.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
                pub fn save_properties_async_overload_default(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncAction> {
                    let this =
                        &::windows::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncAction as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncAction>(result__)
                    }
                }
            }
            impl ::std::clone::Clone for StorageItemContentProperties {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for StorageItemContentProperties {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for StorageItemContentProperties {}
            impl ::std::fmt::Debug for StorageItemContentProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for StorageItemContentProperties {
                const NAME: &'static str =
                    "Windows.Storage.FileProperties.StorageItemContentProperties";
            }
            unsafe impl ::windows::Interface for StorageItemContentProperties {
                type Vtable = IStorageItemContentProperties_abi;
                const IID: ::windows::Guid =
                    <IStorageItemContentProperties as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for StorageItemContentProperties {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.FileProperties.StorageItemContentProperties;{05294bad-bc38-48bf-85d7-770e0e2ae0ba})" ) ;
            }
            impl ::std::convert::From<StorageItemContentProperties> for ::windows::Object {
                fn from(value: StorageItemContentProperties) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&StorageItemContentProperties> for ::windows::Object {
                fn from(value: &StorageItemContentProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for StorageItemContentProperties
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a StorageItemContentProperties
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageItemContentProperties> for IStorageItemContentProperties {
                fn from(value: StorageItemContentProperties) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageItemContentProperties> for IStorageItemContentProperties {
                fn from(value: &StorageItemContentProperties) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemContentProperties>>
                for StorageItemContentProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemContentProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemContentProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemContentProperties>>
                for &'a StorageItemContentProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemContentProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemContentProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<StorageItemContentProperties> for IStorageItemExtraProperties {
                fn from(value: StorageItemContentProperties) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemContentProperties> for IStorageItemExtraProperties {
                fn from(value: &StorageItemContentProperties) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for StorageItemContentProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemExtraProperties>>
                for &'a StorageItemContentProperties
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemExtraProperties> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageItemExtraProperties>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct PropertyPrefetchOptions(pub u32);
            impl ::std::convert::From<u32> for PropertyPrefetchOptions {
                fn from(value: u32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for PropertyPrefetchOptions {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for PropertyPrefetchOptions {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for PropertyPrefetchOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for PropertyPrefetchOptions {}
            impl PropertyPrefetchOptions {
                #![allow(non_upper_case_globals)]
                pub const None: Self = Self(0u32);
                pub const MusicProperties: Self = Self(1u32);
                pub const VideoProperties: Self = Self(2u32);
                pub const ImageProperties: Self = Self(4u32);
                pub const DocumentProperties: Self = Self(8u32);
                pub const BasicProperties: Self = Self(16u32);
            }
            unsafe impl ::windows::Abi for PropertyPrefetchOptions {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for PropertyPrefetchOptions {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.FileProperties.PropertyPrefetchOptions;u4)",
                );
            }
            impl ::std::ops::BitOr for PropertyPrefetchOptions {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self(self.0 | rhs.0)
                }
            }
            impl ::std::ops::BitAnd for PropertyPrefetchOptions {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self(self.0 & rhs.0)
                }
            }
        }
        #[allow(unused_variables)]
        #[allow(non_upper_case_globals)]
        pub mod search {
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct IndexedState(pub i32);
            impl ::std::convert::From<i32> for IndexedState {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for IndexedState {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for IndexedState {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for IndexedState {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for IndexedState {}
            impl IndexedState {
                #![allow(non_upper_case_globals)]
                pub const Unknown: Self = Self(0i32);
                pub const NotIndexed: Self = Self(1i32);
                pub const PartiallyIndexed: Self = Self(2i32);
                pub const FullyIndexed: Self = Self(3i32);
            }
            unsafe impl ::windows::Abi for IndexedState {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for IndexedState {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.Search.IndexedState;i4)",
                );
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct FolderDepth(pub i32);
            impl ::std::convert::From<i32> for FolderDepth {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for FolderDepth {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for FolderDepth {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for FolderDepth {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for FolderDepth {}
            impl FolderDepth {
                #![allow(non_upper_case_globals)]
                pub const Shallow: Self = Self(0i32);
                pub const Deep: Self = Self(1i32);
            }
            unsafe impl ::windows::Abi for FolderDepth {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for FolderDepth {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.Search.FolderDepth;i4)",
                );
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct IndexerOption(pub i32);
            impl ::std::convert::From<i32> for IndexerOption {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for IndexerOption {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for IndexerOption {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for IndexerOption {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for IndexerOption {}
            impl IndexerOption {
                #![allow(non_upper_case_globals)]
                pub const UseIndexerWhenAvailable: Self = Self(0i32);
                pub const OnlyUseIndexer: Self = Self(1i32);
                pub const DoNotUseIndexer: Self = Self(2i32);
                pub const OnlyUseIndexerAndOptimizeForIndexedProperties: Self = Self(3i32);
            }
            unsafe impl ::windows::Abi for IndexerOption {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for IndexerOption {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.Search.IndexerOption;i4)",
                );
            }
            #[repr(C)]
            #[allow(non_snake_case)]
            pub struct SortEntry {
                pub property_name: ::windows::HString,
                pub ascending_order: bool,
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct SortEntry_abi(::windows::RawPtr, bool);
            unsafe impl ::windows::Abi for SortEntry {
                type Abi = SortEntry_abi;
            }
            impl ::std::default::Default for SortEntry {
                fn default() -> Self {
                    Self {
                        property_name: ::windows::HString::new(),
                        ascending_order: false,
                    }
                }
            }
            impl ::std::fmt::Debug for SortEntry {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("SortEntry")
                        .field("property_name", &format_args!("{:?}", self.property_name))
                        .field(
                            "ascending_order",
                            &format_args!("{:?}", self.ascending_order),
                        )
                        .finish()
                }
            }
            impl ::std::clone::Clone for SortEntry {
                fn clone(&self) -> Self {
                    Self {
                        property_name: <::windows::HString as std::clone::Clone>::clone(
                            &self.property_name,
                        ),
                        ascending_order: self.ascending_order,
                    }
                }
            }
            impl ::std::cmp::PartialEq for SortEntry {
                fn eq(&self, other: &Self) -> bool {
                    self.property_name == other.property_name
                        && self.ascending_order == other.ascending_order
                }
            }
            impl ::std::cmp::Eq for SortEntry {}
            unsafe impl ::windows::RuntimeType for SortEntry {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"struct(Windows.Storage.Search.SortEntry;string;b1)",
                );
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct DateStackOption(pub i32);
            impl ::std::convert::From<i32> for DateStackOption {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for DateStackOption {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for DateStackOption {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for DateStackOption {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for DateStackOption {}
            impl DateStackOption {
                #![allow(non_upper_case_globals)]
                pub const None: Self = Self(0i32);
                pub const Year: Self = Self(1i32);
                pub const Month: Self = Self(2i32);
            }
            unsafe impl ::windows::Abi for DateStackOption {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for DateStackOption {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.Search.DateStackOption;i4)",
                );
            }
            #[repr(transparent)]
            pub struct IQueryOptions(::windows::Object);
            impl ::std::clone::Clone for IQueryOptions {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IQueryOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IQueryOptions {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IQueryOptions {}
            impl IQueryOptions {
                pub fn file_type_filter(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn folder_depth(&self) -> ::windows::Result<FolderDepth> {
                    let this = self;
                    unsafe {
                        let mut result__: <FolderDepth as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<FolderDepth>(result__)
                    }
                }
                pub fn set_folder_depth(&self, value: FolderDepth) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn application_search_filter(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_application_search_filter<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn user_search_filter(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_user_search_filter<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn language(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_language<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn indexer_option(&self) -> ::windows::Result<IndexerOption> {
                    let this = self;
                    unsafe {
                        let mut result__: <IndexerOption as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IndexerOption>(result__)
                    }
                }
                pub fn set_indexer_option(&self, value: IndexerOption) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).16)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn sort_order(
                    &self,
                ) -> ::windows::Result<super::super::foundation::collections::IVector<SortEntry>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            SortEntry,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::collections::IVector<SortEntry>>(
                            result__,
                        )
                    }
                }
                pub fn group_property_name(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn date_stack_option(&self) -> ::windows::Result<DateStackOption> {
                    let this = self;
                    unsafe {
                        let mut result__: <DateStackOption as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DateStackOption>(result__)
                    }
                }
                pub fn save_to_string(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn load_from_string<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn set_thumbnail_prefetch(
                    &self,
                    mode: super::file_properties::ThumbnailMode,
                    requested_size: u32,
                    options: super::file_properties::ThumbnailOptions,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).22)(
                            ::windows::Abi::abi(this),
                            mode,
                            requested_size,
                            options,
                        )
                        .ok()
                    }
                }
                pub fn set_property_prefetch<
                    'a,
                    T1__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    options: super::file_properties::PropertyPrefetchOptions,
                    properties_to_retrieve: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).23)(
                            ::windows::Abi::abi(this),
                            options,
                            properties_to_retrieve.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for IQueryOptions {
                type Vtable = IQueryOptions_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    509495022,
                    3909,
                    18488,
                    [168, 233, 208, 71, 157, 68, 108, 48],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IQueryOptions_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut FolderDepth,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: FolderDepth,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut IndexerOption,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: IndexerOption,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut DateStackOption,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    mode: super::file_properties::ThumbnailMode,
                    requested_size: u32,
                    options: super::file_properties::ThumbnailOptions,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    options: super::file_properties::PropertyPrefetchOptions,
                    properties_to_retrieve: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IQueryOptions {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{1e5e46ee-0f45-4838-a8e9-d0479d446c30}")
                };
            }
            impl ::std::convert::From<IQueryOptions> for ::windows::Object {
                fn from(value: IQueryOptions) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IQueryOptions> for ::windows::Object {
                fn from(value: &IQueryOptions) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IQueryOptions {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IQueryOptions {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct CommonFileQuery(pub i32);
            impl ::std::convert::From<i32> for CommonFileQuery {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for CommonFileQuery {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for CommonFileQuery {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for CommonFileQuery {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for CommonFileQuery {}
            impl CommonFileQuery {
                #![allow(non_upper_case_globals)]
                pub const DefaultQuery: Self = Self(0i32);
                pub const OrderByName: Self = Self(1i32);
                pub const OrderByTitle: Self = Self(2i32);
                pub const OrderByMusicProperties: Self = Self(3i32);
                pub const OrderBySearchRank: Self = Self(4i32);
                pub const OrderByDate: Self = Self(5i32);
            }
            unsafe impl ::windows::Abi for CommonFileQuery {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for CommonFileQuery {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.Search.CommonFileQuery;i4)",
                );
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct CommonFolderQuery(pub i32);
            impl ::std::convert::From<i32> for CommonFolderQuery {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for CommonFolderQuery {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for CommonFolderQuery {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for CommonFolderQuery {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for CommonFolderQuery {}
            impl CommonFolderQuery {
                #![allow(non_upper_case_globals)]
                pub const DefaultQuery: Self = Self(0i32);
                pub const GroupByYear: Self = Self(100i32);
                pub const GroupByMonth: Self = Self(101i32);
                pub const GroupByArtist: Self = Self(102i32);
                pub const GroupByAlbum: Self = Self(103i32);
                pub const GroupByAlbumArtist: Self = Self(104i32);
                pub const GroupByComposer: Self = Self(105i32);
                pub const GroupByGenre: Self = Self(106i32);
                pub const GroupByPublishedYear: Self = Self(107i32);
                pub const GroupByRating: Self = Self(108i32);
                pub const GroupByTag: Self = Self(109i32);
                pub const GroupByAuthor: Self = Self(110i32);
                pub const GroupByType: Self = Self(111i32);
            }
            unsafe impl ::windows::Abi for CommonFolderQuery {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for CommonFolderQuery {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.Search.CommonFolderQuery;i4)",
                );
            }
            #[repr(transparent)]
            pub struct IQueryOptionsFactory(::windows::Object);
            impl ::std::clone::Clone for IQueryOptionsFactory {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IQueryOptionsFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IQueryOptionsFactory {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IQueryOptionsFactory {}
            impl IQueryOptionsFactory {
                pub fn create_common_file_query<
                    'a,
                    T1__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    query: CommonFileQuery,
                    file_type_filter: T1__,
                ) -> ::windows::Result<QueryOptions> {
                    let this = self;
                    unsafe {
                        let mut result__: <QueryOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            query,
                            file_type_filter.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<QueryOptions>(result__)
                    }
                }
                pub fn create_common_folder_query(
                    &self,
                    query: CommonFolderQuery,
                ) -> ::windows::Result<QueryOptions> {
                    let this = self;
                    unsafe {
                        let mut result__: <QueryOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            query,
                            &mut result__,
                        )
                        .from_abi::<QueryOptions>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IQueryOptionsFactory {
                type Vtable = IQueryOptionsFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    53354380,
                    43457,
                    20081,
                    [128, 17, 13, 238, 157, 72, 17, 163],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IQueryOptionsFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query: CommonFileQuery,
                    file_type_filter: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query: CommonFolderQuery,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IQueryOptionsFactory {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{032e1f8c-a9c1-4e71-8011-0dee9d4811a3}")
                };
            }
            impl ::std::convert::From<IQueryOptionsFactory> for ::windows::Object {
                fn from(value: IQueryOptionsFactory) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IQueryOptionsFactory> for ::windows::Object {
                fn from(value: &IQueryOptionsFactory) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IQueryOptionsFactory {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IQueryOptionsFactory
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IQueryOptionsWithProviderFilter(::windows::Object);
            impl ::std::clone::Clone for IQueryOptionsWithProviderFilter {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IQueryOptionsWithProviderFilter {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IQueryOptionsWithProviderFilter {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IQueryOptionsWithProviderFilter {}
            impl IQueryOptionsWithProviderFilter {
                pub fn storage_provider_id_filter(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
            }
            unsafe impl ::windows::Interface for IQueryOptionsWithProviderFilter {
                type Vtable = IQueryOptionsWithProviderFilter_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1537019942,
                    5572,
                    17629,
                    [184, 154, 71, 165, 155, 125, 124, 79],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IQueryOptionsWithProviderFilter_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IQueryOptionsWithProviderFilter {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{5b9d1026-15c4-44dd-b89a-47a59b7d7c4f}")
                };
            }
            impl ::std::convert::From<IQueryOptionsWithProviderFilter> for ::windows::Object {
                fn from(value: IQueryOptionsWithProviderFilter) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IQueryOptionsWithProviderFilter> for ::windows::Object {
                fn from(value: &IQueryOptionsWithProviderFilter) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IQueryOptionsWithProviderFilter
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IQueryOptionsWithProviderFilter
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct QueryOptions(::windows::Object);
            impl QueryOptions {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                pub fn file_type_filter(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                pub fn folder_depth(&self) -> ::windows::Result<FolderDepth> {
                    let this = self;
                    unsafe {
                        let mut result__: <FolderDepth as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<FolderDepth>(result__)
                    }
                }
                pub fn set_folder_depth(&self, value: FolderDepth) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn application_search_filter(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_application_search_filter<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn user_search_filter(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_user_search_filter<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn language(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn set_language<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn indexer_option(&self) -> ::windows::Result<IndexerOption> {
                    let this = self;
                    unsafe {
                        let mut result__: <IndexerOption as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IndexerOption>(result__)
                    }
                }
                pub fn set_indexer_option(&self, value: IndexerOption) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).16)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn sort_order(
                    &self,
                ) -> ::windows::Result<super::super::foundation::collections::IVector<SortEntry>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            SortEntry,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::collections::IVector<SortEntry>>(
                            result__,
                        )
                    }
                }
                pub fn group_property_name(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn date_stack_option(&self) -> ::windows::Result<DateStackOption> {
                    let this = self;
                    unsafe {
                        let mut result__: <DateStackOption as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DateStackOption>(result__)
                    }
                }
                pub fn save_to_string(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn load_from_string<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn set_thumbnail_prefetch(
                    &self,
                    mode: super::file_properties::ThumbnailMode,
                    requested_size: u32,
                    options: super::file_properties::ThumbnailOptions,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).22)(
                            ::windows::Abi::abi(this),
                            mode,
                            requested_size,
                            options,
                        )
                        .ok()
                    }
                }
                pub fn set_property_prefetch<
                    'a,
                    T1__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    &self,
                    options: super::file_properties::PropertyPrefetchOptions,
                    properties_to_retrieve: T1__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).23)(
                            ::windows::Abi::abi(this),
                            options,
                            properties_to_retrieve.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn create_common_file_query<
                    'a,
                    T1__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::collections::IIterable<::windows::HString>,
                        >,
                    >,
                >(
                    query: CommonFileQuery,
                    file_type_filter: T1__,
                ) -> ::windows::Result<QueryOptions> {
                    Self::IQueryOptionsFactory(|this| unsafe {
                        let mut result__: <QueryOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            query,
                            file_type_filter.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<QueryOptions>(result__)
                    })
                }
                pub fn create_common_folder_query(
                    query: CommonFolderQuery,
                ) -> ::windows::Result<QueryOptions> {
                    Self::IQueryOptionsFactory(|this| unsafe {
                        let mut result__: <QueryOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            query,
                            &mut result__,
                        )
                        .from_abi::<QueryOptions>(result__)
                    })
                }
                pub fn storage_provider_id_filter(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IVector<::windows::HString>,
                > {
                    let this = &::windows::Interface::cast::<IQueryOptionsWithProviderFilter>(self)
                        .unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IVector<
                            ::windows::HString,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: collections :: IVector :: < :: windows :: HString > > ( result__ )
                    }
                }
                #[allow(non_snake_case)]
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        QueryOptions,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                #[allow(non_snake_case)]
                fn IQueryOptionsFactory<
                    R,
                    F: FnOnce(&IQueryOptionsFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<QueryOptions, IQueryOptionsFactory> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            impl ::std::clone::Clone for QueryOptions {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for QueryOptions {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for QueryOptions {}
            impl ::std::fmt::Debug for QueryOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for QueryOptions {
                const NAME: &'static str = "Windows.Storage.Search.QueryOptions";
            }
            unsafe impl ::windows::Interface for QueryOptions {
                type Vtable = IQueryOptions_abi;
                const IID: ::windows::Guid = <IQueryOptions as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for QueryOptions {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.Search.QueryOptions;{1e5e46ee-0f45-4838-a8e9-d0479d446c30})" ) ;
            }
            impl ::std::convert::From<QueryOptions> for ::windows::Object {
                fn from(value: QueryOptions) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&QueryOptions> for ::windows::Object {
                fn from(value: &QueryOptions) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for QueryOptions {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a QueryOptions {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<QueryOptions> for IQueryOptions {
                fn from(value: QueryOptions) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&QueryOptions> for IQueryOptions {
                fn from(value: &QueryOptions) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IQueryOptions>> for QueryOptions {
                fn into(self) -> ::windows::Param<'a, IQueryOptions> {
                    ::windows::Param::Owned(::std::convert::Into::<IQueryOptions>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IQueryOptions>> for &'a QueryOptions {
                fn into(self) -> ::windows::Param<'a, IQueryOptions> {
                    ::windows::Param::Owned(::std::convert::Into::<IQueryOptions>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<QueryOptions> for IQueryOptionsWithProviderFilter {
                fn from(value: QueryOptions) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&QueryOptions> for IQueryOptionsWithProviderFilter {
                fn from(value: &QueryOptions) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IQueryOptionsWithProviderFilter>>
                for QueryOptions
            {
                fn into(self) -> ::windows::Param<'a, IQueryOptionsWithProviderFilter> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IQueryOptionsWithProviderFilter>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IQueryOptionsWithProviderFilter>>
                for &'a QueryOptions
            {
                fn into(self) -> ::windows::Param<'a, IQueryOptionsWithProviderFilter> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IQueryOptionsWithProviderFilter>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for QueryOptions {}
            unsafe impl ::std::marker::Sync for QueryOptions {}
            #[repr(transparent)]
            pub struct IStorageQueryResultBase(::windows::Object);
            impl ::std::clone::Clone for IStorageQueryResultBase {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IStorageQueryResultBase {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IStorageQueryResultBase {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IStorageQueryResultBase {}
            impl IStorageQueryResultBase {
                pub fn get_item_count_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn folder(&self) -> ::windows::Result<super::StorageFolder> {
                    let this = self;
                    unsafe {
                        let mut result__: <super::StorageFolder as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::StorageFolder>(result__)
                    }
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            changed_handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn get_current_query_options(&self) -> ::windows::Result<QueryOptions> {
                    let this = self;
                    unsafe {
                        let mut result__: <QueryOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<QueryOptions>(result__)
                    }
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            new_query_options.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for IStorageQueryResultBase {
                type Vtable = IStorageQueryResultBase_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3264730893,
                    29523,
                    18347,
                    [186, 88, 140, 97, 66, 93, 197, 75],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStorageQueryResultBase_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::foundation::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    event_cookie: super::super::foundation::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    changed_handler: ::windows::RawPtr,
                    result__: *mut super::super::foundation::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    event_cookie: super::super::foundation::EventRegistrationToken_abi,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    new_query_options: ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IStorageQueryResultBase {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{c297d70d-7353-47ab-ba58-8c61425dc54b}")
                };
            }
            impl ::std::convert::From<IStorageQueryResultBase> for ::windows::Object {
                fn from(value: IStorageQueryResultBase) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IStorageQueryResultBase> for ::windows::Object {
                fn from(value: &IStorageQueryResultBase) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageQueryResultBase {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IStorageQueryResultBase
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IStorageFileQueryResult(::windows::Object);
            impl ::std::clone::Clone for IStorageFileQueryResult {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IStorageFileQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IStorageFileQueryResult {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IStorageFileQueryResult {}
            impl IStorageFileQueryResult {
                pub fn get_files_async(
                    &self,
                    start_index: u32,
                    max_number_of_items: u32,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            start_index,
                            max_number_of_items,
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        >>(result__)
                    }
                }
                pub fn get_files_async_default_start_and_count(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        >>(result__)
                    }
                }
                pub fn get_item_count_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn folder(&self) -> ::windows::Result<super::StorageFolder> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <super::StorageFolder as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::StorageFolder>(result__)
                    }
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            changed_handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn get_current_query_options(&self) -> ::windows::Result<QueryOptions> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <QueryOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<QueryOptions>(result__)
                    }
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            new_query_options.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for IStorageFileQueryResult {
                type Vtable = IStorageFileQueryResult_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1392354375,
                    11178,
                    16684,
                    [178, 159, 212, 177, 119, 142, 250, 30],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStorageFileQueryResult_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    start_index: u32,
                    max_number_of_items: u32,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IStorageFileQueryResult {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{52fda447-2baa-412c-b29f-d4b1778efa1e}")
                };
            }
            impl ::std::convert::From<IStorageFileQueryResult> for ::windows::Object {
                fn from(value: IStorageFileQueryResult) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IStorageFileQueryResult> for ::windows::Object {
                fn from(value: &IStorageFileQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageFileQueryResult {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IStorageFileQueryResult
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IStorageFileQueryResult> for IStorageQueryResultBase {
                fn from(value: IStorageFileQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IStorageFileQueryResult> for IStorageQueryResultBase {
                fn from(value: &IStorageFileQueryResult) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for IStorageFileQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for &'a IStorageFileQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IStorageFileQueryResult2(::windows::Object);
            impl ::std::clone::Clone for IStorageFileQueryResult2 {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IStorageFileQueryResult2 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IStorageFileQueryResult2 {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IStorageFileQueryResult2 {}
            impl IStorageFileQueryResult2 {
                pub fn get_matching_properties_with_ranges<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::StorageFile>>,
                >(
                    &self,
                    file: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IMap<
                        ::windows::HString,
                        super::super::foundation::collections::IVectorView<
                            super::super::data::text::TextSegment,
                        >,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IMap<
                            ::windows::HString,
                            super::super::foundation::collections::IVectorView<
                                super::super::data::text::TextSegment,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            file.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::collections::IMap<
                            ::windows::HString,
                            super::super::foundation::collections::IVectorView<
                                super::super::data::text::TextSegment,
                            >,
                        >>(result__)
                    }
                }
                pub fn get_item_count_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn folder(&self) -> ::windows::Result<super::StorageFolder> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <super::StorageFolder as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::StorageFolder>(result__)
                    }
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            changed_handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn get_current_query_options(&self) -> ::windows::Result<QueryOptions> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <QueryOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<QueryOptions>(result__)
                    }
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            new_query_options.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for IStorageFileQueryResult2 {
                type Vtable = IStorageFileQueryResult2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1314765277,
                    28993,
                    18116,
                    [139, 227, 233, 220, 158, 39, 39, 92],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStorageFileQueryResult2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    file: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IStorageFileQueryResult2 {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{4e5db9dd-7141-46c4-8be3-e9dc9e27275c}")
                };
            }
            impl ::std::convert::From<IStorageFileQueryResult2> for ::windows::Object {
                fn from(value: IStorageFileQueryResult2) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IStorageFileQueryResult2> for ::windows::Object {
                fn from(value: &IStorageFileQueryResult2) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IStorageFileQueryResult2
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IStorageFileQueryResult2
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IStorageFileQueryResult2> for IStorageQueryResultBase {
                fn from(value: IStorageFileQueryResult2) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IStorageFileQueryResult2> for IStorageQueryResultBase {
                fn from(value: &IStorageFileQueryResult2) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for IStorageFileQueryResult2
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for &'a IStorageFileQueryResult2
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct StorageFileQueryResult(::windows::Object);
            impl StorageFileQueryResult {
                pub fn get_files_async(
                    &self,
                    start_index: u32,
                    max_number_of_items: u32,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            start_index,
                            max_number_of_items,
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        >>(result__)
                    }
                }
                pub fn get_files_async_default_start_and_count(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        >>(result__)
                    }
                }
                pub fn get_matching_properties_with_ranges<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, super::StorageFile>>,
                >(
                    &self,
                    file: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::collections::IMap<
                        ::windows::HString,
                        super::super::foundation::collections::IVectorView<
                            super::super::data::text::TextSegment,
                        >,
                    >,
                > {
                    let this =
                        &::windows::Interface::cast::<IStorageFileQueryResult2>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::collections::IMap<
                            ::windows::HString,
                            super::super::foundation::collections::IVectorView<
                                super::super::data::text::TextSegment,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            file.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::collections::IMap<
                            ::windows::HString,
                            super::super::foundation::collections::IVectorView<
                                super::super::data::text::TextSegment,
                            >,
                        >>(result__)
                    }
                }
                pub fn get_item_count_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn folder(&self) -> ::windows::Result<super::StorageFolder> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <super::StorageFolder as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::StorageFolder>(result__)
                    }
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            changed_handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn get_current_query_options(&self) -> ::windows::Result<QueryOptions> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <QueryOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<QueryOptions>(result__)
                    }
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            new_query_options.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            impl ::std::clone::Clone for StorageFileQueryResult {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for StorageFileQueryResult {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for StorageFileQueryResult {}
            impl ::std::fmt::Debug for StorageFileQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for StorageFileQueryResult {
                const NAME: &'static str = "Windows.Storage.Search.StorageFileQueryResult";
            }
            unsafe impl ::windows::Interface for StorageFileQueryResult {
                type Vtable = IStorageFileQueryResult_abi;
                const IID: ::windows::Guid = <IStorageFileQueryResult as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for StorageFileQueryResult {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.Search.StorageFileQueryResult;{52fda447-2baa-412c-b29f-d4b1778efa1e})" ) ;
            }
            impl ::std::convert::From<StorageFileQueryResult> for ::windows::Object {
                fn from(value: StorageFileQueryResult) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&StorageFileQueryResult> for ::windows::Object {
                fn from(value: &StorageFileQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for StorageFileQueryResult {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a StorageFileQueryResult
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageFileQueryResult> for IStorageFileQueryResult {
                fn from(value: StorageFileQueryResult) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageFileQueryResult> for IStorageFileQueryResult {
                fn from(value: &StorageFileQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFileQueryResult>>
                for StorageFileQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageFileQueryResult> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageFileQueryResult>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFileQueryResult>>
                for &'a StorageFileQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageFileQueryResult> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageFileQueryResult>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageFileQueryResult> for IStorageFileQueryResult2 {
                fn from(value: StorageFileQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageFileQueryResult> for IStorageFileQueryResult2 {
                fn from(value: &StorageFileQueryResult) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFileQueryResult2>>
                for StorageFileQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageFileQueryResult2> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageFileQueryResult2>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFileQueryResult2>>
                for &'a StorageFileQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageFileQueryResult2> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageFileQueryResult2>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageFileQueryResult> for IStorageQueryResultBase {
                fn from(value: StorageFileQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageFileQueryResult> for IStorageQueryResultBase {
                fn from(value: &StorageFileQueryResult) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for StorageFileQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for &'a StorageFileQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IStorageFolderQueryResult(::windows::Object);
            impl ::std::clone::Clone for IStorageFolderQueryResult {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IStorageFolderQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IStorageFolderQueryResult {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IStorageFolderQueryResult {}
            impl IStorageFolderQueryResult {
                pub fn get_folders_async(
                    &self,
                    start_index: u32,
                    max_number_of_items: u32,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            start_index,
                            max_number_of_items,
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        >>(result__)
                    }
                }
                pub fn get_folders_async_default_start_and_count(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        >>(result__)
                    }
                }
                pub fn get_item_count_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn folder(&self) -> ::windows::Result<super::StorageFolder> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <super::StorageFolder as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::StorageFolder>(result__)
                    }
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            changed_handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn get_current_query_options(&self) -> ::windows::Result<QueryOptions> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <QueryOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<QueryOptions>(result__)
                    }
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            new_query_options.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for IStorageFolderQueryResult {
                type Vtable = IStorageFolderQueryResult_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1716832529,
                    32102,
                    18170,
                    [174, 207, 228, 164, 186, 169, 58, 184],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStorageFolderQueryResult_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    start_index: u32,
                    max_number_of_items: u32,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IStorageFolderQueryResult {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{6654c911-7d66-46fa-aecf-e4a4baa93ab8}")
                };
            }
            impl ::std::convert::From<IStorageFolderQueryResult> for ::windows::Object {
                fn from(value: IStorageFolderQueryResult) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IStorageFolderQueryResult> for ::windows::Object {
                fn from(value: &IStorageFolderQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IStorageFolderQueryResult
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IStorageFolderQueryResult
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IStorageFolderQueryResult> for IStorageQueryResultBase {
                fn from(value: IStorageFolderQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IStorageFolderQueryResult> for IStorageQueryResultBase {
                fn from(value: &IStorageFolderQueryResult) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for IStorageFolderQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for &'a IStorageFolderQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct StorageFolderQueryResult(::windows::Object);
            impl StorageFolderQueryResult {
                pub fn get_folders_async(
                    &self,
                    start_index: u32,
                    max_number_of_items: u32,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            start_index,
                            max_number_of_items,
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        >>(result__)
                    }
                }
                pub fn get_folders_async_default_start_and_count(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        >>(result__)
                    }
                }
                pub fn get_item_count_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn folder(&self) -> ::windows::Result<super::StorageFolder> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <super::StorageFolder as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::StorageFolder>(result__)
                    }
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            changed_handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn get_current_query_options(&self) -> ::windows::Result<QueryOptions> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <QueryOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<QueryOptions>(result__)
                    }
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            new_query_options.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            impl ::std::clone::Clone for StorageFolderQueryResult {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for StorageFolderQueryResult {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for StorageFolderQueryResult {}
            impl ::std::fmt::Debug for StorageFolderQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for StorageFolderQueryResult {
                const NAME: &'static str = "Windows.Storage.Search.StorageFolderQueryResult";
            }
            unsafe impl ::windows::Interface for StorageFolderQueryResult {
                type Vtable = IStorageFolderQueryResult_abi;
                const IID: ::windows::Guid =
                    <IStorageFolderQueryResult as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for StorageFolderQueryResult {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.Search.StorageFolderQueryResult;{6654c911-7d66-46fa-aecf-e4a4baa93ab8})" ) ;
            }
            impl ::std::convert::From<StorageFolderQueryResult> for ::windows::Object {
                fn from(value: StorageFolderQueryResult) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&StorageFolderQueryResult> for ::windows::Object {
                fn from(value: &StorageFolderQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for StorageFolderQueryResult
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a StorageFolderQueryResult
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageFolderQueryResult> for IStorageFolderQueryResult {
                fn from(value: StorageFolderQueryResult) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageFolderQueryResult> for IStorageFolderQueryResult {
                fn from(value: &StorageFolderQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFolderQueryResult>>
                for StorageFolderQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageFolderQueryResult> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageFolderQueryResult>::into(self),
                    )
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageFolderQueryResult>>
                for &'a StorageFolderQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageFolderQueryResult> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStorageFolderQueryResult>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<StorageFolderQueryResult> for IStorageQueryResultBase {
                fn from(value: StorageFolderQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageFolderQueryResult> for IStorageQueryResultBase {
                fn from(value: &StorageFolderQueryResult) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for StorageFolderQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for &'a StorageFolderQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IStorageItemQueryResult(::windows::Object);
            impl ::std::clone::Clone for IStorageItemQueryResult {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IStorageItemQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IStorageItemQueryResult {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IStorageItemQueryResult {}
            impl IStorageItemQueryResult {
                pub fn get_items_async(
                    &self,
                    start_index: u32,
                    max_number_of_items: u32,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::IStorageItem>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            start_index,
                            max_number_of_items,
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        >>(result__)
                    }
                }
                pub fn get_items_async_default_start_and_count(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::IStorageItem>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        >>(result__)
                    }
                }
                pub fn get_item_count_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn folder(&self) -> ::windows::Result<super::StorageFolder> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <super::StorageFolder as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::StorageFolder>(result__)
                    }
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            changed_handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn get_current_query_options(&self) -> ::windows::Result<QueryOptions> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <QueryOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<QueryOptions>(result__)
                    }
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            new_query_options.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for IStorageItemQueryResult {
                type Vtable = IStorageItemQueryResult_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3902046329,
                    40280,
                    18360,
                    [178, 178, 65, 176, 127, 71, 149, 249],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStorageItemQueryResult_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    start_index: u32,
                    max_number_of_items: u32,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IStorageItemQueryResult {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{e8948079-9d58-47b8-b2b2-41b07f4795f9}")
                };
            }
            impl ::std::convert::From<IStorageItemQueryResult> for ::windows::Object {
                fn from(value: IStorageItemQueryResult) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IStorageItemQueryResult> for ::windows::Object {
                fn from(value: &IStorageItemQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IStorageItemQueryResult {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IStorageItemQueryResult
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IStorageItemQueryResult> for IStorageQueryResultBase {
                fn from(value: IStorageItemQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IStorageItemQueryResult> for IStorageQueryResultBase {
                fn from(value: &IStorageItemQueryResult) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for IStorageItemQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for &'a IStorageItemQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct StorageItemQueryResult(::windows::Object);
            impl StorageItemQueryResult {
                pub fn get_items_async(
                    &self,
                    start_index: u32,
                    max_number_of_items: u32,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::IStorageItem>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            start_index,
                            max_number_of_items,
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        >>(result__)
                    }
                }
                pub fn get_items_async_default_start_and_count(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::IStorageItem>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        >>(result__)
                    }
                }
                pub fn get_item_count_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn folder(&self) -> ::windows::Result<super::StorageFolder> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <super::StorageFolder as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::StorageFolder>(result__)
                    }
                }
                pub fn contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_contents_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<
                            'a,
                            super::super::foundation::TypedEventHandler<
                                IStorageQueryResultBase,
                                ::windows::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    changed_handler: T0__,
                ) -> ::windows::Result<super::super::foundation::EventRegistrationToken>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            changed_handler.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn remove_options_changed<
                    'a,
                    T0__: ::std::convert::Into<
                        ::windows::Param<'a, super::super::foundation::EventRegistrationToken>,
                    >,
                >(
                    &self,
                    event_cookie: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            event_cookie.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn find_start_index_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, ::windows::Object>>,
                >(
                    &self,
                    value: T0__,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<u32>>
                {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < u32 > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
                    }
                }
                pub fn get_current_query_options(&self) -> ::windows::Result<QueryOptions> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        let mut result__: <QueryOptions as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<QueryOptions>(result__)
                    }
                }
                pub fn apply_new_query_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, QueryOptions>>,
                >(
                    &self,
                    new_query_options: T0__,
                ) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            new_query_options.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            impl ::std::clone::Clone for StorageItemQueryResult {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::cmp::PartialEq for StorageItemQueryResult {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for StorageItemQueryResult {}
            impl ::std::fmt::Debug for StorageItemQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::windows::RuntimeName for StorageItemQueryResult {
                const NAME: &'static str = "Windows.Storage.Search.StorageItemQueryResult";
            }
            unsafe impl ::windows::Interface for StorageItemQueryResult {
                type Vtable = IStorageItemQueryResult_abi;
                const IID: ::windows::Guid = <IStorageItemQueryResult as ::windows::Interface>::IID;
            }
            unsafe impl ::windows::RuntimeType for StorageItemQueryResult {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.Storage.Search.StorageItemQueryResult;{e8948079-9d58-47b8-b2b2-41b07f4795f9})" ) ;
            }
            impl ::std::convert::From<StorageItemQueryResult> for ::windows::Object {
                fn from(value: StorageItemQueryResult) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&StorageItemQueryResult> for ::windows::Object {
                fn from(value: &StorageItemQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for StorageItemQueryResult {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a StorageItemQueryResult
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageItemQueryResult> for IStorageItemQueryResult {
                fn from(value: StorageItemQueryResult) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StorageItemQueryResult> for IStorageItemQueryResult {
                fn from(value: &StorageItemQueryResult) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemQueryResult>>
                for StorageItemQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemQueryResult> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageItemQueryResult>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageItemQueryResult>>
                for &'a StorageItemQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageItemQueryResult> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageItemQueryResult>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StorageItemQueryResult> for IStorageQueryResultBase {
                fn from(value: StorageItemQueryResult) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StorageItemQueryResult> for IStorageQueryResultBase {
                fn from(value: &StorageItemQueryResult) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for StorageItemQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IStorageQueryResultBase>>
                for &'a StorageItemQueryResult
            {
                fn into(self) -> ::windows::Param<'a, IStorageQueryResultBase> {
                    ::windows::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IStorageFolderQueryOperations(::windows::Object);
            impl ::std::clone::Clone for IStorageFolderQueryOperations {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IStorageFolderQueryOperations {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IStorageFolderQueryOperations {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IStorageFolderQueryOperations {}
            impl IStorageFolderQueryOperations {
                pub fn get_indexed_state_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<IndexedState>>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < IndexedState > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<IndexedState>>(
                            result__,
                        )
                    }
                }
                pub fn create_file_query_overload_default(
                    &self,
                ) -> ::windows::Result<StorageFileQueryResult> {
                    let this = self;
                    unsafe {
                        let mut result__: <StorageFileQueryResult as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<StorageFileQueryResult>(result__)
                    }
                }
                pub fn create_file_query(
                    &self,
                    query: CommonFileQuery,
                ) -> ::windows::Result<StorageFileQueryResult> {
                    let this = self;
                    unsafe {
                        let mut result__: <StorageFileQueryResult as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            query,
                            &mut result__,
                        )
                        .from_abi::<StorageFileQueryResult>(result__)
                    }
                }
                pub fn create_file_query_with_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, QueryOptions>>,
                >(
                    &self,
                    query_options: T0__,
                ) -> ::windows::Result<StorageFileQueryResult> {
                    let this = self;
                    unsafe {
                        let mut result__: <StorageFileQueryResult as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            query_options.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<StorageFileQueryResult>(result__)
                    }
                }
                pub fn create_folder_query_overload_default(
                    &self,
                ) -> ::windows::Result<StorageFolderQueryResult> {
                    let this = self;
                    unsafe {
                        let mut result__: <StorageFolderQueryResult as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<StorageFolderQueryResult>(result__)
                    }
                }
                pub fn create_folder_query(
                    &self,
                    query: CommonFolderQuery,
                ) -> ::windows::Result<StorageFolderQueryResult> {
                    let this = self;
                    unsafe {
                        let mut result__: <StorageFolderQueryResult as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            query,
                            &mut result__,
                        )
                        .from_abi::<StorageFolderQueryResult>(result__)
                    }
                }
                pub fn create_folder_query_with_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, QueryOptions>>,
                >(
                    &self,
                    query_options: T0__,
                ) -> ::windows::Result<StorageFolderQueryResult> {
                    let this = self;
                    unsafe {
                        let mut result__: <StorageFolderQueryResult as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            query_options.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<StorageFolderQueryResult>(result__)
                    }
                }
                pub fn create_item_query(&self) -> ::windows::Result<StorageItemQueryResult> {
                    let this = self;
                    unsafe {
                        let mut result__: <StorageItemQueryResult as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<StorageItemQueryResult>(result__)
                    }
                }
                pub fn create_item_query_with_options<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, QueryOptions>>,
                >(
                    &self,
                    query_options: T0__,
                ) -> ::windows::Result<StorageItemQueryResult> {
                    let this = self;
                    unsafe {
                        let mut result__: <StorageItemQueryResult as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            query_options.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<StorageItemQueryResult>(result__)
                    }
                }
                pub fn get_files_async(
                    &self,
                    query: CommonFileQuery,
                    start_index: u32,
                    max_items_to_retrieve: u32,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            query,
                            start_index,
                            max_items_to_retrieve,
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        >>(result__)
                    }
                }
                pub fn get_files_async_overload_default_start_and_count(
                    &self,
                    query: CommonFileQuery,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFile>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            query,
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::StorageFile>,
                        >>(result__)
                    }
                }
                pub fn get_folders_async(
                    &self,
                    query: CommonFolderQuery,
                    start_index: u32,
                    max_items_to_retrieve: u32,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            query,
                            start_index,
                            max_items_to_retrieve,
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        >>(result__)
                    }
                }
                pub fn get_folders_async_overload_default_start_and_count(
                    &self,
                    query: CommonFolderQuery,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::StorageFolder>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            query,
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<
                                super::StorageFolder,
                            >,
                        >>(result__)
                    }
                }
                pub fn get_items_async(
                    &self,
                    start_index: u32,
                    max_items_to_retrieve: u32,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<
                        super::super::foundation::collections::IVectorView<super::IStorageItem>,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            start_index,
                            max_items_to_retrieve,
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            super::super::foundation::collections::IVectorView<super::IStorageItem>,
                        >>(result__)
                    }
                }
                pub fn are_query_options_supported<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, QueryOptions>>,
                >(
                    &self,
                    query_options: T0__,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            query_options.into().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn is_common_folder_query_supported(
                    &self,
                    query: CommonFolderQuery,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            query,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn is_common_file_query_supported(
                    &self,
                    query: CommonFileQuery,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).22)(
                            ::windows::Abi::abi(this),
                            query,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IStorageFolderQueryOperations {
                type Vtable = IStorageFolderQueryOperations_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3410218185,
                    17515,
                    19023,
                    [190, 151, 117, 119, 113, 190, 82, 3],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStorageFolderQueryOperations_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query: CommonFileQuery,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query_options: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query: CommonFolderQuery,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query_options: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query_options: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query: CommonFileQuery,
                    start_index: u32,
                    max_items_to_retrieve: u32,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query: CommonFileQuery,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query: CommonFolderQuery,
                    start_index: u32,
                    max_items_to_retrieve: u32,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query: CommonFolderQuery,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    start_index: u32,
                    max_items_to_retrieve: u32,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query_options: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query: CommonFolderQuery,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    query: CommonFileQuery,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IStorageFolderQueryOperations {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{cb43ccc9-446b-4a4f-be97-757771be5203}")
                };
            }
            impl ::std::convert::From<IStorageFolderQueryOperations> for ::windows::Object {
                fn from(value: IStorageFolderQueryOperations) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IStorageFolderQueryOperations> for ::windows::Object {
                fn from(value: &IStorageFolderQueryOperations) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IStorageFolderQueryOperations
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IStorageFolderQueryOperations
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
        }
        #[allow(unused_variables)]
        #[allow(non_upper_case_globals)]
        pub mod streams {
            #[repr(transparent)]
            pub struct IBuffer(::windows::Object);
            impl ::std::clone::Clone for IBuffer {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IBuffer {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IBuffer {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IBuffer {}
            impl IBuffer {
                pub fn capacity(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn length(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn set_length(&self, value: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
            }
            unsafe impl ::windows::Interface for IBuffer {
                type Vtable = IBuffer_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2421821408,
                    48211,
                    4575,
                    [140, 73, 0, 30, 79, 198, 134, 218],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IBuffer_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: u32,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IBuffer {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{905a0fe0-bc53-11df-8c49-001e4fc686da}")
                };
            }
            impl ::std::convert::From<IBuffer> for ::windows::Object {
                fn from(value: IBuffer) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IBuffer> for ::windows::Object {
                fn from(value: &IBuffer) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IBuffer {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IBuffer {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[allow(non_camel_case_types)]
            #[derive(PartialEq, Eq)]
            #[repr(transparent)]
            pub struct InputStreamOptions(pub u32);
            impl ::std::convert::From<u32> for InputStreamOptions {
                fn from(value: u32) -> Self {
                    Self(value)
                }
            }
            impl ::std::clone::Clone for InputStreamOptions {
                fn clone(&self) -> Self {
                    Self(self.0)
                }
            }
            impl ::std::default::Default for InputStreamOptions {
                fn default() -> Self {
                    Self(0)
                }
            }
            impl ::std::fmt::Debug for InputStreamOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::marker::Copy for InputStreamOptions {}
            impl InputStreamOptions {
                #![allow(non_upper_case_globals)]
                pub const None: Self = Self(0u32);
                pub const Partial: Self = Self(1u32);
                pub const ReadAhead: Self = Self(2u32);
            }
            unsafe impl ::windows::Abi for InputStreamOptions {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for InputStreamOptions {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.Storage.Streams.InputStreamOptions;u4)",
                );
            }
            impl ::std::ops::BitOr for InputStreamOptions {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self(self.0 | rhs.0)
                }
            }
            impl ::std::ops::BitAnd for InputStreamOptions {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self(self.0 & rhs.0)
                }
            }
            #[repr(transparent)]
            pub struct IInputStream(::windows::Object);
            impl ::std::clone::Clone for IInputStream {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IInputStream {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IInputStream {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IInputStream {}
            impl IInputStream {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<super::super::foundation::IClosable>(self)
                            .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn read_async<'a, T0__: ::std::convert::Into<::windows::Param<'a, IBuffer>>>(
                    &self,
                    buffer: T0__,
                    count: u32,
                    options: InputStreamOptions,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperationWithProgress<IBuffer, u32>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperationWithProgress<
                            IBuffer,
                            u32,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , buffer . into ( ) . abi ( ) , count , options , & mut result__ ) . from_abi :: < super :: super :: foundation :: IAsyncOperationWithProgress :: < IBuffer , u32 > > ( result__ )
                    }
                }
            }
            unsafe impl ::windows::Interface for IInputStream {
                type Vtable = IInputStream_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2421821410,
                    48211,
                    4575,
                    [140, 73, 0, 30, 79, 198, 134, 218],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IInputStream_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    buffer: ::windows::RawPtr,
                    count: u32,
                    options: InputStreamOptions,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IInputStream {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{905a0fe2-bc53-11df-8c49-001e4fc686da}")
                };
            }
            impl ::std::convert::From<IInputStream> for ::windows::Object {
                fn from(value: IInputStream) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IInputStream> for ::windows::Object {
                fn from(value: &IInputStream) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IInputStream {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IInputStream {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IInputStream> for super::super::foundation::IClosable {
                fn from(value: IInputStream) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IInputStream> for super::super::foundation::IClosable {
                fn from(value: &IInputStream) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::super::foundation::IClosable>>
                for IInputStream
            {
                fn into(self) -> ::windows::Param<'a, super::super::foundation::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::foundation::IClosable,
                    >::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::super::foundation::IClosable>>
                for &'a IInputStream
            {
                fn into(self) -> ::windows::Param<'a, super::super::foundation::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::foundation::IClosable,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            #[repr(transparent)]
            pub struct IOutputStream(::windows::Object);
            impl ::std::clone::Clone for IOutputStream {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IOutputStream {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IOutputStream {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IOutputStream {}
            impl IOutputStream {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<super::super::foundation::IClosable>(self)
                            .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn write_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, IBuffer>>,
                >(
                    &self,
                    buffer: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperationWithProgress<u32, u32>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperationWithProgress<
                            u32,
                            u32,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , buffer . into ( ) . abi ( ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: IAsyncOperationWithProgress :: < u32 , u32 > > ( result__ )
                    }
                }
                pub fn flush_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<bool>>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < bool > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<bool>>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IOutputStream {
                type Vtable = IOutputStream_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2421821414,
                    48211,
                    4575,
                    [140, 73, 0, 30, 79, 198, 134, 218],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IOutputStream_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    buffer: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IOutputStream {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{905a0fe6-bc53-11df-8c49-001e4fc686da}")
                };
            }
            impl ::std::convert::From<IOutputStream> for ::windows::Object {
                fn from(value: IOutputStream) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IOutputStream> for ::windows::Object {
                fn from(value: &IOutputStream) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IOutputStream {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IOutputStream {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IOutputStream> for super::super::foundation::IClosable {
                fn from(value: IOutputStream) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IOutputStream> for super::super::foundation::IClosable {
                fn from(value: &IOutputStream) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::super::foundation::IClosable>>
                for IOutputStream
            {
                fn into(self) -> ::windows::Param<'a, super::super::foundation::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::foundation::IClosable,
                    >::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::super::foundation::IClosable>>
                for &'a IOutputStream
            {
                fn into(self) -> ::windows::Param<'a, super::super::foundation::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::foundation::IClosable,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            #[repr(transparent)]
            pub struct IRandomAccessStream(::windows::Object);
            impl ::std::clone::Clone for IRandomAccessStream {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IRandomAccessStream {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IRandomAccessStream {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IRandomAccessStream {}
            impl IRandomAccessStream {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<super::super::foundation::IClosable>(self)
                            .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn read_async<'a, T0__: ::std::convert::Into<::windows::Param<'a, IBuffer>>>(
                    &self,
                    buffer: T0__,
                    count: u32,
                    options: InputStreamOptions,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperationWithProgress<IBuffer, u32>,
                > {
                    let this = &::windows::Interface::cast::<IInputStream>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperationWithProgress<
                            IBuffer,
                            u32,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , buffer . into ( ) . abi ( ) , count , options , & mut result__ ) . from_abi :: < super :: super :: foundation :: IAsyncOperationWithProgress :: < IBuffer , u32 > > ( result__ )
                    }
                }
                pub fn write_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, IBuffer>>,
                >(
                    &self,
                    buffer: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperationWithProgress<u32, u32>,
                > {
                    let this = &::windows::Interface::cast::<IOutputStream>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperationWithProgress<
                            u32,
                            u32,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , buffer . into ( ) . abi ( ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: IAsyncOperationWithProgress :: < u32 , u32 > > ( result__ )
                    }
                }
                pub fn flush_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<bool>>
                {
                    let this = &::windows::Interface::cast::<IOutputStream>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < bool > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<bool>>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u64> {
                    let this = self;
                    unsafe {
                        let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u64>(result__)
                    }
                }
                pub fn set_size(&self, value: u64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn get_input_stream_at(
                    &self,
                    position: u64,
                ) -> ::windows::Result<IInputStream> {
                    let this = self;
                    unsafe {
                        let mut result__: <IInputStream as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            position,
                            &mut result__,
                        )
                        .from_abi::<IInputStream>(result__)
                    }
                }
                pub fn get_output_stream_at(
                    &self,
                    position: u64,
                ) -> ::windows::Result<IOutputStream> {
                    let this = self;
                    unsafe {
                        let mut result__: <IOutputStream as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            position,
                            &mut result__,
                        )
                        .from_abi::<IOutputStream>(result__)
                    }
                }
                pub fn position(&self) -> ::windows::Result<u64> {
                    let this = self;
                    unsafe {
                        let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u64>(result__)
                    }
                }
                pub fn seek(&self, position: u64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(::windows::Abi::abi(this), position)
                            .ok()
                    }
                }
                pub fn clone_stream(&self) -> ::windows::Result<IRandomAccessStream> {
                    let this = self;
                    unsafe {
                        let mut result__: <IRandomAccessStream as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IRandomAccessStream>(result__)
                    }
                }
                pub fn can_read(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn can_write(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IRandomAccessStream {
                type Vtable = IRandomAccessStream_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2421821409,
                    48211,
                    4575,
                    [140, 73, 0, 30, 79, 198, 134, 218],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IRandomAccessStream_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: u64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    position: u64,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    position: u64,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    position: u64,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IRandomAccessStream {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{905a0fe1-bc53-11df-8c49-001e4fc686da}")
                };
            }
            impl ::std::convert::From<IRandomAccessStream> for ::windows::Object {
                fn from(value: IRandomAccessStream) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IRandomAccessStream> for ::windows::Object {
                fn from(value: &IRandomAccessStream) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IRandomAccessStream {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IRandomAccessStream {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IRandomAccessStream> for super::super::foundation::IClosable {
                fn from(value: IRandomAccessStream) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStream> for super::super::foundation::IClosable {
                fn from(value: &IRandomAccessStream) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::super::foundation::IClosable>>
                for IRandomAccessStream
            {
                fn into(self) -> ::windows::Param<'a, super::super::foundation::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::foundation::IClosable,
                    >::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::super::foundation::IClosable>>
                for &'a IRandomAccessStream
            {
                fn into(self) -> ::windows::Param<'a, super::super::foundation::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::foundation::IClosable,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<IRandomAccessStream> for IInputStream {
                fn from(value: IRandomAccessStream) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStream> for IInputStream {
                fn from(value: &IRandomAccessStream) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IInputStream>> for IRandomAccessStream {
                fn into(self) -> ::windows::Param<'a, IInputStream> {
                    ::windows::Param::Owned(::std::convert::Into::<IInputStream>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IInputStream>> for &'a IRandomAccessStream {
                fn into(self) -> ::windows::Param<'a, IInputStream> {
                    ::windows::Param::Owned(::std::convert::Into::<IInputStream>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IRandomAccessStream> for IOutputStream {
                fn from(value: IRandomAccessStream) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStream> for IOutputStream {
                fn from(value: &IRandomAccessStream) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IOutputStream>> for IRandomAccessStream {
                fn into(self) -> ::windows::Param<'a, IOutputStream> {
                    ::windows::Param::Owned(::std::convert::Into::<IOutputStream>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IOutputStream>> for &'a IRandomAccessStream {
                fn into(self) -> ::windows::Param<'a, IOutputStream> {
                    ::windows::Param::Owned(::std::convert::Into::<IOutputStream>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IContentTypeProvider(::windows::Object);
            impl ::std::clone::Clone for IContentTypeProvider {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IContentTypeProvider {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IContentTypeProvider {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IContentTypeProvider {}
            impl IContentTypeProvider {
                pub fn content_type(&self) -> ::windows::Result<::windows::HString> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IContentTypeProvider {
                type Vtable = IContentTypeProvider_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2547030181,
                    15257,
                    19945,
                    [136, 165, 225, 29, 47, 80, 199, 149],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IContentTypeProvider_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IContentTypeProvider {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{97d098a5-3b99-4de9-88a5-e11d2f50c795}")
                };
            }
            impl ::std::convert::From<IContentTypeProvider> for ::windows::Object {
                fn from(value: IContentTypeProvider) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IContentTypeProvider> for ::windows::Object {
                fn from(value: &IContentTypeProvider) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IContentTypeProvider {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IContentTypeProvider
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IRandomAccessStreamWithContentType(::windows::Object);
            impl ::std::clone::Clone for IRandomAccessStreamWithContentType {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IRandomAccessStreamWithContentType {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IRandomAccessStreamWithContentType {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IRandomAccessStreamWithContentType {}
            impl IRandomAccessStreamWithContentType {
                pub fn close(&self) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<super::super::foundation::IClosable>(self)
                            .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn content_type(&self) -> ::windows::Result<::windows::HString> {
                    let this = &::windows::Interface::cast::<IContentTypeProvider>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HString>(result__)
                    }
                }
                pub fn read_async<'a, T0__: ::std::convert::Into<::windows::Param<'a, IBuffer>>>(
                    &self,
                    buffer: T0__,
                    count: u32,
                    options: InputStreamOptions,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperationWithProgress<IBuffer, u32>,
                > {
                    let this = &::windows::Interface::cast::<IInputStream>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperationWithProgress<
                            IBuffer,
                            u32,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , buffer . into ( ) . abi ( ) , count , options , & mut result__ ) . from_abi :: < super :: super :: foundation :: IAsyncOperationWithProgress :: < IBuffer , u32 > > ( result__ )
                    }
                }
                pub fn write_async<
                    'a,
                    T0__: ::std::convert::Into<::windows::Param<'a, IBuffer>>,
                >(
                    &self,
                    buffer: T0__,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperationWithProgress<u32, u32>,
                > {
                    let this = &::windows::Interface::cast::<IOutputStream>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperationWithProgress<
                            u32,
                            u32,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , buffer . into ( ) . abi ( ) , & mut result__ ) . from_abi :: < super :: super :: foundation :: IAsyncOperationWithProgress :: < u32 , u32 > > ( result__ )
                    }
                }
                pub fn flush_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<bool>>
                {
                    let this = &::windows::Interface::cast::<IOutputStream>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < bool > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<bool>>(result__)
                    }
                }
                pub fn size(&self) -> ::windows::Result<u64> {
                    let this = &::windows::Interface::cast::<IRandomAccessStream>(self).unwrap();
                    unsafe {
                        let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u64>(result__)
                    }
                }
                pub fn set_size(&self, value: u64) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IRandomAccessStream>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn get_input_stream_at(
                    &self,
                    position: u64,
                ) -> ::windows::Result<IInputStream> {
                    let this = &::windows::Interface::cast::<IRandomAccessStream>(self).unwrap();
                    unsafe {
                        let mut result__: <IInputStream as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            position,
                            &mut result__,
                        )
                        .from_abi::<IInputStream>(result__)
                    }
                }
                pub fn get_output_stream_at(
                    &self,
                    position: u64,
                ) -> ::windows::Result<IOutputStream> {
                    let this = &::windows::Interface::cast::<IRandomAccessStream>(self).unwrap();
                    unsafe {
                        let mut result__: <IOutputStream as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            position,
                            &mut result__,
                        )
                        .from_abi::<IOutputStream>(result__)
                    }
                }
                pub fn position(&self) -> ::windows::Result<u64> {
                    let this = &::windows::Interface::cast::<IRandomAccessStream>(self).unwrap();
                    unsafe {
                        let mut result__: <u64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u64>(result__)
                    }
                }
                pub fn seek(&self, position: u64) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IRandomAccessStream>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(::windows::Abi::abi(this), position)
                            .ok()
                    }
                }
                pub fn clone_stream(&self) -> ::windows::Result<IRandomAccessStream> {
                    let this = &::windows::Interface::cast::<IRandomAccessStream>(self).unwrap();
                    unsafe {
                        let mut result__: <IRandomAccessStream as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IRandomAccessStream>(result__)
                    }
                }
                pub fn can_read(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IRandomAccessStream>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn can_write(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IRandomAccessStream>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IRandomAccessStreamWithContentType {
                type Vtable = IRandomAccessStreamWithContentType_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3424995367,
                    19261,
                    17295,
                    [146, 50, 16, 199, 107, 199, 224, 56],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IRandomAccessStreamWithContentType_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IRandomAccessStreamWithContentType {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{cc254827-4b3d-438f-9232-10c76bc7e038}")
                };
            }
            impl ::std::convert::From<IRandomAccessStreamWithContentType> for ::windows::Object {
                fn from(value: IRandomAccessStreamWithContentType) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamWithContentType> for ::windows::Object {
                fn from(value: &IRandomAccessStreamWithContentType) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IRandomAccessStreamWithContentType>
                for super::super::foundation::IClosable
            {
                fn from(value: IRandomAccessStreamWithContentType) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamWithContentType>
                for super::super::foundation::IClosable
            {
                fn from(value: &IRandomAccessStreamWithContentType) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::super::foundation::IClosable>>
                for IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::windows::Param<'a, super::super::foundation::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::foundation::IClosable,
                    >::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, super::super::foundation::IClosable>>
                for &'a IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::windows::Param<'a, super::super::foundation::IClosable> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::foundation::IClosable,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<IRandomAccessStreamWithContentType> for IContentTypeProvider {
                fn from(value: IRandomAccessStreamWithContentType) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamWithContentType> for IContentTypeProvider {
                fn from(value: &IRandomAccessStreamWithContentType) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IContentTypeProvider>>
                for IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::windows::Param<'a, IContentTypeProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IContentTypeProvider>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IContentTypeProvider>>
                for &'a IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::windows::Param<'a, IContentTypeProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IContentTypeProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IRandomAccessStreamWithContentType> for IInputStream {
                fn from(value: IRandomAccessStreamWithContentType) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamWithContentType> for IInputStream {
                fn from(value: &IRandomAccessStreamWithContentType) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IInputStream>>
                for IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::windows::Param<'a, IInputStream> {
                    ::windows::Param::Owned(::std::convert::Into::<IInputStream>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IInputStream>>
                for &'a IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::windows::Param<'a, IInputStream> {
                    ::windows::Param::Owned(::std::convert::Into::<IInputStream>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IRandomAccessStreamWithContentType> for IOutputStream {
                fn from(value: IRandomAccessStreamWithContentType) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamWithContentType> for IOutputStream {
                fn from(value: &IRandomAccessStreamWithContentType) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IOutputStream>>
                for IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::windows::Param<'a, IOutputStream> {
                    ::windows::Param::Owned(::std::convert::Into::<IOutputStream>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IOutputStream>>
                for &'a IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::windows::Param<'a, IOutputStream> {
                    ::windows::Param::Owned(::std::convert::Into::<IOutputStream>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IRandomAccessStreamWithContentType> for IRandomAccessStream {
                fn from(value: IRandomAccessStreamWithContentType) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamWithContentType> for IRandomAccessStream {
                fn from(value: &IRandomAccessStreamWithContentType) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IRandomAccessStream>>
                for IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::windows::Param<'a, IRandomAccessStream> {
                    ::windows::Param::Owned(::std::convert::Into::<IRandomAccessStream>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, IRandomAccessStream>>
                for &'a IRandomAccessStreamWithContentType
            {
                fn into(self) -> ::windows::Param<'a, IRandomAccessStream> {
                    ::windows::Param::Owned(::std::convert::Into::<IRandomAccessStream>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IRandomAccessStreamReference(::windows::Object);
            impl ::std::clone::Clone for IRandomAccessStreamReference {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IRandomAccessStreamReference {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IRandomAccessStreamReference {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IRandomAccessStreamReference {}
            impl IRandomAccessStreamReference {
                pub fn open_read_async(
                    &self,
                ) -> ::windows::Result<
                    super::super::foundation::IAsyncOperation<IRandomAccessStreamWithContentType>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::foundation::IAsyncOperation<
                            IRandomAccessStreamWithContentType,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<
                            IRandomAccessStreamWithContentType,
                        >>(result__)
                    }
                }
            }
            unsafe impl ::windows::Interface for IRandomAccessStreamReference {
                type Vtable = IRandomAccessStreamReference_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    871248180,
                    7638,
                    20026,
                    [128, 103, 209, 193, 98, 232, 100, 43],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IRandomAccessStreamReference_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IRandomAccessStreamReference {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{33ee3134-1dd6-4e3a-8067-d1c162e8642b}")
                };
            }
            impl ::std::convert::From<IRandomAccessStreamReference> for ::windows::Object {
                fn from(value: IRandomAccessStreamReference) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IRandomAccessStreamReference> for ::windows::Object {
                fn from(value: &IRandomAccessStreamReference) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for IRandomAccessStreamReference
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IRandomAccessStreamReference
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            pub struct IInputStreamReference(::windows::Object);
            impl ::std::clone::Clone for IInputStreamReference {
                fn clone(&self) -> Self {
                    Self(self.0.clone())
                }
            }
            impl ::std::fmt::Debug for IInputStreamReference {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", self.0)
                }
            }
            impl ::std::cmp::PartialEq for IInputStreamReference {
                fn eq(&self, other: &Self) -> bool {
                    self.0 == other.0
                }
            }
            impl ::std::cmp::Eq for IInputStreamReference {}
            impl IInputStreamReference {
                pub fn open_sequential_read_async(
                    &self,
                ) -> ::windows::Result<super::super::foundation::IAsyncOperation<IInputStream>>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: foundation :: IAsyncOperation :: < IInputStream > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::foundation::IAsyncOperation<IInputStream>>(
                            result__,
                        )
                    }
                }
            }
            unsafe impl ::windows::Interface for IInputStreamReference {
                type Vtable = IInputStreamReference_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1133681944,
                    24265,
                    19290,
                    [145, 156, 66, 5, 176, 200, 4, 182],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IInputStreamReference_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::ErrorCode,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::ErrorCode,
            );
            unsafe impl ::windows::RuntimeType for IInputStreamReference {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::from_slice(b"{43929d18-5ec9-4b5a-919c-4205b0c804b6}")
                };
            }
            impl ::std::convert::From<IInputStreamReference> for ::windows::Object {
                fn from(value: IInputStreamReference) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IInputStreamReference> for ::windows::Object {
                fn from(value: &IInputStreamReference) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IInputStreamReference {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
                }
            }
            impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
                for &'a IInputStreamReference
            {
                fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                    ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
        }
    }
    #[allow(unused_variables)]
    #[allow(non_upper_case_globals)]
    pub mod system {
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct UserAuthenticationStatus(pub i32);
        impl ::std::convert::From<i32> for UserAuthenticationStatus {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for UserAuthenticationStatus {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for UserAuthenticationStatus {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for UserAuthenticationStatus {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for UserAuthenticationStatus {}
        impl UserAuthenticationStatus {
            #![allow(non_upper_case_globals)]
            pub const Unauthenticated: Self = Self(0i32);
            pub const LocallyAuthenticated: Self = Self(1i32);
            pub const RemotelyAuthenticated: Self = Self(2i32);
        }
        unsafe impl ::windows::Abi for UserAuthenticationStatus {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for UserAuthenticationStatus {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"enum(Windows.System.UserAuthenticationStatus;i4)",
            );
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct UserType(pub i32);
        impl ::std::convert::From<i32> for UserType {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for UserType {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for UserType {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for UserType {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for UserType {}
        impl UserType {
            #![allow(non_upper_case_globals)]
            pub const LocalUser: Self = Self(0i32);
            pub const RemoteUser: Self = Self(1i32);
            pub const LocalGuest: Self = Self(2i32);
            pub const RemoteGuest: Self = Self(3i32);
        }
        unsafe impl ::windows::Abi for UserType {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for UserType {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"enum(Windows.System.UserType;i4)");
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct UserPictureSize(pub i32);
        impl ::std::convert::From<i32> for UserPictureSize {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for UserPictureSize {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for UserPictureSize {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for UserPictureSize {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for UserPictureSize {}
        impl UserPictureSize {
            #![allow(non_upper_case_globals)]
            pub const Size64x64: Self = Self(0i32);
            pub const Size208x208: Self = Self(1i32);
            pub const Size424x424: Self = Self(2i32);
            pub const Size1080x1080: Self = Self(3i32);
        }
        unsafe impl ::windows::Abi for UserPictureSize {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for UserPictureSize {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"enum(Windows.System.UserPictureSize;i4)");
        }
        #[repr(transparent)]
        pub struct IUser(::windows::Object);
        impl ::std::clone::Clone for IUser {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IUser {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IUser {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IUser {}
        impl IUser {
            pub fn non_roamable_id(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn authentication_status(&self) -> ::windows::Result<UserAuthenticationStatus> {
                let this = self;
                unsafe {
                    let mut result__: <UserAuthenticationStatus as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserAuthenticationStatus>(result__)
                }
            }
            pub fn r#type(&self) -> ::windows::Result<UserType> {
                let this = self;
                unsafe {
                    let mut result__: <UserType as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserType>(result__)
                }
            }
            pub fn get_property_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                value: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<::windows::Object>>
            {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < :: windows :: Object > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<::windows::Object>>(result__)
                }
            }
            pub fn get_properties_async<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::collections::IVectorView<::windows::HString>,
                    >,
                >,
            >(
                &self,
                values: T0__,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<super::foundation::collections::IPropertySet>,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IPropertySet,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        values.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IPropertySet,
                    >>(result__)
                }
            }
            pub fn get_picture_async(
                &self,
                desired_size: UserPictureSize,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::storage::streams::IRandomAccessStreamReference,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::storage::streams::IRandomAccessStreamReference,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        desired_size,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::storage::streams::IRandomAccessStreamReference,
                    >>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IUser {
            type Vtable = IUser_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                3751421638,
                59206,
                19405,
                [181, 212, 18, 1, 3, 196, 32, 155],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IUser_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut UserAuthenticationStatus,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut UserType,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                values: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                desired_size: UserPictureSize,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IUser {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{df9a26c6-e746-4bcd-b5d4-120103c4209b}") };
        }
        impl ::std::convert::From<IUser> for ::windows::Object {
            fn from(value: IUser) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IUser> for ::windows::Object {
            fn from(value: &IUser) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IUser {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IUser {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct UserWatcherStatus(pub i32);
        impl ::std::convert::From<i32> for UserWatcherStatus {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for UserWatcherStatus {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for UserWatcherStatus {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for UserWatcherStatus {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for UserWatcherStatus {}
        impl UserWatcherStatus {
            #![allow(non_upper_case_globals)]
            pub const Created: Self = Self(0i32);
            pub const Started: Self = Self(1i32);
            pub const EnumerationCompleted: Self = Self(2i32);
            pub const Stopping: Self = Self(3i32);
            pub const Stopped: Self = Self(4i32);
            pub const Aborted: Self = Self(5i32);
        }
        unsafe impl ::windows::Abi for UserWatcherStatus {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for UserWatcherStatus {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"enum(Windows.System.UserWatcherStatus;i4)");
        }
        #[repr(transparent)]
        pub struct IUserChangedEventArgs(::windows::Object);
        impl ::std::clone::Clone for IUserChangedEventArgs {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IUserChangedEventArgs {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IUserChangedEventArgs {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IUserChangedEventArgs {}
        impl IUserChangedEventArgs {
            pub fn user(&self) -> ::windows::Result<User> {
                let this = self;
                unsafe {
                    let mut result__: <User as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<User>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IUserChangedEventArgs {
            type Vtable = IUserChangedEventArgs_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                140794332,
                6342,
                18651,
                [188, 153, 114, 79, 185, 32, 60, 204],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IUserChangedEventArgs_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IUserChangedEventArgs {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{086459dc-18c6-48db-bc99-724fb9203ccc}") };
        }
        impl ::std::convert::From<IUserChangedEventArgs> for ::windows::Object {
            fn from(value: IUserChangedEventArgs) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IUserChangedEventArgs> for ::windows::Object {
            fn from(value: &IUserChangedEventArgs) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IUserChangedEventArgs {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IUserChangedEventArgs
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[allow(non_camel_case_types)]
        #[derive(PartialEq, Eq)]
        #[repr(transparent)]
        pub struct UserWatcherUpdateKind(pub i32);
        impl ::std::convert::From<i32> for UserWatcherUpdateKind {
            fn from(value: i32) -> Self {
                Self(value)
            }
        }
        impl ::std::clone::Clone for UserWatcherUpdateKind {
            fn clone(&self) -> Self {
                Self(self.0)
            }
        }
        impl ::std::default::Default for UserWatcherUpdateKind {
            fn default() -> Self {
                Self(0)
            }
        }
        impl ::std::fmt::Debug for UserWatcherUpdateKind {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::marker::Copy for UserWatcherUpdateKind {}
        impl UserWatcherUpdateKind {
            #![allow(non_upper_case_globals)]
            pub const Properties: Self = Self(0i32);
            pub const Picture: Self = Self(1i32);
        }
        unsafe impl ::windows::Abi for UserWatcherUpdateKind {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for UserWatcherUpdateKind {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"enum(Windows.System.UserWatcherUpdateKind;i4)",
            );
        }
        #[repr(transparent)]
        pub struct IUserChangedEventArgs2(::windows::Object);
        impl ::std::clone::Clone for IUserChangedEventArgs2 {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IUserChangedEventArgs2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IUserChangedEventArgs2 {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IUserChangedEventArgs2 {}
        impl IUserChangedEventArgs2 {
            pub fn changed_property_kinds(
                &self,
            ) -> ::windows::Result<super::foundation::collections::IVectorView<UserWatcherUpdateKind>>
            {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::collections::IVectorView<
                        UserWatcherUpdateKind,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: foundation :: collections :: IVectorView :: < UserWatcherUpdateKind > > ( result__ )
                }
            }
        }
        unsafe impl ::windows::Interface for IUserChangedEventArgs2 {
            type Vtable = IUserChangedEventArgs2_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                1798097732,
                28417,
                22028,
                [151, 173, 252, 127, 50, 236, 88, 31],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IUserChangedEventArgs2_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IUserChangedEventArgs2 {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{6b2ccb44-6f01-560c-97ad-fc7f32ec581f}") };
        }
        impl ::std::convert::From<IUserChangedEventArgs2> for ::windows::Object {
            fn from(value: IUserChangedEventArgs2) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IUserChangedEventArgs2> for ::windows::Object {
            fn from(value: &IUserChangedEventArgs2) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IUserChangedEventArgs2 {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IUserChangedEventArgs2
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct UserChangedEventArgs(::windows::Object);
        impl UserChangedEventArgs {
            pub fn user(&self) -> ::windows::Result<User> {
                let this = self;
                unsafe {
                    let mut result__: <User as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<User>(result__)
                }
            }
            pub fn changed_property_kinds(
                &self,
            ) -> ::windows::Result<super::foundation::collections::IVectorView<UserWatcherUpdateKind>>
            {
                let this = &::windows::Interface::cast::<IUserChangedEventArgs2>(self).unwrap();
                unsafe {
                    let mut result__: <super::foundation::collections::IVectorView<
                        UserWatcherUpdateKind,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: foundation :: collections :: IVectorView :: < UserWatcherUpdateKind > > ( result__ )
                }
            }
        }
        impl ::std::clone::Clone for UserChangedEventArgs {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for UserChangedEventArgs {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for UserChangedEventArgs {}
        impl ::std::fmt::Debug for UserChangedEventArgs {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for UserChangedEventArgs {
            const NAME: &'static str = "Windows.System.UserChangedEventArgs";
        }
        unsafe impl ::windows::Interface for UserChangedEventArgs {
            type Vtable = IUserChangedEventArgs_abi;
            const IID: ::windows::Guid = <IUserChangedEventArgs as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for UserChangedEventArgs {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"rc(Windows.System.UserChangedEventArgs;{086459dc-18c6-48db-bc99-724fb9203ccc})",
            );
        }
        impl ::std::convert::From<UserChangedEventArgs> for ::windows::Object {
            fn from(value: UserChangedEventArgs) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&UserChangedEventArgs> for ::windows::Object {
            fn from(value: &UserChangedEventArgs) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for UserChangedEventArgs {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a UserChangedEventArgs
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<UserChangedEventArgs> for IUserChangedEventArgs {
            fn from(value: UserChangedEventArgs) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&UserChangedEventArgs> for IUserChangedEventArgs {
            fn from(value: &UserChangedEventArgs) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IUserChangedEventArgs>>
            for UserChangedEventArgs
        {
            fn into(self) -> ::windows::Param<'a, IUserChangedEventArgs> {
                ::windows::Param::Owned(::std::convert::Into::<IUserChangedEventArgs>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IUserChangedEventArgs>>
            for &'a UserChangedEventArgs
        {
            fn into(self) -> ::windows::Param<'a, IUserChangedEventArgs> {
                ::windows::Param::Owned(::std::convert::Into::<IUserChangedEventArgs>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<UserChangedEventArgs> for IUserChangedEventArgs2 {
            fn from(value: UserChangedEventArgs) -> Self {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&UserChangedEventArgs> for IUserChangedEventArgs2 {
            fn from(value: &UserChangedEventArgs) -> Self {
                ::windows::Interface::cast(value).unwrap()
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IUserChangedEventArgs2>>
            for UserChangedEventArgs
        {
            fn into(self) -> ::windows::Param<'a, IUserChangedEventArgs2> {
                ::windows::Param::Owned(::std::convert::Into::<IUserChangedEventArgs2>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IUserChangedEventArgs2>>
            for &'a UserChangedEventArgs
        {
            fn into(self) -> ::windows::Param<'a, IUserChangedEventArgs2> {
                ::windows::Param::Owned(::std::convert::Into::<IUserChangedEventArgs2>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        unsafe impl ::std::marker::Send for UserChangedEventArgs {}
        unsafe impl ::std::marker::Sync for UserChangedEventArgs {}
        #[repr(transparent)]
        pub struct IUserAuthenticationStatusChangeDeferral(::windows::Object);
        impl ::std::clone::Clone for IUserAuthenticationStatusChangeDeferral {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IUserAuthenticationStatusChangeDeferral {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IUserAuthenticationStatusChangeDeferral {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IUserAuthenticationStatusChangeDeferral {}
        impl IUserAuthenticationStatusChangeDeferral {
            pub fn complete(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
        }
        unsafe impl ::windows::Interface for IUserAuthenticationStatusChangeDeferral {
            type Vtable = IUserAuthenticationStatusChangeDeferral_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2293601640,
                47920,
                17147,
                [162, 112, 233, 144, 46, 64, 239, 167],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IUserAuthenticationStatusChangeDeferral_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IUserAuthenticationStatusChangeDeferral {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{88b59568-bb30-42fb-a270-e9902e40efa7}") };
        }
        impl ::std::convert::From<IUserAuthenticationStatusChangeDeferral> for ::windows::Object {
            fn from(value: IUserAuthenticationStatusChangeDeferral) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IUserAuthenticationStatusChangeDeferral> for ::windows::Object {
            fn from(value: &IUserAuthenticationStatusChangeDeferral) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IUserAuthenticationStatusChangeDeferral
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IUserAuthenticationStatusChangeDeferral
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct UserAuthenticationStatusChangeDeferral(::windows::Object);
        impl UserAuthenticationStatusChangeDeferral {
            pub fn complete(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok() }
            }
        }
        impl ::std::clone::Clone for UserAuthenticationStatusChangeDeferral {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for UserAuthenticationStatusChangeDeferral {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for UserAuthenticationStatusChangeDeferral {}
        impl ::std::fmt::Debug for UserAuthenticationStatusChangeDeferral {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for UserAuthenticationStatusChangeDeferral {
            const NAME: &'static str = "Windows.System.UserAuthenticationStatusChangeDeferral";
        }
        unsafe impl ::windows::Interface for UserAuthenticationStatusChangeDeferral {
            type Vtable = IUserAuthenticationStatusChangeDeferral_abi;
            const IID: ::windows::Guid =
                <IUserAuthenticationStatusChangeDeferral as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for UserAuthenticationStatusChangeDeferral {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.System.UserAuthenticationStatusChangeDeferral;{88b59568-bb30-42fb-a270-e9902e40efa7})" ) ;
        }
        impl ::std::convert::From<UserAuthenticationStatusChangeDeferral> for ::windows::Object {
            fn from(value: UserAuthenticationStatusChangeDeferral) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&UserAuthenticationStatusChangeDeferral> for ::windows::Object {
            fn from(value: &UserAuthenticationStatusChangeDeferral) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for UserAuthenticationStatusChangeDeferral
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a UserAuthenticationStatusChangeDeferral
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<UserAuthenticationStatusChangeDeferral>
            for IUserAuthenticationStatusChangeDeferral
        {
            fn from(value: UserAuthenticationStatusChangeDeferral) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&UserAuthenticationStatusChangeDeferral>
            for IUserAuthenticationStatusChangeDeferral
        {
            fn from(value: &UserAuthenticationStatusChangeDeferral) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IUserAuthenticationStatusChangeDeferral>>
            for UserAuthenticationStatusChangeDeferral
        {
            fn into(self) -> ::windows::Param<'a, IUserAuthenticationStatusChangeDeferral> {
                ::windows::Param::Owned(::std::convert::Into::<
                    IUserAuthenticationStatusChangeDeferral,
                >::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IUserAuthenticationStatusChangeDeferral>>
            for &'a UserAuthenticationStatusChangeDeferral
        {
            fn into(self) -> ::windows::Param<'a, IUserAuthenticationStatusChangeDeferral> {
                ::windows::Param::Owned(::std::convert::Into::<
                    IUserAuthenticationStatusChangeDeferral,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        unsafe impl ::std::marker::Send for UserAuthenticationStatusChangeDeferral {}
        unsafe impl ::std::marker::Sync for UserAuthenticationStatusChangeDeferral {}
        #[repr(transparent)]
        pub struct IUserAuthenticationStatusChangingEventArgs(::windows::Object);
        impl ::std::clone::Clone for IUserAuthenticationStatusChangingEventArgs {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IUserAuthenticationStatusChangingEventArgs {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IUserAuthenticationStatusChangingEventArgs {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IUserAuthenticationStatusChangingEventArgs {}
        impl IUserAuthenticationStatusChangingEventArgs {
            pub fn get_deferral(
                &self,
            ) -> ::windows::Result<UserAuthenticationStatusChangeDeferral> {
                let this = self;
                unsafe {
                    let mut result__ : < UserAuthenticationStatusChangeDeferral as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserAuthenticationStatusChangeDeferral>(result__)
                }
            }
            pub fn user(&self) -> ::windows::Result<User> {
                let this = self;
                unsafe {
                    let mut result__: <User as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<User>(result__)
                }
            }
            pub fn new_status(&self) -> ::windows::Result<UserAuthenticationStatus> {
                let this = self;
                unsafe {
                    let mut result__: <UserAuthenticationStatus as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserAuthenticationStatus>(result__)
                }
            }
            pub fn current_status(&self) -> ::windows::Result<UserAuthenticationStatus> {
                let this = self;
                unsafe {
                    let mut result__: <UserAuthenticationStatus as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserAuthenticationStatus>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IUserAuthenticationStatusChangingEventArgs {
            type Vtable = IUserAuthenticationStatusChangingEventArgs_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2349010728,
                42769,
                19486,
                [171, 72, 4, 23, 156, 21, 147, 143],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IUserAuthenticationStatusChangingEventArgs_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut UserAuthenticationStatus,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut UserAuthenticationStatus,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IUserAuthenticationStatusChangingEventArgs {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{8c030f28-a711-4c1e-ab48-04179c15938f}") };
        }
        impl ::std::convert::From<IUserAuthenticationStatusChangingEventArgs> for ::windows::Object {
            fn from(value: IUserAuthenticationStatusChangingEventArgs) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IUserAuthenticationStatusChangingEventArgs> for ::windows::Object {
            fn from(value: &IUserAuthenticationStatusChangingEventArgs) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for IUserAuthenticationStatusChangingEventArgs
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a IUserAuthenticationStatusChangingEventArgs
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct UserAuthenticationStatusChangingEventArgs(::windows::Object);
        impl UserAuthenticationStatusChangingEventArgs {
            pub fn get_deferral(
                &self,
            ) -> ::windows::Result<UserAuthenticationStatusChangeDeferral> {
                let this = self;
                unsafe {
                    let mut result__ : < UserAuthenticationStatusChangeDeferral as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserAuthenticationStatusChangeDeferral>(result__)
                }
            }
            pub fn user(&self) -> ::windows::Result<User> {
                let this = self;
                unsafe {
                    let mut result__: <User as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<User>(result__)
                }
            }
            pub fn new_status(&self) -> ::windows::Result<UserAuthenticationStatus> {
                let this = self;
                unsafe {
                    let mut result__: <UserAuthenticationStatus as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserAuthenticationStatus>(result__)
                }
            }
            pub fn current_status(&self) -> ::windows::Result<UserAuthenticationStatus> {
                let this = self;
                unsafe {
                    let mut result__: <UserAuthenticationStatus as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserAuthenticationStatus>(result__)
                }
            }
        }
        impl ::std::clone::Clone for UserAuthenticationStatusChangingEventArgs {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for UserAuthenticationStatusChangingEventArgs {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for UserAuthenticationStatusChangingEventArgs {}
        impl ::std::fmt::Debug for UserAuthenticationStatusChangingEventArgs {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for UserAuthenticationStatusChangingEventArgs {
            const NAME: &'static str = "Windows.System.UserAuthenticationStatusChangingEventArgs";
        }
        unsafe impl ::windows::Interface for UserAuthenticationStatusChangingEventArgs {
            type Vtable = IUserAuthenticationStatusChangingEventArgs_abi;
            const IID: ::windows::Guid =
                <IUserAuthenticationStatusChangingEventArgs as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for UserAuthenticationStatusChangingEventArgs {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.System.UserAuthenticationStatusChangingEventArgs;{8c030f28-a711-4c1e-ab48-04179c15938f})" ) ;
        }
        impl ::std::convert::From<UserAuthenticationStatusChangingEventArgs> for ::windows::Object {
            fn from(value: UserAuthenticationStatusChangingEventArgs) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&UserAuthenticationStatusChangingEventArgs> for ::windows::Object {
            fn from(value: &UserAuthenticationStatusChangingEventArgs) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for UserAuthenticationStatusChangingEventArgs
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>>
            for &'a UserAuthenticationStatusChangingEventArgs
        {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<UserAuthenticationStatusChangingEventArgs>
            for IUserAuthenticationStatusChangingEventArgs
        {
            fn from(value: UserAuthenticationStatusChangingEventArgs) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&UserAuthenticationStatusChangingEventArgs>
            for IUserAuthenticationStatusChangingEventArgs
        {
            fn from(value: &UserAuthenticationStatusChangingEventArgs) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a>
            ::std::convert::Into<::windows::Param<'a, IUserAuthenticationStatusChangingEventArgs>>
            for UserAuthenticationStatusChangingEventArgs
        {
            fn into(self) -> ::windows::Param<'a, IUserAuthenticationStatusChangingEventArgs> {
                ::windows::Param::Owned(::std::convert::Into::<
                    IUserAuthenticationStatusChangingEventArgs,
                >::into(self))
            }
        }
        impl<'a>
            ::std::convert::Into<::windows::Param<'a, IUserAuthenticationStatusChangingEventArgs>>
            for &'a UserAuthenticationStatusChangingEventArgs
        {
            fn into(self) -> ::windows::Param<'a, IUserAuthenticationStatusChangingEventArgs> {
                ::windows::Param::Owned(::std::convert::Into::<
                    IUserAuthenticationStatusChangingEventArgs,
                >::into(::std::clone::Clone::clone(self)))
            }
        }
        unsafe impl ::std::marker::Send for UserAuthenticationStatusChangingEventArgs {}
        unsafe impl ::std::marker::Sync for UserAuthenticationStatusChangingEventArgs {}
        #[repr(transparent)]
        pub struct IUserWatcher(::windows::Object);
        impl ::std::clone::Clone for IUserWatcher {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IUserWatcher {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IUserWatcher {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IUserWatcher {}
        impl IUserWatcher {
            pub fn status(&self) -> ::windows::Result<UserWatcherStatus> {
                let this = self;
                unsafe {
                    let mut result__: <UserWatcherStatus as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserWatcherStatus>(result__)
                }
            }
            pub fn start(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this)).ok() }
            }
            pub fn stop(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this)).ok() }
            }
            pub fn added<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<UserWatcher, UserChangedEventArgs>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_added<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn removed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<UserWatcher, UserChangedEventArgs>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_removed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn updated<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<UserWatcher, UserChangedEventArgs>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_updated<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn authentication_status_changed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<UserWatcher, UserChangedEventArgs>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_authentication_status_changed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn authentication_status_changing<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<
                            UserWatcher,
                            UserAuthenticationStatusChangingEventArgs,
                        >,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_authentication_status_changing<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn enumeration_completed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<UserWatcher, ::windows::Object>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_enumeration_completed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn stopped<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<UserWatcher, ::windows::Object>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).21)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_stopped<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).22)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
        }
        unsafe impl ::windows::Interface for IUserWatcher {
            type Vtable = IUserWatcher_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                358527547,
                9258,
                17888,
                [162, 233, 49, 113, 252, 106, 127, 187],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IUserWatcher_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut UserWatcherStatus,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
                result__: *mut super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                token: super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
                result__: *mut super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                token: super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
                result__: *mut super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                token: super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
                result__: *mut super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                token: super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
                result__: *mut super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                token: super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
                result__: *mut super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                token: super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                handler: ::windows::RawPtr,
                result__: *mut super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                token: super::foundation::EventRegistrationToken_abi,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IUserWatcher {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{155eb23b-242a-45e0-a2e9-3171fc6a7fbb}") };
        }
        impl ::std::convert::From<IUserWatcher> for ::windows::Object {
            fn from(value: IUserWatcher) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IUserWatcher> for ::windows::Object {
            fn from(value: &IUserWatcher) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IUserWatcher {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IUserWatcher {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct UserWatcher(::windows::Object);
        impl UserWatcher {
            pub fn status(&self) -> ::windows::Result<UserWatcherStatus> {
                let this = self;
                unsafe {
                    let mut result__: <UserWatcherStatus as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserWatcherStatus>(result__)
                }
            }
            pub fn start(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this)).ok() }
            }
            pub fn stop(&self) -> ::windows::Result<()> {
                let this = self;
                unsafe { (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this)).ok() }
            }
            pub fn added<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<UserWatcher, UserChangedEventArgs>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_added<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn removed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<UserWatcher, UserChangedEventArgs>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_removed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).12)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn updated<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<UserWatcher, UserChangedEventArgs>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).13)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_updated<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).14)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn authentication_status_changed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<UserWatcher, UserChangedEventArgs>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).15)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_authentication_status_changed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).16)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn authentication_status_changing<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<
                            UserWatcher,
                            UserAuthenticationStatusChangingEventArgs,
                        >,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).17)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_authentication_status_changing<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).18)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn enumeration_completed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<UserWatcher, ::windows::Object>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).19)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_enumeration_completed<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).20)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn stopped<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::TypedEventHandler<UserWatcher, ::windows::Object>,
                    >,
                >,
            >(
                &self,
                handler: T0__,
            ) -> ::windows::Result<super::foundation::EventRegistrationToken> {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).21)(
                        ::windows::Abi::abi(this),
                        handler.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::EventRegistrationToken>(result__)
                }
            }
            pub fn remove_stopped<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<'a, super::foundation::EventRegistrationToken>,
                >,
            >(
                &self,
                token: T0__,
            ) -> ::windows::Result<()> {
                let this = self;
                unsafe {
                    (::windows::Interface::vtable(this).22)(
                        ::windows::Abi::abi(this),
                        token.into().abi(),
                    )
                    .ok()
                }
            }
        }
        impl ::std::clone::Clone for UserWatcher {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for UserWatcher {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for UserWatcher {}
        impl ::std::fmt::Debug for UserWatcher {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for UserWatcher {
            const NAME: &'static str = "Windows.System.UserWatcher";
        }
        unsafe impl ::windows::Interface for UserWatcher {
            type Vtable = IUserWatcher_abi;
            const IID: ::windows::Guid = <IUserWatcher as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for UserWatcher {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"rc(Windows.System.UserWatcher;{155eb23b-242a-45e0-a2e9-3171fc6a7fbb})",
            );
        }
        impl ::std::convert::From<UserWatcher> for ::windows::Object {
            fn from(value: UserWatcher) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&UserWatcher> for ::windows::Object {
            fn from(value: &UserWatcher) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for UserWatcher {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a UserWatcher {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<UserWatcher> for IUserWatcher {
            fn from(value: UserWatcher) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&UserWatcher> for IUserWatcher {
            fn from(value: &UserWatcher) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IUserWatcher>> for UserWatcher {
            fn into(self) -> ::windows::Param<'a, IUserWatcher> {
                ::windows::Param::Owned(::std::convert::Into::<IUserWatcher>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IUserWatcher>> for &'a UserWatcher {
            fn into(self) -> ::windows::Param<'a, IUserWatcher> {
                ::windows::Param::Owned(::std::convert::Into::<IUserWatcher>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        unsafe impl ::std::marker::Send for UserWatcher {}
        unsafe impl ::std::marker::Sync for UserWatcher {}
        #[repr(transparent)]
        pub struct IUserStatics(::windows::Object);
        impl ::std::clone::Clone for IUserStatics {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::fmt::Debug for IUserStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::std::cmp::PartialEq for IUserStatics {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for IUserStatics {}
        impl IUserStatics {
            pub fn create_watcher(&self) -> ::windows::Result<UserWatcher> {
                let this = self;
                unsafe {
                    let mut result__: <UserWatcher as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserWatcher>(result__)
                }
            }
            pub fn find_all_async(
                &self,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<User>,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<User>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<
                            super::foundation::collections::IVectorView<User>,
                        >>(result__)
                }
            }
            pub fn find_all_async_by_type(
                &self,
                r#type: UserType,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<User>,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<User>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        r#type,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<User>,
                    >>(result__)
                }
            }
            pub fn find_all_async_by_type_and_status(
                &self,
                r#type: UserType,
                status: UserAuthenticationStatus,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<User>,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<User>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        r#type,
                        status,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<User>,
                    >>(result__)
                }
            }
            pub fn get_from_id<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                non_roamable_id: T0__,
            ) -> ::windows::Result<User> {
                let this = self;
                unsafe {
                    let mut result__: <User as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        non_roamable_id.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<User>(result__)
                }
            }
        }
        unsafe impl ::windows::Interface for IUserStatics {
            type Vtable = IUserStatics_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                358527547,
                9258,
                17888,
                [162, 233, 49, 113, 252, 106, 127, 221],
            );
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IUserStatics_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                r#type: UserType,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                r#type: UserType,
                status: UserAuthenticationStatus,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                non_roamable_id: ::windows::RawPtr,
                result__: *mut ::windows::RawPtr,
            ) -> ::windows::ErrorCode,
        );
        unsafe impl ::windows::RuntimeType for IUserStatics {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                { ::windows::ConstBuffer::from_slice(b"{155eb23b-242a-45e0-a2e9-3171fc6a7fdd}") };
        }
        impl ::std::convert::From<IUserStatics> for ::windows::Object {
            fn from(value: IUserStatics) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IUserStatics> for ::windows::Object {
            fn from(value: &IUserStatics) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for IUserStatics {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a IUserStatics {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        #[repr(transparent)]
        pub struct User(::windows::Object);
        impl User {
            pub fn non_roamable_id(&self) -> ::windows::Result<::windows::HString> {
                let this = self;
                unsafe {
                    let mut result__: <::windows::HString as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<::windows::HString>(result__)
                }
            }
            pub fn authentication_status(&self) -> ::windows::Result<UserAuthenticationStatus> {
                let this = self;
                unsafe {
                    let mut result__: <UserAuthenticationStatus as ::windows::Abi>::Abi =
                        ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserAuthenticationStatus>(result__)
                }
            }
            pub fn r#type(&self) -> ::windows::Result<UserType> {
                let this = self;
                unsafe {
                    let mut result__: <UserType as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserType>(result__)
                }
            }
            pub fn get_property_async<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                &self,
                value: T0__,
            ) -> ::windows::Result<super::foundation::IAsyncOperation<::windows::Object>>
            {
                let this = self;
                unsafe {
                    let mut result__ : < super :: foundation :: IAsyncOperation :: < :: windows :: Object > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        value.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<::windows::Object>>(result__)
                }
            }
            pub fn get_properties_async<
                'a,
                T0__: ::std::convert::Into<
                    ::windows::Param<
                        'a,
                        super::foundation::collections::IVectorView<::windows::HString>,
                    >,
                >,
            >(
                &self,
                values: T0__,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<super::foundation::collections::IPropertySet>,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IPropertySet,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        values.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IPropertySet,
                    >>(result__)
                }
            }
            pub fn get_picture_async(
                &self,
                desired_size: UserPictureSize,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::storage::streams::IRandomAccessStreamReference,
                >,
            > {
                let this = self;
                unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::storage::streams::IRandomAccessStreamReference,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).11)(
                        ::windows::Abi::abi(this),
                        desired_size,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::storage::streams::IRandomAccessStreamReference,
                    >>(result__)
                }
            }
            pub fn create_watcher() -> ::windows::Result<UserWatcher> {
                Self::IUserStatics(|this| unsafe {
                    let mut result__: <UserWatcher as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<UserWatcher>(result__)
                })
            }
            pub fn find_all_async() -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<User>,
                >,
            > {
                Self::IUserStatics(|this| unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<User>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), &mut result__)
                        .from_abi::<super::foundation::IAsyncOperation<
                            super::foundation::collections::IVectorView<User>,
                        >>(result__)
                })
            }
            pub fn find_all_async_by_type(
                r#type: UserType,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<User>,
                >,
            > {
                Self::IUserStatics(|this| unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<User>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).8)(
                        ::windows::Abi::abi(this),
                        r#type,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<User>,
                    >>(result__)
                })
            }
            pub fn find_all_async_by_type_and_status(
                r#type: UserType,
                status: UserAuthenticationStatus,
            ) -> ::windows::Result<
                super::foundation::IAsyncOperation<
                    super::foundation::collections::IVectorView<User>,
                >,
            > {
                Self::IUserStatics(|this| unsafe {
                    let mut result__: <super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<User>,
                    > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).9)(
                        ::windows::Abi::abi(this),
                        r#type,
                        status,
                        &mut result__,
                    )
                    .from_abi::<super::foundation::IAsyncOperation<
                        super::foundation::collections::IVectorView<User>,
                    >>(result__)
                })
            }
            pub fn get_from_id<
                'a,
                T0__: ::std::convert::Into<::windows::Param<'a, ::windows::HString>>,
            >(
                non_roamable_id: T0__,
            ) -> ::windows::Result<User> {
                Self::IUserStatics(|this| unsafe {
                    let mut result__: <User as ::windows::Abi>::Abi = ::std::mem::zeroed();
                    (::windows::Interface::vtable(this).10)(
                        ::windows::Abi::abi(this),
                        non_roamable_id.into().abi(),
                        &mut result__,
                    )
                    .from_abi::<User>(result__)
                })
            }
            #[allow(non_snake_case)]
            fn IUserStatics<R, F: FnOnce(&IUserStatics) -> ::windows::Result<R>>(
                callback: F,
            ) -> ::windows::Result<R> {
                static mut SHARED: ::windows::FactoryCache<User, IUserStatics> =
                    ::windows::FactoryCache::new();
                unsafe { SHARED.call(callback) }
            }
        }
        impl ::std::clone::Clone for User {
            fn clone(&self) -> Self {
                Self(self.0.clone())
            }
        }
        impl ::std::cmp::PartialEq for User {
            fn eq(&self, other: &Self) -> bool {
                self.0 == other.0
            }
        }
        impl ::std::cmp::Eq for User {}
        impl ::std::fmt::Debug for User {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", self.0)
            }
        }
        impl ::windows::RuntimeName for User {
            const NAME: &'static str = "Windows.System.User";
        }
        unsafe impl ::windows::Interface for User {
            type Vtable = IUser_abi;
            const IID: ::windows::Guid = <IUser as ::windows::Interface>::IID;
        }
        unsafe impl ::windows::RuntimeType for User {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"rc(Windows.System.User;{df9a26c6-e746-4bcd-b5d4-120103c4209b})",
            );
        }
        impl ::std::convert::From<User> for ::windows::Object {
            fn from(value: User) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&User> for ::windows::Object {
            fn from(value: &User) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for User {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, ::windows::Object>> for &'a User {
            fn into(self) -> ::windows::Param<'a, ::windows::Object> {
                ::windows::Param::Owned(::std::convert::Into::<::windows::Object>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        impl ::std::convert::From<User> for IUser {
            fn from(value: User) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&User> for IUser {
            fn from(value: &User) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IUser>> for User {
            fn into(self) -> ::windows::Param<'a, IUser> {
                ::windows::Param::Owned(::std::convert::Into::<IUser>::into(self))
            }
        }
        impl<'a> ::std::convert::Into<::windows::Param<'a, IUser>> for &'a User {
            fn into(self) -> ::windows::Param<'a, IUser> {
                ::windows::Param::Owned(::std::convert::Into::<IUser>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        unsafe impl ::std::marker::Send for User {}
        unsafe impl ::std::marker::Sync for User {}
    }
}
